{"ast":null,"code":"/**\n * The original package is https://www.npmjs.com/package/textarea-caret-ts\n * The original file is https://github.com/TheRealSyler/textarea-caret-position/blob/master/index.ts\n *\n * Here I modified it to make it works when input is scrolled.\n */\nimport { isBrowser } from \"../../_utils/index.mjs\";\n/**\n * Returns the Absolute (relative to the inner window size) position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\nexport function getAbsolutePosition(element) {\n  const caretRelPost = getRelativePosition(element);\n  return {\n    left: window.scrollX + element.getBoundingClientRect().left + caretRelPost.left,\n    top: window.scrollY + element.getBoundingClientRect().top + caretRelPost.top,\n    absolute: true,\n    height: caretRelPost.height\n  };\n}\n/**\n * Returns the relative position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\nexport function getRelativePosition(element, options = {\n  debug: false,\n  useSelectionEnd: false,\n  checkWidthOverflow: true\n}) {\n  const selectionStart = element.selectionStart !== null ? element.selectionStart : 0;\n  const selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;\n  const position = options.useSelectionEnd ? selectionEnd : selectionStart;\n  // We'll copy the properties below into the mirror div.\n  // Note that some browsers, such as Firefox, do not concatenate properties\n  // into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n  // so we have to list every single property explicitly.\n  const properties = ['direction',\n  // RTL support\n  'boxSizing', 'width',\n  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height', 'overflowX', 'overflowY',\n  // copy the scrollbar for IE\n  'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderStyle', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration',\n  // might not make a difference, but better be safe\n  'letterSpacing', 'wordSpacing', 'tabSize', 'MozTabSize'];\n  // Firefox 1.0+\n  const isFirefox = navigator.userAgent.toLowerCase().includes('firefox');\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretPosition should only be called in a browser');\n  }\n  const debug = options === null || options === void 0 ? void 0 : options.debug;\n  if (debug) {\n    const el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if (el === null || el === void 0 ? void 0 : el.parentNode) el.parentNode.removeChild(el);\n  }\n  // The mirror div will replicate the textareas style\n  const div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n  const style = div.style;\n  const computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n  const isInput = element.nodeName === 'INPUT';\n  // Default textarea styles\n  style.whiteSpace = isInput ? 'nowrap' : 'pre-wrap';\n  if (!isInput) style.wordWrap = 'break-word'; // only for textarea-s\n  // Position off-screen\n  style.position = 'absolute'; // required to return coordinates properly\n  if (!debug) style.visibility = 'hidden'; // not 'display: none' because we want rendering\n  // Transfer the element's properties to the div\n  properties.forEach(prop => {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      if (computed.boxSizing === 'border-box') {\n        const height = parseInt(computed.height);\n        const outerHeight = parseInt(computed.paddingTop) + parseInt(computed.paddingBottom) + parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth);\n        const targetHeight = outerHeight + parseInt(computed.lineHeight);\n        if (height > targetHeight) {\n          style.lineHeight = `${height - outerHeight}px`;\n        } else if (height === targetHeight) {\n          style.lineHeight = computed.lineHeight;\n        } else {\n          style.lineHeight = '0';\n        }\n      } else {\n        style.lineHeight = computed.height;\n      }\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height)) {\n      style.overflowY = 'scroll';\n    }\n  } else {\n    style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n  div.textContent = element.value.substring(0, position);\n  // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (isInput && div.textContent) {\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n  }\n  const span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textareas content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n  span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n  span.style.position = 'relative';\n  span.style.left = `${-element.scrollLeft}px`;\n  span.style.top = `${-element.scrollTop}px`;\n  div.appendChild(span);\n  const relativePosition = {\n    top: span.offsetTop + parseInt(computed.borderTopWidth),\n    left: span.offsetLeft + parseInt(computed.borderLeftWidth),\n    absolute: false,\n    // We don't use line-height since it may be too large for position. Eg. 34px\n    // for input\n    height: parseInt(computed.fontSize) * 1.5\n  };\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n  if (relativePosition.left >= element.clientWidth && options.checkWidthOverflow) {\n    relativePosition.left = element.clientWidth;\n  }\n  return relativePosition;\n}\n/**\n * sets the top and left css style of the element based on the absolute position of the caretElements caret,\n * @param offset offsets the position.\n * @param detectBoundary offsets the position if the position would be outside the window.\n * @param returnOnly if true the element position wont be set.\n */\nexport function setElementPositionBasedOnCaret(element, caretElement, offset = {\n  top: 0,\n  left: 0\n}, margin = 2, detectBoundary = true, returnOnly = false) {\n  const pos = getAbsolutePosition(caretElement);\n  if (detectBoundary) {\n    pos.left = pos.left + (element.clientWidth + margin) + offset.left > window.scrollX + window.innerWidth ? pos.left = window.scrollX + window.innerWidth - (element.clientWidth + margin) : pos.left += offset.left;\n    pos.top = pos.top + (element.clientWidth + margin) + offset.top > window.scrollY + window.innerHeight ? pos.top -= element.clientWidth + margin : pos.top += offset.top;\n  } else {\n    pos.top += offset.top;\n    pos.left += offset.left;\n  }\n  if (!returnOnly) {\n    element.style.top = `${pos.top}px`;\n    element.style.left = `${pos.left}px`;\n  }\n  return pos;\n}","map":{"version":3,"names":["isBrowser","getAbsolutePosition","element","caretRelPost","getRelativePosition","left","window","scrollX","getBoundingClientRect","top","scrollY","absolute","height","options","debug","useSelectionEnd","checkWidthOverflow","selectionStart","selectionEnd","position","properties","isFirefox","navigator","userAgent","toLowerCase","includes","Error","el","document","querySelector","parentNode","removeChild","div","createElement","id","body","appendChild","style","computed","getComputedStyle","currentStyle","isInput","nodeName","whiteSpace","wordWrap","visibility","forEach","prop","boxSizing","parseInt","outerHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","targetHeight","lineHeight","scrollHeight","overflowY","overflow","textContent","value","substring","replace","span","scrollLeft","scrollTop","relativePosition","offsetTop","offsetLeft","borderLeftWidth","fontSize","backgroundColor","clientWidth","setElementPositionBasedOnCaret","caretElement","offset","margin","detectBoundary","returnOnly","pos","innerWidth","innerHeight"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/mention/src/utils.mjs"],"sourcesContent":["/**\n * The original package is https://www.npmjs.com/package/textarea-caret-ts\n * The original file is https://github.com/TheRealSyler/textarea-caret-position/blob/master/index.ts\n *\n * Here I modified it to make it works when input is scrolled.\n */\nimport { isBrowser } from \"../../_utils/index.mjs\";\n/**\n * Returns the Absolute (relative to the inner window size) position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\nexport function getAbsolutePosition(element) {\n  const caretRelPost = getRelativePosition(element);\n  return {\n    left: window.scrollX + element.getBoundingClientRect().left + caretRelPost.left,\n    top: window.scrollY + element.getBoundingClientRect().top + caretRelPost.top,\n    absolute: true,\n    height: caretRelPost.height\n  };\n}\n/**\n * Returns the relative position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\nexport function getRelativePosition(element, options = {\n  debug: false,\n  useSelectionEnd: false,\n  checkWidthOverflow: true\n}) {\n  const selectionStart = element.selectionStart !== null ? element.selectionStart : 0;\n  const selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;\n  const position = options.useSelectionEnd ? selectionEnd : selectionStart;\n  // We'll copy the properties below into the mirror div.\n  // Note that some browsers, such as Firefox, do not concatenate properties\n  // into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n  // so we have to list every single property explicitly.\n  const properties = ['direction',\n  // RTL support\n  'boxSizing', 'width',\n  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height', 'overflowX', 'overflowY',\n  // copy the scrollbar for IE\n  'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderStyle', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration',\n  // might not make a difference, but better be safe\n  'letterSpacing', 'wordSpacing', 'tabSize', 'MozTabSize'];\n  // Firefox 1.0+\n  const isFirefox = navigator.userAgent.toLowerCase().includes('firefox');\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretPosition should only be called in a browser');\n  }\n  const debug = options === null || options === void 0 ? void 0 : options.debug;\n  if (debug) {\n    const el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if (el === null || el === void 0 ? void 0 : el.parentNode) el.parentNode.removeChild(el);\n  }\n  // The mirror div will replicate the textareas style\n  const div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n  const style = div.style;\n  const computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n  const isInput = element.nodeName === 'INPUT';\n  // Default textarea styles\n  style.whiteSpace = isInput ? 'nowrap' : 'pre-wrap';\n  if (!isInput) style.wordWrap = 'break-word'; // only for textarea-s\n  // Position off-screen\n  style.position = 'absolute'; // required to return coordinates properly\n  if (!debug) style.visibility = 'hidden'; // not 'display: none' because we want rendering\n  // Transfer the element's properties to the div\n  properties.forEach(prop => {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      if (computed.boxSizing === 'border-box') {\n        const height = parseInt(computed.height);\n        const outerHeight = parseInt(computed.paddingTop) + parseInt(computed.paddingBottom) + parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth);\n        const targetHeight = outerHeight + parseInt(computed.lineHeight);\n        if (height > targetHeight) {\n          style.lineHeight = `${height - outerHeight}px`;\n        } else if (height === targetHeight) {\n          style.lineHeight = computed.lineHeight;\n        } else {\n          style.lineHeight = '0';\n        }\n      } else {\n        style.lineHeight = computed.height;\n      }\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height)) {\n      style.overflowY = 'scroll';\n    }\n  } else {\n    style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n  div.textContent = element.value.substring(0, position);\n  // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (isInput && div.textContent) {\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n  }\n  const span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textareas content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n  span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n  span.style.position = 'relative';\n  span.style.left = `${-element.scrollLeft}px`;\n  span.style.top = `${-element.scrollTop}px`;\n  div.appendChild(span);\n  const relativePosition = {\n    top: span.offsetTop + parseInt(computed.borderTopWidth),\n    left: span.offsetLeft + parseInt(computed.borderLeftWidth),\n    absolute: false,\n    // We don't use line-height since it may be too large for position. Eg. 34px\n    // for input\n    height: parseInt(computed.fontSize) * 1.5\n  };\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n  if (relativePosition.left >= element.clientWidth && options.checkWidthOverflow) {\n    relativePosition.left = element.clientWidth;\n  }\n  return relativePosition;\n}\n/**\n * sets the top and left css style of the element based on the absolute position of the caretElements caret,\n * @param offset offsets the position.\n * @param detectBoundary offsets the position if the position would be outside the window.\n * @param returnOnly if true the element position wont be set.\n */\nexport function setElementPositionBasedOnCaret(element, caretElement, offset = {\n  top: 0,\n  left: 0\n}, margin = 2, detectBoundary = true, returnOnly = false) {\n  const pos = getAbsolutePosition(caretElement);\n  if (detectBoundary) {\n    pos.left = pos.left + (element.clientWidth + margin) + offset.left > window.scrollX + window.innerWidth ? pos.left = window.scrollX + window.innerWidth - (element.clientWidth + margin) : pos.left += offset.left;\n    pos.top = pos.top + (element.clientWidth + margin) + offset.top > window.scrollY + window.innerHeight ? pos.top -= element.clientWidth + margin : pos.top += offset.top;\n  } else {\n    pos.top += offset.top;\n    pos.left += offset.left;\n  }\n  if (!returnOnly) {\n    element.style.top = `${pos.top}px`;\n    element.style.left = `${pos.left}px`;\n  }\n  return pos;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}