{"ast":null,"code":"import { defineComponent, h, computed } from 'vue';\nimport { hsv2rgb, hsva, toRgbaString } from 'seemly';\nimport { convertColor, getModeFromValue } from \"./utils.mjs\";\nimport { warn } from \"../../_utils/index.mjs\";\n// Try to normalize the color values to ensure that they are valid CSS colors\nfunction normalizeColor(color, mode) {\n  if (mode === 'hsv') {\n    const [h, s, v, a] = hsva(color);\n    return toRgbaString([...hsv2rgb(h, s, v), a]);\n  }\n  // For the mode that is not in preset, we keep the original value.\n  // For color names, they are legal to CSS, so we don’t deal with them,\n  // and only standardize them when outputting.\n  return color;\n}\nfunction getHexFromName(color) {\n  const ctx = document.createElement('canvas').getContext('2d');\n  if (!ctx) {\n    return '#000000';\n  }\n  ctx.fillStyle = color;\n  return ctx.fillStyle;\n}\nexport default defineComponent({\n  name: 'ColorPickerSwatches',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    swatches: {\n      type: Array,\n      required: true\n    },\n    onUpdateColor: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    const parsedSwatchesRef = computed(() => props.swatches.map(value => {\n      const mode = getModeFromValue(value);\n      return {\n        value,\n        mode,\n        legalValue: normalizeColor(value, mode)\n      };\n    }));\n    function normalizeOutput(parsed) {\n      const {\n        mode: modeProp\n      } = props;\n      let {\n        value,\n        mode: swatchColorMode\n      } = parsed;\n      // color name is converted to hex\n      if (!swatchColorMode) {\n        swatchColorMode = 'hex';\n        if (/^[a-zA-Z]+$/.test(value)) {\n          value = getHexFromName(value);\n        } else {\n          // for invalid color, we make it black\n          warn('color-picker', `color ${value} in swatches is invalid.`);\n          value = '#000000';\n        }\n      }\n      if (swatchColorMode === modeProp) return value;\n      // swatch value to current mode value\n      return convertColor(value, modeProp, swatchColorMode);\n    }\n    function handleSwatchSelect(parsed) {\n      props.onUpdateColor(normalizeOutput(parsed));\n    }\n    function handleSwatchKeyDown(e, parsed) {\n      if (e.key === 'Enter') handleSwatchSelect(parsed);\n    }\n    return {\n      parsedSwatchesRef,\n      handleSwatchSelect,\n      handleSwatchKeyDown\n    };\n  },\n  render() {\n    const {\n      clsPrefix\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatches`\n    }, this.parsedSwatchesRef.map(swatch => h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatch`,\n      tabindex: 0,\n      onClick: () => {\n        this.handleSwatchSelect(swatch);\n      },\n      onKeydown: e => {\n        this.handleSwatchKeyDown(e, swatch);\n      }\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatch__fill`,\n      style: {\n        background: swatch.legalValue\n      }\n    }))));\n  }\n});","map":{"version":3,"names":["defineComponent","h","computed","hsv2rgb","hsva","toRgbaString","convertColor","getModeFromValue","warn","normalizeColor","color","mode","s","v","a","getHexFromName","ctx","document","createElement","getContext","fillStyle","name","props","clsPrefix","type","String","required","swatches","Array","onUpdateColor","Function","setup","parsedSwatchesRef","map","value","legalValue","normalizeOutput","parsed","modeProp","swatchColorMode","test","handleSwatchSelect","handleSwatchKeyDown","e","key","render","class","swatch","tabindex","onClick","onKeydown","style","background"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/color-picker/src/ColorPickerSwatches.mjs"],"sourcesContent":["import { defineComponent, h, computed } from 'vue';\nimport { hsv2rgb, hsva, toRgbaString } from 'seemly';\nimport { convertColor, getModeFromValue } from \"./utils.mjs\";\nimport { warn } from \"../../_utils/index.mjs\";\n// Try to normalize the color values to ensure that they are valid CSS colors\nfunction normalizeColor(color, mode) {\n  if (mode === 'hsv') {\n    const [h, s, v, a] = hsva(color);\n    return toRgbaString([...hsv2rgb(h, s, v), a]);\n  }\n  // For the mode that is not in preset, we keep the original value.\n  // For color names, they are legal to CSS, so we don’t deal with them,\n  // and only standardize them when outputting.\n  return color;\n}\nfunction getHexFromName(color) {\n  const ctx = document.createElement('canvas').getContext('2d');\n  if (!ctx) {\n    return '#000000';\n  }\n  ctx.fillStyle = color;\n  return ctx.fillStyle;\n}\nexport default defineComponent({\n  name: 'ColorPickerSwatches',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    swatches: {\n      type: Array,\n      required: true\n    },\n    onUpdateColor: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    const parsedSwatchesRef = computed(() => props.swatches.map(value => {\n      const mode = getModeFromValue(value);\n      return {\n        value,\n        mode,\n        legalValue: normalizeColor(value, mode)\n      };\n    }));\n    function normalizeOutput(parsed) {\n      const {\n        mode: modeProp\n      } = props;\n      let {\n        value,\n        mode: swatchColorMode\n      } = parsed;\n      // color name is converted to hex\n      if (!swatchColorMode) {\n        swatchColorMode = 'hex';\n        if (/^[a-zA-Z]+$/.test(value)) {\n          value = getHexFromName(value);\n        } else {\n          // for invalid color, we make it black\n          warn('color-picker', `color ${value} in swatches is invalid.`);\n          value = '#000000';\n        }\n      }\n      if (swatchColorMode === modeProp) return value;\n      // swatch value to current mode value\n      return convertColor(value, modeProp, swatchColorMode);\n    }\n    function handleSwatchSelect(parsed) {\n      props.onUpdateColor(normalizeOutput(parsed));\n    }\n    function handleSwatchKeyDown(e, parsed) {\n      if (e.key === 'Enter') handleSwatchSelect(parsed);\n    }\n    return {\n      parsedSwatchesRef,\n      handleSwatchSelect,\n      handleSwatchKeyDown\n    };\n  },\n  render() {\n    const {\n      clsPrefix\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatches`\n    }, this.parsedSwatchesRef.map(swatch => h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatch`,\n      tabindex: 0,\n      onClick: () => {\n        this.handleSwatchSelect(swatch);\n      },\n      onKeydown: e => {\n        this.handleSwatchKeyDown(e, swatch);\n      }\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatch__fill`,\n      style: {\n        background: swatch.legalValue\n      }\n    }))));\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}