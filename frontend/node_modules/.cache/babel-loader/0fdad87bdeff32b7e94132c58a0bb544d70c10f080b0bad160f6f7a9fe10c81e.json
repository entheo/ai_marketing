{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from \"../../../_mixins/common.mjs\";\nimport { c } from \"../../../_utils/cssr/index.mjs\";\nimport { NScrollbar } from \"../../../_internal/index.mjs\";\nimport { formatLength, resolveSlot, warn } from \"../../../_utils/index.mjs\";\nimport { NEmpty } from \"../../../empty/index.mjs\";\nimport { dataTableInjectionKey } from \"../interface.mjs\";\nimport { createRowClassName, getColKey, isColumnSorting } from \"../utils.mjs\";\nimport Cell from \"./Cell.mjs\";\nimport ExpandTrigger from \"./ExpandTrigger.mjs\";\nimport RenderSafeCheckbox from \"./BodyCheckbox.mjs\";\nimport RenderSafeRadio from \"./BodyRadio.mjs\";\nimport TableHeader from \"./Header.mjs\";\nfunction flatten(rowInfos, expandedRowKeys) {\n  const fRows = [];\n  function traverse(rs, rootIndex) {\n    rs.forEach(r => {\n      if (r.children && expandedRowKeys.has(r.key)) {\n        fRows.push({\n          tmNode: r,\n          striped: false,\n          key: r.key,\n          index: rootIndex\n        });\n        traverse(r.children, rootIndex);\n      } else {\n        fRows.push({\n          key: r.key,\n          tmNode: r,\n          striped: false,\n          index: rootIndex\n        });\n      }\n    });\n  }\n  rowInfos.forEach(rowInfo => {\n    fRows.push(rowInfo);\n    const {\n      children\n    } = rowInfo.tmNode;\n    if (children && expandedRowKeys.has(rowInfo.key)) {\n      traverse(children, rowInfo.index);\n    }\n  });\n  return fRows;\n}\nconst VirtualListItemWrapper = defineComponent({\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    cols: {\n      type: Array,\n      required: true\n    },\n    onMouseenter: Function,\n    onMouseleave: Function\n  },\n  render() {\n    const {\n      clsPrefix,\n      id,\n      cols,\n      onMouseenter,\n      onMouseleave\n    } = this;\n    return h(\"table\", {\n      style: {\n        tableLayout: 'fixed'\n      },\n      class: `${clsPrefix}-data-table-table`,\n      onMouseenter: onMouseenter,\n      onMouseleave: onMouseleave\n    }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n      key: col.key,\n      style: col.style\n    }))), h(\"tbody\", {\n      \"data-n-id\": id,\n      class: `${clsPrefix}-data-table-tbody`\n    }, this.$slots));\n  }\n});\nexport default defineComponent({\n  name: 'DataTableBody',\n  props: {\n    onResize: Function,\n    showHeader: Boolean,\n    flexHeight: Boolean,\n    bodyStyle: Object\n  },\n  setup(props) {\n    const {\n      slots: dataTableSlots,\n      bodyWidthRef,\n      mergedExpandedRowKeysRef,\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      scrollXRef,\n      colsRef,\n      paginatedDataRef,\n      rawPaginatedDataRef,\n      fixedColumnLeftMapRef,\n      fixedColumnRightMapRef,\n      mergedCurrentPageRef,\n      rowClassNameRef,\n      leftActiveFixedColKeyRef,\n      leftActiveFixedChildrenColKeysRef,\n      rightActiveFixedColKeyRef,\n      rightActiveFixedChildrenColKeysRef,\n      renderExpandRef,\n      hoverKeyRef,\n      summaryRef,\n      mergedSortStateRef,\n      virtualScrollRef,\n      componentId,\n      mergedTableLayoutRef,\n      childTriggerColIndexRef,\n      indentRef,\n      rowPropsRef,\n      maxHeightRef,\n      stripedRef,\n      loadingRef,\n      onLoadRef,\n      loadingKeySetRef,\n      expandableRef,\n      stickyExpandedRowsRef,\n      renderExpandIconRef,\n      summaryPlacementRef,\n      treeMateRef,\n      scrollbarPropsRef,\n      setHeaderScrollLeft,\n      doUpdateExpandedRowKeys,\n      handleTableBodyScroll,\n      doCheck,\n      doUncheck,\n      renderCell\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(dataTableInjectionKey);\n    const scrollbarInstRef = ref(null);\n    const virtualListRef = ref(null);\n    const emptyElRef = ref(null);\n    const emptyRef = useMemo(() => paginatedDataRef.value.length === 0);\n    // If header is not inside & empty is displayed, no table part would be\n    // shown. So to collect a body width, we need to put a ref on empty element\n    const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value);\n    // If no body is shown, we shouldn't show scrollbar\n    const bodyShowHeaderOnlyRef = useMemo(() => {\n      return props.showHeader || emptyRef.value;\n    });\n    let lastSelectedKey = '';\n    const mergedExpandedRowKeySetRef = computed(() => {\n      return new Set(mergedExpandedRowKeysRef.value);\n    });\n    function getRowInfo(key) {\n      var _a;\n      return (_a = treeMateRef.value.getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode;\n    }\n    function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n      const rowInfo = getRowInfo(tmNode.key);\n      if (!rowInfo) {\n        warn('data-table', `fail to get row data with key ${tmNode.key}`);\n        return;\n      }\n      if (shiftKey) {\n        const lastIndex = paginatedDataRef.value.findIndex(item => item.key === lastSelectedKey);\n        if (lastIndex !== -1) {\n          const currentIndex = paginatedDataRef.value.findIndex(item => item.key === tmNode.key);\n          const start = Math.min(lastIndex, currentIndex);\n          const end = Math.max(lastIndex, currentIndex);\n          const rowKeysToCheck = [];\n          paginatedDataRef.value.slice(start, end + 1).forEach(r => {\n            if (!r.disabled) {\n              rowKeysToCheck.push(r.key);\n            }\n          });\n          if (checked) {\n            doCheck(rowKeysToCheck, false, rowInfo);\n          } else {\n            doUncheck(rowKeysToCheck, rowInfo);\n          }\n          lastSelectedKey = tmNode.key;\n          return;\n        }\n      }\n      if (checked) {\n        doCheck(tmNode.key, false, rowInfo);\n      } else {\n        doUncheck(tmNode.key, rowInfo);\n      }\n      lastSelectedKey = tmNode.key;\n    }\n    function handleRadioUpdateChecked(tmNode) {\n      const rowInfo = getRowInfo(tmNode.key);\n      if (!rowInfo) {\n        warn('data-table', `fail to get row data with key ${tmNode.key}`);\n        return;\n      }\n      doCheck(tmNode.key, true, rowInfo);\n    }\n    function getScrollContainer() {\n      if (!shouldDisplaySomeTablePartRef.value) {\n        const {\n          value: emptyEl\n        } = emptyElRef;\n        if (emptyEl) {\n          return emptyEl;\n        } else {\n          return null;\n        }\n      }\n      if (virtualScrollRef.value) {\n        return virtualListContainer();\n      }\n      const {\n        value\n      } = scrollbarInstRef;\n      if (value) return value.containerRef;\n      return null;\n    }\n    // For table row with children, tmNode is non-nullable\n    // For table row is expandable but is not tree data, tmNode is null\n    function handleUpdateExpanded(key, tmNode) {\n      var _a;\n      if (loadingKeySetRef.value.has(key)) return;\n      const {\n        value: mergedExpandedRowKeys\n      } = mergedExpandedRowKeysRef;\n      const index = mergedExpandedRowKeys.indexOf(key);\n      const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n      if (~index) {\n        nextExpandedKeys.splice(index, 1);\n        doUpdateExpandedRowKeys(nextExpandedKeys);\n      } else {\n        if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n          loadingKeySetRef.value.add(key);\n          void ((_a = onLoadRef.value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n            const {\n              value: futureMergedExpandedRowKeys\n            } = mergedExpandedRowKeysRef;\n            const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n            const index = futureNextExpandedKeys.indexOf(key);\n            if (!~index) {\n              futureNextExpandedKeys.push(key);\n            }\n            doUpdateExpandedRowKeys(futureNextExpandedKeys);\n          }).finally(() => {\n            loadingKeySetRef.value.delete(key);\n          }));\n        } else {\n          nextExpandedKeys.push(key);\n          doUpdateExpandedRowKeys(nextExpandedKeys);\n        }\n      }\n    }\n    function handleMouseleaveTable() {\n      hoverKeyRef.value = null;\n    }\n    function virtualListContainer() {\n      const {\n        value\n      } = virtualListRef;\n      return (value === null || value === void 0 ? void 0 : value.listElRef) || null;\n    }\n    function virtualListContent() {\n      const {\n        value\n      } = virtualListRef;\n      return (value === null || value === void 0 ? void 0 : value.itemsElRef) || null;\n    }\n    function handleVirtualListScroll(e) {\n      var _a;\n      handleTableBodyScroll(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n    function handleVirtualListResize(e) {\n      var _a;\n      const {\n        onResize\n      } = props;\n      if (onResize) onResize(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n    const exposedMethods = {\n      getScrollContainer,\n      scrollTo(arg0, arg1) {\n        var _a, _b;\n        if (virtualScrollRef.value) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          (_a = virtualListRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg0, arg1);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          (_b = scrollbarInstRef.value) === null || _b === void 0 ? void 0 : _b.scrollTo(arg0, arg1);\n        }\n      }\n    };\n    // manually control shadow style to avoid rerender\n    const style = c([({\n      props: cProps\n    }) => {\n      const createActiveLeftFixedStyle = leftActiveFixedColKey => {\n        if (leftActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, {\n          boxShadow: 'var(--n-box-shadow-after)'\n        });\n      };\n      const createActiveRightFixedStyle = rightActiveFixedColKey => {\n        if (rightActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, {\n          boxShadow: 'var(--n-box-shadow-before)'\n        });\n      };\n      return c([createActiveLeftFixedStyle(cProps.leftActiveFixedColKey), createActiveRightFixedStyle(cProps.rightActiveFixedColKey), cProps.leftActiveFixedChildrenColKeys.map(leftActiveFixedColKey => createActiveLeftFixedStyle(leftActiveFixedColKey)), cProps.rightActiveFixedChildrenColKeys.map(rightActiveFixedColKey => createActiveRightFixedStyle(rightActiveFixedColKey))]);\n    }]);\n    let fixedStyleMounted = false;\n    watchEffect(() => {\n      const {\n        value: leftActiveFixedColKey\n      } = leftActiveFixedColKeyRef;\n      const {\n        value: leftActiveFixedChildrenColKeys\n      } = leftActiveFixedChildrenColKeysRef;\n      const {\n        value: rightActiveFixedColKey\n      } = rightActiveFixedColKeyRef;\n      const {\n        value: rightActiveFixedChildrenColKeys\n      } = rightActiveFixedChildrenColKeysRef;\n      if (!fixedStyleMounted && leftActiveFixedColKey === null && rightActiveFixedColKey === null) {\n        return;\n      }\n      const cProps = {\n        leftActiveFixedColKey,\n        leftActiveFixedChildrenColKeys,\n        rightActiveFixedColKey,\n        rightActiveFixedChildrenColKeys,\n        componentId\n      };\n      style.mount({\n        id: `n-${componentId}`,\n        force: true,\n        props: cProps,\n        anchorMetaName: cssrAnchorMetaName\n      });\n      fixedStyleMounted = true;\n    });\n    onUnmounted(() => {\n      style.unmount({\n        id: `n-${componentId}`\n      });\n    });\n    return Object.assign({\n      bodyWidth: bodyWidthRef,\n      summaryPlacement: summaryPlacementRef,\n      dataTableSlots,\n      componentId,\n      scrollbarInstRef,\n      virtualListRef,\n      emptyElRef,\n      summary: summaryRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      scrollX: scrollXRef,\n      cols: colsRef,\n      loading: loadingRef,\n      bodyShowHeaderOnly: bodyShowHeaderOnlyRef,\n      shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef,\n      empty: emptyRef,\n      paginatedDataAndInfo: computed(() => {\n        const {\n          value: striped\n        } = stripedRef;\n        let hasChildren = false;\n        const data = paginatedDataRef.value.map(striped ? (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: index % 2 === 1,\n            index\n          };\n        } : (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: false,\n            index\n          };\n        });\n        return {\n          data,\n          hasChildren\n        };\n      }),\n      rawPaginatedData: rawPaginatedDataRef,\n      fixedColumnLeftMap: fixedColumnLeftMapRef,\n      fixedColumnRightMap: fixedColumnRightMapRef,\n      currentPage: mergedCurrentPageRef,\n      rowClassName: rowClassNameRef,\n      renderExpand: renderExpandRef,\n      mergedExpandedRowKeySet: mergedExpandedRowKeySetRef,\n      hoverKey: hoverKeyRef,\n      mergedSortState: mergedSortStateRef,\n      virtualScroll: virtualScrollRef,\n      mergedTableLayout: mergedTableLayoutRef,\n      childTriggerColIndex: childTriggerColIndexRef,\n      indent: indentRef,\n      rowProps: rowPropsRef,\n      maxHeight: maxHeightRef,\n      loadingKeySet: loadingKeySetRef,\n      expandable: expandableRef,\n      stickyExpandedRows: stickyExpandedRowsRef,\n      renderExpandIcon: renderExpandIconRef,\n      scrollbarProps: scrollbarPropsRef,\n      setHeaderScrollLeft,\n      handleVirtualListScroll,\n      handleVirtualListResize,\n      handleMouseleaveTable,\n      virtualListContainer,\n      virtualListContent,\n      handleTableBodyScroll,\n      handleCheckboxUpdateChecked,\n      handleRadioUpdateChecked,\n      handleUpdateExpanded,\n      renderCell\n    }, exposedMethods);\n  },\n  render() {\n    const {\n      mergedTheme,\n      scrollX,\n      mergedClsPrefix,\n      virtualScroll,\n      maxHeight,\n      mergedTableLayout,\n      flexHeight,\n      loadingKeySet,\n      onResize,\n      setHeaderScrollLeft\n    } = this;\n    const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight;\n    // For a basic table with auto layout whose content may overflow we will\n    // make it scrollable, which differs from browser's native behavior.\n    // For native behavior, see\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n    const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n    const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n    const contentStyle = {\n      minWidth: formatLength(scrollX) || '100%'\n    };\n    if (scrollX) contentStyle.width = '100%';\n    const tableNode = h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      ref: \"scrollbarInstRef\",\n      scrollable: scrollable || isBasicAutoLayout,\n      class: `${mergedClsPrefix}-data-table-base-table-body`,\n      style: !this.empty ? this.bodyStyle : undefined,\n      theme: mergedTheme.peers.Scrollbar,\n      themeOverrides: mergedTheme.peerOverrides.Scrollbar,\n      contentStyle: contentStyle,\n      container: virtualScroll ? this.virtualListContainer : undefined,\n      content: virtualScroll ? this.virtualListContent : undefined,\n      horizontalRailStyle: {\n        zIndex: 3\n      },\n      verticalRailStyle: {\n        zIndex: 3\n      },\n      xScrollable: xScrollable,\n      onScroll: virtualScroll ? undefined : this.handleTableBodyScroll,\n      internalOnUpdateScrollLeft: setHeaderScrollLeft,\n      onResize: onResize\n    }), {\n      default: () => {\n        // coordinate to pass if there are cells that cross row & col\n        const cordToPass = {};\n        // coordinate to related hover keys\n        const cordKey = {};\n        const {\n          cols,\n          paginatedDataAndInfo,\n          mergedTheme,\n          fixedColumnLeftMap,\n          fixedColumnRightMap,\n          currentPage,\n          rowClassName,\n          mergedSortState,\n          mergedExpandedRowKeySet,\n          stickyExpandedRows,\n          componentId,\n          childTriggerColIndex,\n          expandable,\n          rowProps,\n          handleMouseleaveTable,\n          renderExpand,\n          summary,\n          handleCheckboxUpdateChecked,\n          handleRadioUpdateChecked,\n          handleUpdateExpanded\n        } = this;\n        const {\n          length: colCount\n        } = cols;\n        let mergedData;\n        // if there is children in data, we should expand mergedData first\n        const {\n          data: paginatedData,\n          hasChildren\n        } = paginatedDataAndInfo;\n        const mergedPaginationData = hasChildren ? flatten(paginatedData, mergedExpandedRowKeySet) : paginatedData;\n        if (summary) {\n          const summaryRows = summary(this.rawPaginatedData);\n          if (Array.isArray(summaryRows)) {\n            const summaryRowData = summaryRows.map((row, i) => ({\n              isSummaryRow: true,\n              key: `__n_summary__${i}`,\n              tmNode: {\n                rawNode: row,\n                disabled: true\n              },\n              index: -1\n            }));\n            mergedData = this.summaryPlacement === 'top' ? [...summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, ...summaryRowData];\n          } else {\n            const summaryRowData = {\n              isSummaryRow: true,\n              key: '__n_summary__',\n              tmNode: {\n                rawNode: summaryRows,\n                disabled: true\n              },\n              index: -1\n            };\n            mergedData = this.summaryPlacement === 'top' ? [summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, summaryRowData];\n          }\n        } else {\n          mergedData = mergedPaginationData;\n        }\n        const indentStyle = hasChildren ? {\n          width: pxfy(this.indent)\n        } : undefined;\n        // Tile the data of the expanded row\n        const displayedData = [];\n        mergedData.forEach(rowInfo => {\n          if (renderExpand && mergedExpandedRowKeySet.has(rowInfo.key) && (!expandable || expandable(rowInfo.tmNode.rawNode))) {\n            displayedData.push(rowInfo, {\n              isExpandedRow: true,\n              key: `${rowInfo.key}-expand`,\n              // solve key repeat of the expanded row\n              tmNode: rowInfo.tmNode,\n              index: rowInfo.index\n            });\n          } else {\n            displayedData.push(rowInfo);\n          }\n        });\n        const {\n          length: rowCount\n        } = displayedData;\n        const rowIndexToKey = {};\n        paginatedData.forEach(({\n          tmNode\n        }, rowIndex) => {\n          rowIndexToKey[rowIndex] = tmNode.key;\n        });\n        const bodyWidth = stickyExpandedRows ? this.bodyWidth : null;\n        const bodyWidthPx = bodyWidth === null ? undefined : `${bodyWidth}px`;\n        const renderRow = (rowInfo, displayedRowIndex, isVirtual) => {\n          const {\n            index: actualRowIndex\n          } = rowInfo;\n          if ('isExpandedRow' in rowInfo) {\n            const {\n              tmNode: {\n                key,\n                rawNode\n              }\n            } = rowInfo;\n            return h(\"tr\", {\n              class: `${mergedClsPrefix}-data-table-tr ${mergedClsPrefix}-data-table-tr--expanded`,\n              key: `${key}__expand`\n            }, h(\"td\", {\n              class: [`${mergedClsPrefix}-data-table-td`, `${mergedClsPrefix}-data-table-td--last-col`, displayedRowIndex + 1 === rowCount && `${mergedClsPrefix}-data-table-td--last-row`],\n              colspan: colCount\n            }, stickyExpandedRows ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand`,\n              style: {\n                width: bodyWidthPx\n              }\n            }, renderExpand(rawNode, actualRowIndex)) : renderExpand(rawNode, actualRowIndex)));\n          }\n          const isSummary = ('isSummaryRow' in rowInfo);\n          const striped = !isSummary && rowInfo.striped;\n          const {\n            tmNode,\n            key: rowKey\n          } = rowInfo;\n          const {\n            rawNode: rowData\n          } = tmNode;\n          const expanded = mergedExpandedRowKeySet.has(rowKey);\n          const props = rowProps ? rowProps(rowData, actualRowIndex) : undefined;\n          const mergedRowClassName = typeof rowClassName === 'string' ? rowClassName : createRowClassName(rowData, actualRowIndex, rowClassName);\n          const row = h(\"tr\", Object.assign({\n            onMouseenter: () => {\n              this.hoverKey = rowKey;\n            },\n            key: rowKey,\n            class: [`${mergedClsPrefix}-data-table-tr`, isSummary && `${mergedClsPrefix}-data-table-tr--summary`, striped && `${mergedClsPrefix}-data-table-tr--striped`, expanded && `${mergedClsPrefix}-data-table-tr--expanded`, mergedRowClassName]\n          }, props), cols.map((col, colIndex) => {\n            var _a, _b, _c, _d, _e;\n            if (displayedRowIndex in cordToPass) {\n              const cordOfRowToPass = cordToPass[displayedRowIndex];\n              const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n              if (~indexInCordOfRowToPass) {\n                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                return null;\n              }\n            }\n            // TODO: Simplify row calculation\n            const {\n              column\n            } = col;\n            const colKey = getColKey(col);\n            const {\n              rowSpan,\n              colSpan\n            } = column;\n            const mergedColSpan = isSummary ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n            : colSpan ? colSpan(rowData, actualRowIndex) : 1;\n            const mergedRowSpan = isSummary ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n            : rowSpan ? rowSpan(rowData, actualRowIndex) : 1;\n            const isLastCol = colIndex + mergedColSpan === colCount;\n            const isLastRow = displayedRowIndex + mergedRowSpan === rowCount;\n            const isCrossRowTd = mergedRowSpan > 1;\n            if (isCrossRowTd) {\n              cordKey[displayedRowIndex] = {\n                [colIndex]: []\n              };\n            }\n            if (mergedColSpan > 1 || isCrossRowTd) {\n              for (let i = displayedRowIndex; i < displayedRowIndex + mergedRowSpan; ++i) {\n                if (isCrossRowTd) {\n                  cordKey[displayedRowIndex][colIndex].push(rowIndexToKey[i]);\n                }\n                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                  if (i === displayedRowIndex && j === colIndex) {\n                    continue;\n                  }\n                  if (!(i in cordToPass)) {\n                    cordToPass[i] = [j];\n                  } else {\n                    cordToPass[i].push(j);\n                  }\n                }\n              }\n            }\n            const hoverKey = isCrossRowTd ? this.hoverKey : null;\n            const {\n              cellProps\n            } = column;\n            const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, actualRowIndex);\n            const indentOffsetStyle = {\n              '--indent-offset': ''\n            };\n            return h(\"td\", Object.assign({}, resolvedCellProps, {\n              key: colKey,\n              style: [{\n                textAlign: column.align || undefined,\n                left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n              }, indentOffsetStyle, (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''],\n              colspan: mergedColSpan,\n              rowspan: isVirtual ? undefined : mergedRowSpan,\n              \"data-col-key\": colKey,\n              class: [`${mergedClsPrefix}-data-table-td`, column.className, resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class, isSummary && `${mergedClsPrefix}-data-table-td--summary`, (hoverKey !== null && cordKey[displayedRowIndex][colIndex].includes(hoverKey) || isColumnSorting(column, mergedSortState)) && `${mergedClsPrefix}-data-table-td--hover`, column.fixed && `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`, column.align && `${mergedClsPrefix}-data-table-td--${column.align}-align`, column.type === 'selection' && `${mergedClsPrefix}-data-table-td--selection`, column.type === 'expand' && `${mergedClsPrefix}-data-table-td--expand`, isLastCol && `${mergedClsPrefix}-data-table-td--last-col`, isLastRow && `${mergedClsPrefix}-data-table-td--last-row`]\n            }), hasChildren && colIndex === childTriggerColIndex ? [repeat(indentOffsetStyle['--indent-offset'] = isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-indent`,\n              style: indentStyle\n            })), isSummary || rowInfo.tmNode.isLeaf ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand-placeholder`\n            }) : h(ExpandTrigger, {\n              class: `${mergedClsPrefix}-data-table-expand-trigger`,\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              loading: loadingKeySet.has(rowInfo.key),\n              onClick: () => {\n                handleUpdateExpanded(rowKey, rowInfo.tmNode);\n              }\n            })] : null, column.type === 'selection' ? !isSummary ? column.multiple === false ? h(RenderSafeRadio, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: () => {\n                handleRadioUpdateChecked(rowInfo.tmNode);\n              }\n            }) : h(RenderSafeCheckbox, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: (checked, e) => {\n                handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey);\n              }\n            }) : null : column.type === 'expand' ? !isSummary ? !column.expandable || ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData)) ? h(ExpandTrigger, {\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              onClick: () => {\n                handleUpdateExpanded(rowKey, null);\n              }\n            }) : null : null : h(Cell, {\n              clsPrefix: mergedClsPrefix,\n              index: actualRowIndex,\n              row: rowData,\n              column: column,\n              isSummary: isSummary,\n              mergedTheme: mergedTheme,\n              renderCell: this.renderCell\n            }));\n          }));\n          return row;\n        };\n        if (!virtualScroll) {\n          return h(\"table\", {\n            class: `${mergedClsPrefix}-data-table-table`,\n            onMouseleave: handleMouseleaveTable,\n            style: {\n              tableLayout: this.mergedTableLayout\n            }\n          }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n            key: col.key,\n            style: col.style\n          }))), this.showHeader ? h(TableHeader, {\n            discrete: false\n          }) : null, !this.empty ? h(\"tbody\", {\n            \"data-n-id\": componentId,\n            class: `${mergedClsPrefix}-data-table-tbody`\n          }, displayedData.map((rowInfo, displayedRowIndex) => {\n            return renderRow(rowInfo, displayedRowIndex, false);\n          })) : null);\n        } else {\n          return h(VirtualList, {\n            ref: \"virtualListRef\",\n            items: displayedData,\n            itemSize: 28,\n            visibleItemsTag: VirtualListItemWrapper,\n            visibleItemsProps: {\n              clsPrefix: mergedClsPrefix,\n              id: componentId,\n              cols,\n              onMouseleave: handleMouseleaveTable\n            },\n            showScrollbar: false,\n            onResize: this.handleVirtualListResize,\n            onScroll: this.handleVirtualListScroll,\n            itemsStyle: contentStyle,\n            itemResizable: true\n          }, {\n            default: ({\n              item,\n              index\n            }) => renderRow(item, index, true)\n          });\n        }\n      }\n    });\n    if (this.empty) {\n      const createEmptyNode = () => h(\"div\", {\n        class: [`${mergedClsPrefix}-data-table-empty`, this.loading && `${mergedClsPrefix}-data-table-empty--hide`],\n        style: this.bodyStyle,\n        ref: \"emptyElRef\"\n      }, resolveSlot(this.dataTableSlots.empty, () => [h(NEmpty, {\n        theme: this.mergedTheme.peers.Empty,\n        themeOverrides: this.mergedTheme.peerOverrides.Empty\n      })]));\n      if (this.shouldDisplaySomeTablePart) {\n        return h(Fragment, null, tableNode, createEmptyNode());\n      } else {\n        return h(VResizeObserver, {\n          onResize: this.onResize\n        }, {\n          default: createEmptyNode\n        });\n      }\n    }\n    return tableNode;\n  }\n});","map":{"version":3,"names":["h","ref","defineComponent","inject","watchEffect","onUnmounted","computed","Fragment","pxfy","repeat","VirtualList","VResizeObserver","useMemo","cssrAnchorMetaName","c","NScrollbar","formatLength","resolveSlot","warn","NEmpty","dataTableInjectionKey","createRowClassName","getColKey","isColumnSorting","Cell","ExpandTrigger","RenderSafeCheckbox","RenderSafeRadio","TableHeader","flatten","rowInfos","expandedRowKeys","fRows","traverse","rs","rootIndex","forEach","r","children","has","key","push","tmNode","striped","index","rowInfo","VirtualListItemWrapper","props","clsPrefix","type","String","required","id","cols","Array","onMouseenter","Function","onMouseleave","render","style","tableLayout","class","map","col","$slots","name","onResize","showHeader","Boolean","flexHeight","bodyStyle","Object","setup","slots","dataTableSlots","bodyWidthRef","mergedExpandedRowKeysRef","mergedClsPrefixRef","mergedThemeRef","scrollXRef","colsRef","paginatedDataRef","rawPaginatedDataRef","fixedColumnLeftMapRef","fixedColumnRightMapRef","mergedCurrentPageRef","rowClassNameRef","leftActiveFixedColKeyRef","leftActiveFixedChildrenColKeysRef","rightActiveFixedColKeyRef","rightActiveFixedChildrenColKeysRef","renderExpandRef","hoverKeyRef","summaryRef","mergedSortStateRef","virtualScrollRef","componentId","mergedTableLayoutRef","childTriggerColIndexRef","indentRef","rowPropsRef","maxHeightRef","stripedRef","loadingRef","onLoadRef","loadingKeySetRef","expandableRef","stickyExpandedRowsRef","renderExpandIconRef","summaryPlacementRef","treeMateRef","scrollbarPropsRef","setHeaderScrollLeft","doUpdateExpandedRowKeys","handleTableBodyScroll","doCheck","doUncheck","renderCell","scrollbarInstRef","virtualListRef","emptyElRef","emptyRef","value","length","shouldDisplaySomeTablePartRef","bodyShowHeaderOnlyRef","lastSelectedKey","mergedExpandedRowKeySetRef","Set","getRowInfo","_a","getNode","rawNode","handleCheckboxUpdateChecked","checked","shiftKey","lastIndex","findIndex","item","currentIndex","start","Math","min","end","max","rowKeysToCheck","slice","disabled","handleRadioUpdateChecked","getScrollContainer","emptyEl","virtualListContainer","containerRef","handleUpdateExpanded","mergedExpandedRowKeys","indexOf","nextExpandedKeys","from","splice","isLeaf","shallowLoaded","add","call","then","futureMergedExpandedRowKeys","futureNextExpandedKeys","finally","delete","handleMouseleaveTable","listElRef","virtualListContent","itemsElRef","handleVirtualListScroll","e","sync","handleVirtualListResize","exposedMethods","scrollTo","arg0","arg1","_b","cProps","createActiveLeftFixedStyle","leftActiveFixedColKey","boxShadow","createActiveRightFixedStyle","rightActiveFixedColKey","leftActiveFixedChildrenColKeys","rightActiveFixedChildrenColKeys","fixedStyleMounted","mount","force","anchorMetaName","unmount","assign","bodyWidth","summaryPlacement","summary","mergedClsPrefix","mergedTheme","scrollX","loading","bodyShowHeaderOnly","shouldDisplaySomeTablePart","empty","paginatedDataAndInfo","hasChildren","data","rawPaginatedData","fixedColumnLeftMap","fixedColumnRightMap","currentPage","rowClassName","renderExpand","mergedExpandedRowKeySet","hoverKey","mergedSortState","virtualScroll","mergedTableLayout","childTriggerColIndex","indent","rowProps","maxHeight","loadingKeySet","expandable","stickyExpandedRows","renderExpandIcon","scrollbarProps","scrollable","undefined","isBasicAutoLayout","xScrollable","contentStyle","minWidth","width","tableNode","theme","peers","Scrollbar","themeOverrides","peerOverrides","container","content","horizontalRailStyle","zIndex","verticalRailStyle","onScroll","internalOnUpdateScrollLeft","default","cordToPass","cordKey","colCount","mergedData","paginatedData","mergedPaginationData","summaryRows","isArray","summaryRowData","row","i","isSummaryRow","indentStyle","displayedData","isExpandedRow","rowCount","rowIndexToKey","rowIndex","bodyWidthPx","renderRow","displayedRowIndex","isVirtual","actualRowIndex","colspan","isSummary","rowKey","rowData","expanded","mergedRowClassName","colIndex","_c","_d","_e","cordOfRowToPass","indexInCordOfRowToPass","column","colKey","rowSpan","colSpan","mergedColSpan","mergedRowSpan","isLastCol","isLastRow","isCrossRowTd","j","cellProps","resolvedCellProps","indentOffsetStyle","textAlign","align","left","right","rowspan","className","includes","fixed","level","onClick","multiple","onUpdateChecked","discrete","items","itemSize","visibleItemsTag","visibleItemsProps","showScrollbar","itemsStyle","itemResizable","createEmptyNode","Empty"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/data-table/src/TableParts/Body.mjs"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from \"../../../_mixins/common.mjs\";\nimport { c } from \"../../../_utils/cssr/index.mjs\";\nimport { NScrollbar } from \"../../../_internal/index.mjs\";\nimport { formatLength, resolveSlot, warn } from \"../../../_utils/index.mjs\";\nimport { NEmpty } from \"../../../empty/index.mjs\";\nimport { dataTableInjectionKey } from \"../interface.mjs\";\nimport { createRowClassName, getColKey, isColumnSorting } from \"../utils.mjs\";\nimport Cell from \"./Cell.mjs\";\nimport ExpandTrigger from \"./ExpandTrigger.mjs\";\nimport RenderSafeCheckbox from \"./BodyCheckbox.mjs\";\nimport RenderSafeRadio from \"./BodyRadio.mjs\";\nimport TableHeader from \"./Header.mjs\";\nfunction flatten(rowInfos, expandedRowKeys) {\n  const fRows = [];\n  function traverse(rs, rootIndex) {\n    rs.forEach(r => {\n      if (r.children && expandedRowKeys.has(r.key)) {\n        fRows.push({\n          tmNode: r,\n          striped: false,\n          key: r.key,\n          index: rootIndex\n        });\n        traverse(r.children, rootIndex);\n      } else {\n        fRows.push({\n          key: r.key,\n          tmNode: r,\n          striped: false,\n          index: rootIndex\n        });\n      }\n    });\n  }\n  rowInfos.forEach(rowInfo => {\n    fRows.push(rowInfo);\n    const {\n      children\n    } = rowInfo.tmNode;\n    if (children && expandedRowKeys.has(rowInfo.key)) {\n      traverse(children, rowInfo.index);\n    }\n  });\n  return fRows;\n}\nconst VirtualListItemWrapper = defineComponent({\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    cols: {\n      type: Array,\n      required: true\n    },\n    onMouseenter: Function,\n    onMouseleave: Function\n  },\n  render() {\n    const {\n      clsPrefix,\n      id,\n      cols,\n      onMouseenter,\n      onMouseleave\n    } = this;\n    return h(\"table\", {\n      style: {\n        tableLayout: 'fixed'\n      },\n      class: `${clsPrefix}-data-table-table`,\n      onMouseenter: onMouseenter,\n      onMouseleave: onMouseleave\n    }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n      key: col.key,\n      style: col.style\n    }))), h(\"tbody\", {\n      \"data-n-id\": id,\n      class: `${clsPrefix}-data-table-tbody`\n    }, this.$slots));\n  }\n});\nexport default defineComponent({\n  name: 'DataTableBody',\n  props: {\n    onResize: Function,\n    showHeader: Boolean,\n    flexHeight: Boolean,\n    bodyStyle: Object\n  },\n  setup(props) {\n    const {\n      slots: dataTableSlots,\n      bodyWidthRef,\n      mergedExpandedRowKeysRef,\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      scrollXRef,\n      colsRef,\n      paginatedDataRef,\n      rawPaginatedDataRef,\n      fixedColumnLeftMapRef,\n      fixedColumnRightMapRef,\n      mergedCurrentPageRef,\n      rowClassNameRef,\n      leftActiveFixedColKeyRef,\n      leftActiveFixedChildrenColKeysRef,\n      rightActiveFixedColKeyRef,\n      rightActiveFixedChildrenColKeysRef,\n      renderExpandRef,\n      hoverKeyRef,\n      summaryRef,\n      mergedSortStateRef,\n      virtualScrollRef,\n      componentId,\n      mergedTableLayoutRef,\n      childTriggerColIndexRef,\n      indentRef,\n      rowPropsRef,\n      maxHeightRef,\n      stripedRef,\n      loadingRef,\n      onLoadRef,\n      loadingKeySetRef,\n      expandableRef,\n      stickyExpandedRowsRef,\n      renderExpandIconRef,\n      summaryPlacementRef,\n      treeMateRef,\n      scrollbarPropsRef,\n      setHeaderScrollLeft,\n      doUpdateExpandedRowKeys,\n      handleTableBodyScroll,\n      doCheck,\n      doUncheck,\n      renderCell\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(dataTableInjectionKey);\n    const scrollbarInstRef = ref(null);\n    const virtualListRef = ref(null);\n    const emptyElRef = ref(null);\n    const emptyRef = useMemo(() => paginatedDataRef.value.length === 0);\n    // If header is not inside & empty is displayed, no table part would be\n    // shown. So to collect a body width, we need to put a ref on empty element\n    const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value);\n    // If no body is shown, we shouldn't show scrollbar\n    const bodyShowHeaderOnlyRef = useMemo(() => {\n      return props.showHeader || emptyRef.value;\n    });\n    let lastSelectedKey = '';\n    const mergedExpandedRowKeySetRef = computed(() => {\n      return new Set(mergedExpandedRowKeysRef.value);\n    });\n    function getRowInfo(key) {\n      var _a;\n      return (_a = treeMateRef.value.getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode;\n    }\n    function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n      const rowInfo = getRowInfo(tmNode.key);\n      if (!rowInfo) {\n        warn('data-table', `fail to get row data with key ${tmNode.key}`);\n        return;\n      }\n      if (shiftKey) {\n        const lastIndex = paginatedDataRef.value.findIndex(item => item.key === lastSelectedKey);\n        if (lastIndex !== -1) {\n          const currentIndex = paginatedDataRef.value.findIndex(item => item.key === tmNode.key);\n          const start = Math.min(lastIndex, currentIndex);\n          const end = Math.max(lastIndex, currentIndex);\n          const rowKeysToCheck = [];\n          paginatedDataRef.value.slice(start, end + 1).forEach(r => {\n            if (!r.disabled) {\n              rowKeysToCheck.push(r.key);\n            }\n          });\n          if (checked) {\n            doCheck(rowKeysToCheck, false, rowInfo);\n          } else {\n            doUncheck(rowKeysToCheck, rowInfo);\n          }\n          lastSelectedKey = tmNode.key;\n          return;\n        }\n      }\n      if (checked) {\n        doCheck(tmNode.key, false, rowInfo);\n      } else {\n        doUncheck(tmNode.key, rowInfo);\n      }\n      lastSelectedKey = tmNode.key;\n    }\n    function handleRadioUpdateChecked(tmNode) {\n      const rowInfo = getRowInfo(tmNode.key);\n      if (!rowInfo) {\n        warn('data-table', `fail to get row data with key ${tmNode.key}`);\n        return;\n      }\n      doCheck(tmNode.key, true, rowInfo);\n    }\n    function getScrollContainer() {\n      if (!shouldDisplaySomeTablePartRef.value) {\n        const {\n          value: emptyEl\n        } = emptyElRef;\n        if (emptyEl) {\n          return emptyEl;\n        } else {\n          return null;\n        }\n      }\n      if (virtualScrollRef.value) {\n        return virtualListContainer();\n      }\n      const {\n        value\n      } = scrollbarInstRef;\n      if (value) return value.containerRef;\n      return null;\n    }\n    // For table row with children, tmNode is non-nullable\n    // For table row is expandable but is not tree data, tmNode is null\n    function handleUpdateExpanded(key, tmNode) {\n      var _a;\n      if (loadingKeySetRef.value.has(key)) return;\n      const {\n        value: mergedExpandedRowKeys\n      } = mergedExpandedRowKeysRef;\n      const index = mergedExpandedRowKeys.indexOf(key);\n      const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n      if (~index) {\n        nextExpandedKeys.splice(index, 1);\n        doUpdateExpandedRowKeys(nextExpandedKeys);\n      } else {\n        if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n          loadingKeySetRef.value.add(key);\n          void ((_a = onLoadRef.value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n            const {\n              value: futureMergedExpandedRowKeys\n            } = mergedExpandedRowKeysRef;\n            const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n            const index = futureNextExpandedKeys.indexOf(key);\n            if (!~index) {\n              futureNextExpandedKeys.push(key);\n            }\n            doUpdateExpandedRowKeys(futureNextExpandedKeys);\n          }).finally(() => {\n            loadingKeySetRef.value.delete(key);\n          }));\n        } else {\n          nextExpandedKeys.push(key);\n          doUpdateExpandedRowKeys(nextExpandedKeys);\n        }\n      }\n    }\n    function handleMouseleaveTable() {\n      hoverKeyRef.value = null;\n    }\n    function virtualListContainer() {\n      const {\n        value\n      } = virtualListRef;\n      return (value === null || value === void 0 ? void 0 : value.listElRef) || null;\n    }\n    function virtualListContent() {\n      const {\n        value\n      } = virtualListRef;\n      return (value === null || value === void 0 ? void 0 : value.itemsElRef) || null;\n    }\n    function handleVirtualListScroll(e) {\n      var _a;\n      handleTableBodyScroll(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n    function handleVirtualListResize(e) {\n      var _a;\n      const {\n        onResize\n      } = props;\n      if (onResize) onResize(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n    const exposedMethods = {\n      getScrollContainer,\n      scrollTo(arg0, arg1) {\n        var _a, _b;\n        if (virtualScrollRef.value) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          (_a = virtualListRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg0, arg1);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          (_b = scrollbarInstRef.value) === null || _b === void 0 ? void 0 : _b.scrollTo(arg0, arg1);\n        }\n      }\n    };\n    // manually control shadow style to avoid rerender\n    const style = c([({\n      props: cProps\n    }) => {\n      const createActiveLeftFixedStyle = leftActiveFixedColKey => {\n        if (leftActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, {\n          boxShadow: 'var(--n-box-shadow-after)'\n        });\n      };\n      const createActiveRightFixedStyle = rightActiveFixedColKey => {\n        if (rightActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, {\n          boxShadow: 'var(--n-box-shadow-before)'\n        });\n      };\n      return c([createActiveLeftFixedStyle(cProps.leftActiveFixedColKey), createActiveRightFixedStyle(cProps.rightActiveFixedColKey), cProps.leftActiveFixedChildrenColKeys.map(leftActiveFixedColKey => createActiveLeftFixedStyle(leftActiveFixedColKey)), cProps.rightActiveFixedChildrenColKeys.map(rightActiveFixedColKey => createActiveRightFixedStyle(rightActiveFixedColKey))]);\n    }]);\n    let fixedStyleMounted = false;\n    watchEffect(() => {\n      const {\n        value: leftActiveFixedColKey\n      } = leftActiveFixedColKeyRef;\n      const {\n        value: leftActiveFixedChildrenColKeys\n      } = leftActiveFixedChildrenColKeysRef;\n      const {\n        value: rightActiveFixedColKey\n      } = rightActiveFixedColKeyRef;\n      const {\n        value: rightActiveFixedChildrenColKeys\n      } = rightActiveFixedChildrenColKeysRef;\n      if (!fixedStyleMounted && leftActiveFixedColKey === null && rightActiveFixedColKey === null) {\n        return;\n      }\n      const cProps = {\n        leftActiveFixedColKey,\n        leftActiveFixedChildrenColKeys,\n        rightActiveFixedColKey,\n        rightActiveFixedChildrenColKeys,\n        componentId\n      };\n      style.mount({\n        id: `n-${componentId}`,\n        force: true,\n        props: cProps,\n        anchorMetaName: cssrAnchorMetaName\n      });\n      fixedStyleMounted = true;\n    });\n    onUnmounted(() => {\n      style.unmount({\n        id: `n-${componentId}`\n      });\n    });\n    return Object.assign({\n      bodyWidth: bodyWidthRef,\n      summaryPlacement: summaryPlacementRef,\n      dataTableSlots,\n      componentId,\n      scrollbarInstRef,\n      virtualListRef,\n      emptyElRef,\n      summary: summaryRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      scrollX: scrollXRef,\n      cols: colsRef,\n      loading: loadingRef,\n      bodyShowHeaderOnly: bodyShowHeaderOnlyRef,\n      shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef,\n      empty: emptyRef,\n      paginatedDataAndInfo: computed(() => {\n        const {\n          value: striped\n        } = stripedRef;\n        let hasChildren = false;\n        const data = paginatedDataRef.value.map(striped ? (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: index % 2 === 1,\n            index\n          };\n        } : (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: false,\n            index\n          };\n        });\n        return {\n          data,\n          hasChildren\n        };\n      }),\n      rawPaginatedData: rawPaginatedDataRef,\n      fixedColumnLeftMap: fixedColumnLeftMapRef,\n      fixedColumnRightMap: fixedColumnRightMapRef,\n      currentPage: mergedCurrentPageRef,\n      rowClassName: rowClassNameRef,\n      renderExpand: renderExpandRef,\n      mergedExpandedRowKeySet: mergedExpandedRowKeySetRef,\n      hoverKey: hoverKeyRef,\n      mergedSortState: mergedSortStateRef,\n      virtualScroll: virtualScrollRef,\n      mergedTableLayout: mergedTableLayoutRef,\n      childTriggerColIndex: childTriggerColIndexRef,\n      indent: indentRef,\n      rowProps: rowPropsRef,\n      maxHeight: maxHeightRef,\n      loadingKeySet: loadingKeySetRef,\n      expandable: expandableRef,\n      stickyExpandedRows: stickyExpandedRowsRef,\n      renderExpandIcon: renderExpandIconRef,\n      scrollbarProps: scrollbarPropsRef,\n      setHeaderScrollLeft,\n      handleVirtualListScroll,\n      handleVirtualListResize,\n      handleMouseleaveTable,\n      virtualListContainer,\n      virtualListContent,\n      handleTableBodyScroll,\n      handleCheckboxUpdateChecked,\n      handleRadioUpdateChecked,\n      handleUpdateExpanded,\n      renderCell\n    }, exposedMethods);\n  },\n  render() {\n    const {\n      mergedTheme,\n      scrollX,\n      mergedClsPrefix,\n      virtualScroll,\n      maxHeight,\n      mergedTableLayout,\n      flexHeight,\n      loadingKeySet,\n      onResize,\n      setHeaderScrollLeft\n    } = this;\n    const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight;\n    // For a basic table with auto layout whose content may overflow we will\n    // make it scrollable, which differs from browser's native behavior.\n    // For native behavior, see\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n    const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n    const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n    const contentStyle = {\n      minWidth: formatLength(scrollX) || '100%'\n    };\n    if (scrollX) contentStyle.width = '100%';\n    const tableNode = h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      ref: \"scrollbarInstRef\",\n      scrollable: scrollable || isBasicAutoLayout,\n      class: `${mergedClsPrefix}-data-table-base-table-body`,\n      style: !this.empty ? this.bodyStyle : undefined,\n      theme: mergedTheme.peers.Scrollbar,\n      themeOverrides: mergedTheme.peerOverrides.Scrollbar,\n      contentStyle: contentStyle,\n      container: virtualScroll ? this.virtualListContainer : undefined,\n      content: virtualScroll ? this.virtualListContent : undefined,\n      horizontalRailStyle: {\n        zIndex: 3\n      },\n      verticalRailStyle: {\n        zIndex: 3\n      },\n      xScrollable: xScrollable,\n      onScroll: virtualScroll ? undefined : this.handleTableBodyScroll,\n      internalOnUpdateScrollLeft: setHeaderScrollLeft,\n      onResize: onResize\n    }), {\n      default: () => {\n        // coordinate to pass if there are cells that cross row & col\n        const cordToPass = {};\n        // coordinate to related hover keys\n        const cordKey = {};\n        const {\n          cols,\n          paginatedDataAndInfo,\n          mergedTheme,\n          fixedColumnLeftMap,\n          fixedColumnRightMap,\n          currentPage,\n          rowClassName,\n          mergedSortState,\n          mergedExpandedRowKeySet,\n          stickyExpandedRows,\n          componentId,\n          childTriggerColIndex,\n          expandable,\n          rowProps,\n          handleMouseleaveTable,\n          renderExpand,\n          summary,\n          handleCheckboxUpdateChecked,\n          handleRadioUpdateChecked,\n          handleUpdateExpanded\n        } = this;\n        const {\n          length: colCount\n        } = cols;\n        let mergedData;\n        // if there is children in data, we should expand mergedData first\n        const {\n          data: paginatedData,\n          hasChildren\n        } = paginatedDataAndInfo;\n        const mergedPaginationData = hasChildren ? flatten(paginatedData, mergedExpandedRowKeySet) : paginatedData;\n        if (summary) {\n          const summaryRows = summary(this.rawPaginatedData);\n          if (Array.isArray(summaryRows)) {\n            const summaryRowData = summaryRows.map((row, i) => ({\n              isSummaryRow: true,\n              key: `__n_summary__${i}`,\n              tmNode: {\n                rawNode: row,\n                disabled: true\n              },\n              index: -1\n            }));\n            mergedData = this.summaryPlacement === 'top' ? [...summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, ...summaryRowData];\n          } else {\n            const summaryRowData = {\n              isSummaryRow: true,\n              key: '__n_summary__',\n              tmNode: {\n                rawNode: summaryRows,\n                disabled: true\n              },\n              index: -1\n            };\n            mergedData = this.summaryPlacement === 'top' ? [summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, summaryRowData];\n          }\n        } else {\n          mergedData = mergedPaginationData;\n        }\n        const indentStyle = hasChildren ? {\n          width: pxfy(this.indent)\n        } : undefined;\n        // Tile the data of the expanded row\n        const displayedData = [];\n        mergedData.forEach(rowInfo => {\n          if (renderExpand && mergedExpandedRowKeySet.has(rowInfo.key) && (!expandable || expandable(rowInfo.tmNode.rawNode))) {\n            displayedData.push(rowInfo, {\n              isExpandedRow: true,\n              key: `${rowInfo.key}-expand`,\n              // solve key repeat of the expanded row\n              tmNode: rowInfo.tmNode,\n              index: rowInfo.index\n            });\n          } else {\n            displayedData.push(rowInfo);\n          }\n        });\n        const {\n          length: rowCount\n        } = displayedData;\n        const rowIndexToKey = {};\n        paginatedData.forEach(({\n          tmNode\n        }, rowIndex) => {\n          rowIndexToKey[rowIndex] = tmNode.key;\n        });\n        const bodyWidth = stickyExpandedRows ? this.bodyWidth : null;\n        const bodyWidthPx = bodyWidth === null ? undefined : `${bodyWidth}px`;\n        const renderRow = (rowInfo, displayedRowIndex, isVirtual) => {\n          const {\n            index: actualRowIndex\n          } = rowInfo;\n          if ('isExpandedRow' in rowInfo) {\n            const {\n              tmNode: {\n                key,\n                rawNode\n              }\n            } = rowInfo;\n            return h(\"tr\", {\n              class: `${mergedClsPrefix}-data-table-tr ${mergedClsPrefix}-data-table-tr--expanded`,\n              key: `${key}__expand`\n            }, h(\"td\", {\n              class: [`${mergedClsPrefix}-data-table-td`, `${mergedClsPrefix}-data-table-td--last-col`, displayedRowIndex + 1 === rowCount && `${mergedClsPrefix}-data-table-td--last-row`],\n              colspan: colCount\n            }, stickyExpandedRows ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand`,\n              style: {\n                width: bodyWidthPx\n              }\n            }, renderExpand(rawNode, actualRowIndex)) : renderExpand(rawNode, actualRowIndex)));\n          }\n          const isSummary = ('isSummaryRow' in rowInfo);\n          const striped = !isSummary && rowInfo.striped;\n          const {\n            tmNode,\n            key: rowKey\n          } = rowInfo;\n          const {\n            rawNode: rowData\n          } = tmNode;\n          const expanded = mergedExpandedRowKeySet.has(rowKey);\n          const props = rowProps ? rowProps(rowData, actualRowIndex) : undefined;\n          const mergedRowClassName = typeof rowClassName === 'string' ? rowClassName : createRowClassName(rowData, actualRowIndex, rowClassName);\n          const row = h(\"tr\", Object.assign({\n            onMouseenter: () => {\n              this.hoverKey = rowKey;\n            },\n            key: rowKey,\n            class: [`${mergedClsPrefix}-data-table-tr`, isSummary && `${mergedClsPrefix}-data-table-tr--summary`, striped && `${mergedClsPrefix}-data-table-tr--striped`, expanded && `${mergedClsPrefix}-data-table-tr--expanded`, mergedRowClassName]\n          }, props), cols.map((col, colIndex) => {\n            var _a, _b, _c, _d, _e;\n            if (displayedRowIndex in cordToPass) {\n              const cordOfRowToPass = cordToPass[displayedRowIndex];\n              const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n              if (~indexInCordOfRowToPass) {\n                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                return null;\n              }\n            }\n            // TODO: Simplify row calculation\n            const {\n              column\n            } = col;\n            const colKey = getColKey(col);\n            const {\n              rowSpan,\n              colSpan\n            } = column;\n            const mergedColSpan = isSummary ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n            : colSpan ? colSpan(rowData, actualRowIndex) : 1;\n            const mergedRowSpan = isSummary ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n            : rowSpan ? rowSpan(rowData, actualRowIndex) : 1;\n            const isLastCol = colIndex + mergedColSpan === colCount;\n            const isLastRow = displayedRowIndex + mergedRowSpan === rowCount;\n            const isCrossRowTd = mergedRowSpan > 1;\n            if (isCrossRowTd) {\n              cordKey[displayedRowIndex] = {\n                [colIndex]: []\n              };\n            }\n            if (mergedColSpan > 1 || isCrossRowTd) {\n              for (let i = displayedRowIndex; i < displayedRowIndex + mergedRowSpan; ++i) {\n                if (isCrossRowTd) {\n                  cordKey[displayedRowIndex][colIndex].push(rowIndexToKey[i]);\n                }\n                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                  if (i === displayedRowIndex && j === colIndex) {\n                    continue;\n                  }\n                  if (!(i in cordToPass)) {\n                    cordToPass[i] = [j];\n                  } else {\n                    cordToPass[i].push(j);\n                  }\n                }\n              }\n            }\n            const hoverKey = isCrossRowTd ? this.hoverKey : null;\n            const {\n              cellProps\n            } = column;\n            const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, actualRowIndex);\n            const indentOffsetStyle = {\n              '--indent-offset': ''\n            };\n            return h(\"td\", Object.assign({}, resolvedCellProps, {\n              key: colKey,\n              style: [{\n                textAlign: column.align || undefined,\n                left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n              }, indentOffsetStyle, (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''],\n              colspan: mergedColSpan,\n              rowspan: isVirtual ? undefined : mergedRowSpan,\n              \"data-col-key\": colKey,\n              class: [`${mergedClsPrefix}-data-table-td`, column.className, resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class, isSummary && `${mergedClsPrefix}-data-table-td--summary`, (hoverKey !== null && cordKey[displayedRowIndex][colIndex].includes(hoverKey) || isColumnSorting(column, mergedSortState)) && `${mergedClsPrefix}-data-table-td--hover`, column.fixed && `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`, column.align && `${mergedClsPrefix}-data-table-td--${column.align}-align`, column.type === 'selection' && `${mergedClsPrefix}-data-table-td--selection`, column.type === 'expand' && `${mergedClsPrefix}-data-table-td--expand`, isLastCol && `${mergedClsPrefix}-data-table-td--last-col`, isLastRow && `${mergedClsPrefix}-data-table-td--last-row`]\n            }), hasChildren && colIndex === childTriggerColIndex ? [repeat(indentOffsetStyle['--indent-offset'] = isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-indent`,\n              style: indentStyle\n            })), isSummary || rowInfo.tmNode.isLeaf ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand-placeholder`\n            }) : h(ExpandTrigger, {\n              class: `${mergedClsPrefix}-data-table-expand-trigger`,\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              loading: loadingKeySet.has(rowInfo.key),\n              onClick: () => {\n                handleUpdateExpanded(rowKey, rowInfo.tmNode);\n              }\n            })] : null, column.type === 'selection' ? !isSummary ? column.multiple === false ? h(RenderSafeRadio, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: () => {\n                handleRadioUpdateChecked(rowInfo.tmNode);\n              }\n            }) : h(RenderSafeCheckbox, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: (checked, e) => {\n                handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey);\n              }\n            }) : null : column.type === 'expand' ? !isSummary ? !column.expandable || ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData)) ? h(ExpandTrigger, {\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              onClick: () => {\n                handleUpdateExpanded(rowKey, null);\n              }\n            }) : null : null : h(Cell, {\n              clsPrefix: mergedClsPrefix,\n              index: actualRowIndex,\n              row: rowData,\n              column: column,\n              isSummary: isSummary,\n              mergedTheme: mergedTheme,\n              renderCell: this.renderCell\n            }));\n          }));\n          return row;\n        };\n        if (!virtualScroll) {\n          return h(\"table\", {\n            class: `${mergedClsPrefix}-data-table-table`,\n            onMouseleave: handleMouseleaveTable,\n            style: {\n              tableLayout: this.mergedTableLayout\n            }\n          }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n            key: col.key,\n            style: col.style\n          }))), this.showHeader ? h(TableHeader, {\n            discrete: false\n          }) : null, !this.empty ? h(\"tbody\", {\n            \"data-n-id\": componentId,\n            class: `${mergedClsPrefix}-data-table-tbody`\n          }, displayedData.map((rowInfo, displayedRowIndex) => {\n            return renderRow(rowInfo, displayedRowIndex, false);\n          })) : null);\n        } else {\n          return h(VirtualList, {\n            ref: \"virtualListRef\",\n            items: displayedData,\n            itemSize: 28,\n            visibleItemsTag: VirtualListItemWrapper,\n            visibleItemsProps: {\n              clsPrefix: mergedClsPrefix,\n              id: componentId,\n              cols,\n              onMouseleave: handleMouseleaveTable\n            },\n            showScrollbar: false,\n            onResize: this.handleVirtualListResize,\n            onScroll: this.handleVirtualListScroll,\n            itemsStyle: contentStyle,\n            itemResizable: true\n          }, {\n            default: ({\n              item,\n              index\n            }) => renderRow(item, index, true)\n          });\n        }\n      }\n    });\n    if (this.empty) {\n      const createEmptyNode = () => h(\"div\", {\n        class: [`${mergedClsPrefix}-data-table-empty`, this.loading && `${mergedClsPrefix}-data-table-empty--hide`],\n        style: this.bodyStyle,\n        ref: \"emptyElRef\"\n      }, resolveSlot(this.dataTableSlots.empty, () => [h(NEmpty, {\n        theme: this.mergedTheme.peers.Empty,\n        themeOverrides: this.mergedTheme.peerOverrides.Empty\n      })]));\n      if (this.shouldDisplaySomeTablePart) {\n        return h(Fragment, null, tableNode, createEmptyNode());\n      } else {\n        return h(VResizeObserver, {\n          onResize: this.onResize\n        }, {\n          default: createEmptyNode\n        });\n      }\n    }\n    return tableNode;\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}