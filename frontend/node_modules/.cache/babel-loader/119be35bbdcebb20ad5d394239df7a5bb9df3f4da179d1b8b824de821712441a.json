{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { toRef, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { call, warn } from \"../../_utils/index.mjs\";\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useExpand(props, treeMateRef) {\n  const renderExpandRef = useMemo(() => {\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        if (process.env.NODE_ENV !== 'production' && !col.renderExpand) {\n          warn('data-table', 'column with type `expand` has no `renderExpand` prop.');\n        }\n        return col.renderExpand;\n      }\n    }\n  });\n  const expandableRef = useMemo(() => {\n    // It's not reactive\n    let expandable;\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        expandable = col.expandable;\n        break;\n      }\n    }\n    return expandable;\n  });\n  const uncontrolledExpandedRowKeysRef = ref(props.defaultExpandAll ? (renderExpandRef === null || renderExpandRef === void 0 ? void 0 : renderExpandRef.value) ? (() => {\n    const expandedKeys = [];\n    treeMateRef.value.treeNodes.forEach(tmNode => {\n      var _a;\n      if ((_a = expandableRef.value) === null || _a === void 0 ? void 0 : _a.call(expandableRef, tmNode.rawNode)) {\n        expandedKeys.push(tmNode.key);\n      }\n    });\n    return expandedKeys;\n  })() : treeMateRef.value.getNonLeafKeys() : props.defaultExpandedRowKeys);\n  const controlledExpandedRowKeysRef = toRef(props, 'expandedRowKeys');\n  const stickyExpandedRowsRef = toRef(props, 'stickyExpandedRows');\n  const mergedExpandedRowKeysRef = useMergedState(controlledExpandedRowKeysRef, uncontrolledExpandedRowKeysRef);\n  function doUpdateExpandedRowKeys(expandedKeys) {\n    const {\n      onUpdateExpandedRowKeys,\n      'onUpdate:expandedRowKeys': _onUpdateExpandedRowKeys\n    } = props;\n    if (onUpdateExpandedRowKeys) {\n      call(onUpdateExpandedRowKeys, expandedKeys);\n    }\n    if (_onUpdateExpandedRowKeys) {\n      call(_onUpdateExpandedRowKeys, expandedKeys);\n    }\n    uncontrolledExpandedRowKeysRef.value = expandedKeys;\n  }\n  return {\n    stickyExpandedRowsRef,\n    mergedExpandedRowKeysRef,\n    renderExpandRef,\n    expandableRef,\n    doUpdateExpandedRowKeys\n  };\n}","map":{"version":3,"names":["toRef","ref","useMemo","useMergedState","call","warn","useExpand","props","treeMateRef","renderExpandRef","col","columns","type","process","env","NODE_ENV","renderExpand","expandableRef","expandable","uncontrolledExpandedRowKeysRef","defaultExpandAll","value","expandedKeys","treeNodes","forEach","tmNode","_a","rawNode","push","key","getNonLeafKeys","defaultExpandedRowKeys","controlledExpandedRowKeysRef","stickyExpandedRowsRef","mergedExpandedRowKeysRef","doUpdateExpandedRowKeys","onUpdateExpandedRowKeys","_onUpdateExpandedRowKeys"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/data-table/src/use-expand.mjs"],"sourcesContent":["import { toRef, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { call, warn } from \"../../_utils/index.mjs\";\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useExpand(props, treeMateRef) {\n  const renderExpandRef = useMemo(() => {\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        if (process.env.NODE_ENV !== 'production' && !col.renderExpand) {\n          warn('data-table', 'column with type `expand` has no `renderExpand` prop.');\n        }\n        return col.renderExpand;\n      }\n    }\n  });\n  const expandableRef = useMemo(() => {\n    // It's not reactive\n    let expandable;\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        expandable = col.expandable;\n        break;\n      }\n    }\n    return expandable;\n  });\n  const uncontrolledExpandedRowKeysRef = ref(props.defaultExpandAll ? (renderExpandRef === null || renderExpandRef === void 0 ? void 0 : renderExpandRef.value) ? (() => {\n    const expandedKeys = [];\n    treeMateRef.value.treeNodes.forEach(tmNode => {\n      var _a;\n      if ((_a = expandableRef.value) === null || _a === void 0 ? void 0 : _a.call(expandableRef, tmNode.rawNode)) {\n        expandedKeys.push(tmNode.key);\n      }\n    });\n    return expandedKeys;\n  })() : treeMateRef.value.getNonLeafKeys() : props.defaultExpandedRowKeys);\n  const controlledExpandedRowKeysRef = toRef(props, 'expandedRowKeys');\n  const stickyExpandedRowsRef = toRef(props, 'stickyExpandedRows');\n  const mergedExpandedRowKeysRef = useMergedState(controlledExpandedRowKeysRef, uncontrolledExpandedRowKeysRef);\n  function doUpdateExpandedRowKeys(expandedKeys) {\n    const {\n      onUpdateExpandedRowKeys,\n      'onUpdate:expandedRowKeys': _onUpdateExpandedRowKeys\n    } = props;\n    if (onUpdateExpandedRowKeys) {\n      call(onUpdateExpandedRowKeys, expandedKeys);\n    }\n    if (_onUpdateExpandedRowKeys) {\n      call(_onUpdateExpandedRowKeys, expandedKeys);\n    }\n    uncontrolledExpandedRowKeysRef.value = expandedKeys;\n  }\n  return {\n    stickyExpandedRowsRef,\n    mergedExpandedRowKeysRef,\n    renderExpandRef,\n    expandableRef,\n    doUpdateExpandedRowKeys\n  };\n}"],"mappings":";AAAA,SAASA,KAAK,EAAEC,GAAG,QAAQ,KAAK;AAChC,SAASC,OAAO,EAAEC,cAAc,QAAQ,OAAO;AAC/C,SAASC,IAAI,EAAEC,IAAI,QAAQ,wBAAwB;AACnD;AACA,OAAO,SAASC,SAASA,CAACC,KAAK,EAAEC,WAAW,EAAE;EAC5C,MAAMC,eAAe,GAAGP,OAAO,CAAC,MAAM;IACpC,KAAK,MAAMQ,GAAG,IAAIH,KAAK,CAACI,OAAO,EAAE;MAC/B,IAAID,GAAG,CAACE,IAAI,KAAK,QAAQ,EAAE;QACzB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAACL,GAAG,CAACM,YAAY,EAAE;UAC9DX,IAAI,CAAC,YAAY,EAAE,uDAAuD,CAAC;QAC7E;QACA,OAAOK,GAAG,CAACM,YAAY;MACzB;IACF;EACF,CAAC,CAAC;EACF,MAAMC,aAAa,GAAGf,OAAO,CAAC,MAAM;IAClC;IACA,IAAIgB,UAAU;IACd,KAAK,MAAMR,GAAG,IAAIH,KAAK,CAACI,OAAO,EAAE;MAC/B,IAAID,GAAG,CAACE,IAAI,KAAK,QAAQ,EAAE;QACzBM,UAAU,GAAGR,GAAG,CAACQ,UAAU;QAC3B;MACF;IACF;IACA,OAAOA,UAAU;EACnB,CAAC,CAAC;EACF,MAAMC,8BAA8B,GAAGlB,GAAG,CAACM,KAAK,CAACa,gBAAgB,GAAG,CAACX,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACY,KAAK,IAAI,CAAC,MAAM;IACrK,MAAMC,YAAY,GAAG,EAAE;IACvBd,WAAW,CAACa,KAAK,CAACE,SAAS,CAACC,OAAO,CAACC,MAAM,IAAI;MAC5C,IAAIC,EAAE;MACN,IAAI,CAACA,EAAE,GAAGT,aAAa,CAACI,KAAK,MAAM,IAAI,IAAIK,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACtB,IAAI,CAACa,aAAa,EAAEQ,MAAM,CAACE,OAAO,CAAC,EAAE;QAC1GL,YAAY,CAACM,IAAI,CAACH,MAAM,CAACI,GAAG,CAAC;MAC/B;IACF,CAAC,CAAC;IACF,OAAOP,YAAY;EACrB,CAAC,EAAE,CAAC,GAAGd,WAAW,CAACa,KAAK,CAACS,cAAc,CAAC,CAAC,GAAGvB,KAAK,CAACwB,sBAAsB,CAAC;EACzE,MAAMC,4BAA4B,GAAGhC,KAAK,CAACO,KAAK,EAAE,iBAAiB,CAAC;EACpE,MAAM0B,qBAAqB,GAAGjC,KAAK,CAACO,KAAK,EAAE,oBAAoB,CAAC;EAChE,MAAM2B,wBAAwB,GAAG/B,cAAc,CAAC6B,4BAA4B,EAAEb,8BAA8B,CAAC;EAC7G,SAASgB,uBAAuBA,CAACb,YAAY,EAAE;IAC7C,MAAM;MACJc,uBAAuB;MACvB,0BAA0B,EAAEC;IAC9B,CAAC,GAAG9B,KAAK;IACT,IAAI6B,uBAAuB,EAAE;MAC3BhC,IAAI,CAACgC,uBAAuB,EAAEd,YAAY,CAAC;IAC7C;IACA,IAAIe,wBAAwB,EAAE;MAC5BjC,IAAI,CAACiC,wBAAwB,EAAEf,YAAY,CAAC;IAC9C;IACAH,8BAA8B,CAACE,KAAK,GAAGC,YAAY;EACrD;EACA,OAAO;IACLW,qBAAqB;IACrBC,wBAAwB;IACxBzB,eAAe;IACfQ,aAAa;IACbkB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}