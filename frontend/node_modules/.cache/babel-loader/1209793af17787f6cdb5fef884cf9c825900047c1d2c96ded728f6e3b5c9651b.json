{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from \"../../_utils/index.mjs\";\nimport NTreeNodeSwitcher from \"./TreeNodeSwitcher.mjs\";\nimport NTreeNodeCheckbox from \"./TreeNodeCheckbox.mjs\";\nimport NTreeNodeContent from \"./TreeNodeContent.mjs\";\nimport { treeInjectionKey } from \"./interface.mjs\";\nimport { renderDropMark } from \"./dnd.mjs\";\nimport { isNodeDisabled } from \"./utils.mjs\";\nconst TreeNode = defineComponent({\n  name: 'TreeNode',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n    const {\n      droppingNodeParentRef,\n      droppingMouseNodeRef,\n      draggingNodeRef,\n      droppingPositionRef,\n      droppingOffsetLevelRef,\n      nodePropsRef,\n      indentRef,\n      blockLineRef,\n      checkboxPlacementRef,\n      checkOnClickRef,\n      disabledFieldRef,\n      showLineRef,\n      renderSwitcherIconRef,\n      overrideDefaultNodeClickBehaviorRef\n    } = NTree;\n    const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n    const nodeIsDisabledRef = useMemo(() => {\n      return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n    });\n    const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n    const resolvedNodePropsRef = computed(() => {\n      const {\n        value: nodeProps\n      } = nodePropsRef;\n      if (!nodeProps) return undefined;\n      return nodeProps({\n        option: props.tmNode.rawNode\n      });\n    });\n    // used for drag and drop\n    const contentInstRef = ref(null);\n    // must be non-reactive\n    const contentElRef = {\n      value: null\n    };\n    onMounted(() => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contentElRef.value = contentInstRef.value.$el;\n    });\n    function handleSwitcherClick() {\n      const callback = () => {\n        const {\n          tmNode\n        } = props;\n        if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n          if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n            NTree.loadingKeysRef.value.add(tmNode.key);\n          } else {\n            return;\n          }\n          const {\n            onLoadRef: {\n              value: onLoad\n            }\n          } = NTree;\n          if (onLoad) {\n            void onLoad(tmNode.rawNode).then(value => {\n              if (value !== false) {\n                NTree.handleSwitcherClick(tmNode);\n              }\n            }).finally(() => {\n              NTree.loadingKeysRef.value.delete(tmNode.key);\n            });\n          }\n        } else {\n          NTree.handleSwitcherClick(tmNode);\n        }\n      };\n      if (renderSwitcherIconRef.value) {\n        // if renderSwitcherIcon is set, icon dom may be altered before event\n        // bubbles to parent dom, so that target check fails. Call it in next\n        // event loop so that event bubble phase is finishes.\n        setTimeout(callback, 0);\n      } else {\n        callback();\n      }\n    }\n    const selectableRef = useMemo(() => !nodeIsDisabledRef.value && NTree.selectableRef.value && (NTree.internalTreeSelect ? NTree.mergedCheckStrategyRef.value !== 'child' || NTree.multipleRef.value && NTree.cascadeRef.value || props.tmNode.isLeaf : true));\n    const checkableRef = useMemo(() => NTree.checkableRef.value && (NTree.cascadeRef.value || NTree.mergedCheckStrategyRef.value !== 'child' || props.tmNode.isLeaf));\n    const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n    const mergedCheckOnClickRef = useMemo(() => {\n      const {\n        value: checkable\n      } = checkableRef;\n      if (!checkable) return false;\n      const {\n        value: checkOnClick\n      } = checkOnClickRef;\n      const {\n        tmNode\n      } = props;\n      if (typeof checkOnClick === 'boolean') {\n        return !tmNode.disabled && checkOnClick;\n      }\n      return checkOnClick(props.tmNode.rawNode);\n    });\n    function _handleClick(e) {\n      const {\n        value: expandOnClick\n      } = NTree.expandOnClickRef;\n      const {\n        value: selectable\n      } = selectableRef;\n      const {\n        value: mergedCheckOnClick\n      } = mergedCheckOnClickRef;\n      if (!selectable && !expandOnClick && !mergedCheckOnClick) return;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      const {\n        tmNode\n      } = props;\n      if (selectable) {\n        NTree.handleSelect(tmNode);\n      }\n      if (expandOnClick && !tmNode.isLeaf) {\n        handleSwitcherClick();\n      }\n      if (mergedCheckOnClick) {\n        handleCheck(!checkedRef.value);\n      }\n    }\n    function handleNodeClick(e) {\n      var _a, _b;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      if (!disabledRef.value) {\n        const overrideDefaultNodeClickBehavior = overrideDefaultNodeClickBehaviorRef.value;\n        let shouldOverride = false;\n        if (overrideDefaultNodeClickBehavior) {\n          switch (overrideDefaultNodeClickBehavior({\n            option: props.tmNode.rawNode\n          })) {\n            case 'toggleCheck':\n              shouldOverride = true;\n              handleCheck(!checkedRef.value);\n              break;\n            case 'toggleSelect':\n              shouldOverride = true;\n              NTree.handleSelect(props.tmNode);\n              break;\n            case 'toggleExpand':\n              shouldOverride = true;\n              handleSwitcherClick();\n              shouldOverride = true;\n              break;\n            case 'none':\n              shouldOverride = true;\n              shouldOverride = true;\n              return;\n            case 'default':\n            default:\n              break;\n          }\n        }\n        if (!shouldOverride) {\n          _handleClick(e);\n        }\n      }\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n    function handleContentClick(e) {\n      if (blockLineRef.value) return;\n      handleNodeClick(e);\n    }\n    function handleLineClick(e) {\n      if (!blockLineRef.value) return;\n      handleNodeClick(e);\n    }\n    function handleCheck(checked) {\n      NTree.handleCheck(props.tmNode, checked);\n    }\n    // Dnd\n    function handleDragStart(e) {\n      NTree.handleDragStart({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnter(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragEnter({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragOver(e) {\n      e.preventDefault(); // if not prevent, drop event won't be fired...\n      NTree.handleDragOver({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnd(e) {\n      NTree.handleDragEnd({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragLeave(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragLeave({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      if (droppingPositionRef.value !== null) {\n        NTree.handleDrop({\n          event: e,\n          node: props.tmNode,\n          dropPosition: droppingPositionRef.value\n        });\n      }\n    }\n    const indentNodes = computed(() => {\n      const {\n        clsPrefix\n      } = props;\n      const {\n        value: indent\n      } = indentRef;\n      if (showLineRef.value) {\n        const indentNodes = [];\n        let cursor = props.tmNode.parent;\n        while (cursor) {\n          if (cursor.isLastChild) {\n            indentNodes.push(h(\"div\", {\n              class: `${clsPrefix}-tree-node-indent`\n            }, h(\"div\", {\n              style: {\n                width: `${indent}px`\n              }\n            })));\n          } else {\n            indentNodes.push(h(\"div\", {\n              class: [`${clsPrefix}-tree-node-indent`, `${clsPrefix}-tree-node-indent--show-line`]\n            }, h(\"div\", {\n              style: {\n                width: `${indent}px`\n              }\n            })));\n          }\n          cursor = cursor.parent;\n        }\n        return indentNodes.reverse();\n      } else {\n        return repeat(props.tmNode.level, h(\"div\", {\n          class: `${props.clsPrefix}-tree-node-indent`\n        }, h(\"div\", {\n          style: {\n            width: `${indent}px`\n          }\n        })));\n      }\n    });\n    return {\n      showDropMark: useMemo(() => {\n        const {\n          value: draggingNode\n        } = draggingNodeRef;\n        if (!draggingNode) return;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (!droppingPosition) return;\n        const {\n          value: droppingMouseNode\n        } = droppingMouseNodeRef;\n        if (!droppingMouseNode) {\n          return;\n        }\n        const {\n          tmNode\n        } = props;\n        if (tmNode.key === droppingMouseNode.key) return true;\n        return false;\n      }),\n      showDropMarkAsParent: useMemo(() => {\n        const {\n          value: droppingNodeParent\n        } = droppingNodeParentRef;\n        if (!droppingNodeParent) return false;\n        const {\n          tmNode\n        } = props;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (droppingPosition === 'before' || droppingPosition === 'after') {\n          return droppingNodeParent.key === tmNode.key;\n        }\n        return false;\n      }),\n      pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n      loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n      highlight: useMemo(() => {\n        var _a;\n        return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n      }),\n      checked: checkedRef,\n      indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n      selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n      expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n      disabled: disabledRef,\n      checkable: checkableRef,\n      mergedCheckOnClick: mergedCheckOnClickRef,\n      checkboxDisabled: checkboxDisabledRef,\n      selectable: selectableRef,\n      expandOnClick: NTree.expandOnClickRef,\n      internalScrollable: NTree.internalScrollableRef,\n      draggable: NTree.draggableRef,\n      blockLine: blockLineRef,\n      nodeProps: resolvedNodePropsRef,\n      checkboxFocusable: NTree.internalCheckboxFocusableRef,\n      droppingPosition: droppingPositionRef,\n      droppingOffsetLevel: droppingOffsetLevelRef,\n      indent: indentRef,\n      checkboxPlacement: checkboxPlacementRef,\n      showLine: showLineRef,\n      contentInstRef,\n      contentElRef,\n      indentNodes,\n      handleCheck,\n      handleDrop,\n      handleDragStart,\n      handleDragEnter,\n      handleDragOver,\n      handleDragEnd,\n      handleDragLeave,\n      handleLineClick,\n      handleContentClick,\n      handleSwitcherClick\n    };\n  },\n  render() {\n    const {\n      tmNode,\n      clsPrefix,\n      checkable,\n      expandOnClick,\n      selectable,\n      selected,\n      checked,\n      highlight,\n      draggable,\n      blockLine,\n      indent,\n      indentNodes,\n      disabled,\n      pending,\n      internalScrollable,\n      nodeProps,\n      checkboxPlacement\n    } = this;\n    // drag start not inside\n    // it need to be append to node itself, not wrapper\n    const dragEventHandlers = draggable && !disabled ? {\n      onDragenter: this.handleDragEnter,\n      onDragleave: this.handleDragLeave,\n      onDragend: this.handleDragEnd,\n      onDrop: this.handleDrop,\n      onDragover: this.handleDragOver\n    } : undefined;\n    // In non virtual mode, there's no evidence that which element should be\n    // scrolled to, so we need data-key to query the target element.\n    const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n    const checkboxOnRight = checkboxPlacement === 'right';\n    const checkboxNode = checkable ? h(NTreeNodeCheckbox, {\n      indent: indent,\n      right: checkboxOnRight,\n      focusable: this.checkboxFocusable,\n      disabled: disabled || this.checkboxDisabled,\n      clsPrefix: clsPrefix,\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      onCheck: this.handleCheck\n    }) : null;\n    return h(\"div\", Object.assign({\n      class: `${clsPrefix}-tree-node-wrapper`\n    }, dragEventHandlers), h(\"div\", Object.assign({}, blockLine ? nodeProps : undefined, {\n      class: [`${clsPrefix}-tree-node`, {\n        [`${clsPrefix}-tree-node--selected`]: selected,\n        [`${clsPrefix}-tree-node--checkable`]: checkable,\n        [`${clsPrefix}-tree-node--highlight`]: highlight,\n        [`${clsPrefix}-tree-node--pending`]: pending,\n        [`${clsPrefix}-tree-node--disabled`]: disabled,\n        [`${clsPrefix}-tree-node--selectable`]: selectable,\n        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n      }, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      \"data-key\": dataKey,\n      draggable: draggable && blockLine,\n      onClick: this.handleLineClick,\n      onDragstart: draggable && blockLine && !disabled ? this.handleDragStart : undefined\n    }), indentNodes, tmNode.isLeaf && this.showLine ? h(\"div\", {\n      class: [`${clsPrefix}-tree-node-indent`, `${clsPrefix}-tree-node-indent--show-line`, tmNode.isLeaf && `${clsPrefix}-tree-node-indent--is-leaf`, tmNode.isLastChild && `${clsPrefix}-tree-node-indent--last-child`]\n    }, h(\"div\", {\n      style: {\n        width: `${indent}px`\n      }\n    })) : h(NTreeNodeSwitcher, {\n      clsPrefix: clsPrefix,\n      expanded: this.expanded,\n      selected: selected,\n      loading: this.loading,\n      hide: tmNode.isLeaf,\n      tmNode: this.tmNode,\n      indent: indent,\n      onClick: this.handleSwitcherClick\n    }), !checkboxOnRight ? checkboxNode : null, h(NTreeNodeContent, {\n      ref: \"contentInstRef\",\n      clsPrefix: clsPrefix,\n      checked: checked,\n      selected: selected,\n      onClick: this.handleContentClick,\n      nodeProps: blockLine ? undefined : nodeProps,\n      onDragstart: draggable && !blockLine && !disabled ? this.handleDragStart : undefined,\n      tmNode: tmNode\n    }), draggable ? this.showDropMark ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      position: this.droppingPosition,\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : this.showDropMarkAsParent ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      position: 'inside',\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : null : null, checkboxOnRight ? checkboxNode : null));\n  }\n});\nexport default TreeNode;","map":{"version":3,"names":["h","inject","computed","defineComponent","ref","onMounted","useMemo","happensIn","repeat","createDataKey","NTreeNodeSwitcher","NTreeNodeCheckbox","NTreeNodeContent","treeInjectionKey","renderDropMark","isNodeDisabled","TreeNode","name","props","clsPrefix","type","String","required","tmNode","Object","setup","NTree","droppingNodeParentRef","droppingMouseNodeRef","draggingNodeRef","droppingPositionRef","droppingOffsetLevelRef","nodePropsRef","indentRef","blockLineRef","checkboxPlacementRef","checkOnClickRef","disabledFieldRef","showLineRef","renderSwitcherIconRef","overrideDefaultNodeClickBehaviorRef","checkboxDisabledRef","rawNode","checkboxDisabled","nodeIsDisabledRef","value","disabledRef","resolvedNodePropsRef","nodeProps","undefined","option","contentInstRef","contentElRef","$el","handleSwitcherClick","callback","isLeaf","shallowLoaded","loadingKeysRef","has","key","add","onLoadRef","onLoad","then","finally","delete","setTimeout","selectableRef","internalTreeSelect","mergedCheckStrategyRef","multipleRef","cascadeRef","checkableRef","checkedRef","displayedCheckedKeysRef","includes","mergedCheckOnClickRef","checkable","checkOnClick","disabled","_handleClick","e","expandOnClick","expandOnClickRef","selectable","mergedCheckOnClick","handleSelect","handleCheck","handleNodeClick","_a","_b","overrideDefaultNodeClickBehavior","shouldOverride","onClick","call","handleContentClick","handleLineClick","checked","handleDragStart","event","node","handleDragEnter","currentTarget","target","handleDragOver","preventDefault","handleDragEnd","handleDragLeave","handleDrop","dropPosition","indentNodes","indent","cursor","parent","isLastChild","push","class","style","width","reverse","level","showDropMark","draggingNode","droppingPosition","droppingMouseNode","showDropMarkAsParent","droppingNodeParent","pending","pendingNodeKeyRef","loading","highlight","highlightKeySetRef","indeterminate","displayedIndeterminateKeysRef","selected","mergedSelectedKeysRef","expanded","mergedExpandedKeysRef","internalScrollable","internalScrollableRef","draggable","draggableRef","blockLine","checkboxFocusable","internalCheckboxFocusableRef","droppingOffsetLevel","checkboxPlacement","showLine","render","dragEventHandlers","onDragenter","onDragleave","onDragend","onDrop","onDragover","dataKey","checkboxOnRight","checkboxNode","right","focusable","onCheck","assign","onDragstart","hide","el","position","offsetLevel"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/tree/src/TreeNode.mjs"],"sourcesContent":["import { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from \"../../_utils/index.mjs\";\nimport NTreeNodeSwitcher from \"./TreeNodeSwitcher.mjs\";\nimport NTreeNodeCheckbox from \"./TreeNodeCheckbox.mjs\";\nimport NTreeNodeContent from \"./TreeNodeContent.mjs\";\nimport { treeInjectionKey } from \"./interface.mjs\";\nimport { renderDropMark } from \"./dnd.mjs\";\nimport { isNodeDisabled } from \"./utils.mjs\";\nconst TreeNode = defineComponent({\n  name: 'TreeNode',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n    const {\n      droppingNodeParentRef,\n      droppingMouseNodeRef,\n      draggingNodeRef,\n      droppingPositionRef,\n      droppingOffsetLevelRef,\n      nodePropsRef,\n      indentRef,\n      blockLineRef,\n      checkboxPlacementRef,\n      checkOnClickRef,\n      disabledFieldRef,\n      showLineRef,\n      renderSwitcherIconRef,\n      overrideDefaultNodeClickBehaviorRef\n    } = NTree;\n    const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n    const nodeIsDisabledRef = useMemo(() => {\n      return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n    });\n    const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n    const resolvedNodePropsRef = computed(() => {\n      const {\n        value: nodeProps\n      } = nodePropsRef;\n      if (!nodeProps) return undefined;\n      return nodeProps({\n        option: props.tmNode.rawNode\n      });\n    });\n    // used for drag and drop\n    const contentInstRef = ref(null);\n    // must be non-reactive\n    const contentElRef = {\n      value: null\n    };\n    onMounted(() => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contentElRef.value = contentInstRef.value.$el;\n    });\n    function handleSwitcherClick() {\n      const callback = () => {\n        const {\n          tmNode\n        } = props;\n        if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n          if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n            NTree.loadingKeysRef.value.add(tmNode.key);\n          } else {\n            return;\n          }\n          const {\n            onLoadRef: {\n              value: onLoad\n            }\n          } = NTree;\n          if (onLoad) {\n            void onLoad(tmNode.rawNode).then(value => {\n              if (value !== false) {\n                NTree.handleSwitcherClick(tmNode);\n              }\n            }).finally(() => {\n              NTree.loadingKeysRef.value.delete(tmNode.key);\n            });\n          }\n        } else {\n          NTree.handleSwitcherClick(tmNode);\n        }\n      };\n      if (renderSwitcherIconRef.value) {\n        // if renderSwitcherIcon is set, icon dom may be altered before event\n        // bubbles to parent dom, so that target check fails. Call it in next\n        // event loop so that event bubble phase is finishes.\n        setTimeout(callback, 0);\n      } else {\n        callback();\n      }\n    }\n    const selectableRef = useMemo(() => !nodeIsDisabledRef.value && NTree.selectableRef.value && (NTree.internalTreeSelect ? NTree.mergedCheckStrategyRef.value !== 'child' || NTree.multipleRef.value && NTree.cascadeRef.value || props.tmNode.isLeaf : true));\n    const checkableRef = useMemo(() => NTree.checkableRef.value && (NTree.cascadeRef.value || NTree.mergedCheckStrategyRef.value !== 'child' || props.tmNode.isLeaf));\n    const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n    const mergedCheckOnClickRef = useMemo(() => {\n      const {\n        value: checkable\n      } = checkableRef;\n      if (!checkable) return false;\n      const {\n        value: checkOnClick\n      } = checkOnClickRef;\n      const {\n        tmNode\n      } = props;\n      if (typeof checkOnClick === 'boolean') {\n        return !tmNode.disabled && checkOnClick;\n      }\n      return checkOnClick(props.tmNode.rawNode);\n    });\n    function _handleClick(e) {\n      const {\n        value: expandOnClick\n      } = NTree.expandOnClickRef;\n      const {\n        value: selectable\n      } = selectableRef;\n      const {\n        value: mergedCheckOnClick\n      } = mergedCheckOnClickRef;\n      if (!selectable && !expandOnClick && !mergedCheckOnClick) return;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      const {\n        tmNode\n      } = props;\n      if (selectable) {\n        NTree.handleSelect(tmNode);\n      }\n      if (expandOnClick && !tmNode.isLeaf) {\n        handleSwitcherClick();\n      }\n      if (mergedCheckOnClick) {\n        handleCheck(!checkedRef.value);\n      }\n    }\n    function handleNodeClick(e) {\n      var _a, _b;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      if (!disabledRef.value) {\n        const overrideDefaultNodeClickBehavior = overrideDefaultNodeClickBehaviorRef.value;\n        let shouldOverride = false;\n        if (overrideDefaultNodeClickBehavior) {\n          switch (overrideDefaultNodeClickBehavior({\n            option: props.tmNode.rawNode\n          })) {\n            case 'toggleCheck':\n              shouldOverride = true;\n              handleCheck(!checkedRef.value);\n              break;\n            case 'toggleSelect':\n              shouldOverride = true;\n              NTree.handleSelect(props.tmNode);\n              break;\n            case 'toggleExpand':\n              shouldOverride = true;\n              handleSwitcherClick();\n              shouldOverride = true;\n              break;\n            case 'none':\n              shouldOverride = true;\n              shouldOverride = true;\n              return;\n            case 'default':\n            default:\n              break;\n          }\n        }\n        if (!shouldOverride) {\n          _handleClick(e);\n        }\n      }\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n    function handleContentClick(e) {\n      if (blockLineRef.value) return;\n      handleNodeClick(e);\n    }\n    function handleLineClick(e) {\n      if (!blockLineRef.value) return;\n      handleNodeClick(e);\n    }\n    function handleCheck(checked) {\n      NTree.handleCheck(props.tmNode, checked);\n    }\n    // Dnd\n    function handleDragStart(e) {\n      NTree.handleDragStart({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnter(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragEnter({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragOver(e) {\n      e.preventDefault(); // if not prevent, drop event won't be fired...\n      NTree.handleDragOver({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnd(e) {\n      NTree.handleDragEnd({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragLeave(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragLeave({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      if (droppingPositionRef.value !== null) {\n        NTree.handleDrop({\n          event: e,\n          node: props.tmNode,\n          dropPosition: droppingPositionRef.value\n        });\n      }\n    }\n    const indentNodes = computed(() => {\n      const {\n        clsPrefix\n      } = props;\n      const {\n        value: indent\n      } = indentRef;\n      if (showLineRef.value) {\n        const indentNodes = [];\n        let cursor = props.tmNode.parent;\n        while (cursor) {\n          if (cursor.isLastChild) {\n            indentNodes.push(h(\"div\", {\n              class: `${clsPrefix}-tree-node-indent`\n            }, h(\"div\", {\n              style: {\n                width: `${indent}px`\n              }\n            })));\n          } else {\n            indentNodes.push(h(\"div\", {\n              class: [`${clsPrefix}-tree-node-indent`, `${clsPrefix}-tree-node-indent--show-line`]\n            }, h(\"div\", {\n              style: {\n                width: `${indent}px`\n              }\n            })));\n          }\n          cursor = cursor.parent;\n        }\n        return indentNodes.reverse();\n      } else {\n        return repeat(props.tmNode.level, h(\"div\", {\n          class: `${props.clsPrefix}-tree-node-indent`\n        }, h(\"div\", {\n          style: {\n            width: `${indent}px`\n          }\n        })));\n      }\n    });\n    return {\n      showDropMark: useMemo(() => {\n        const {\n          value: draggingNode\n        } = draggingNodeRef;\n        if (!draggingNode) return;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (!droppingPosition) return;\n        const {\n          value: droppingMouseNode\n        } = droppingMouseNodeRef;\n        if (!droppingMouseNode) {\n          return;\n        }\n        const {\n          tmNode\n        } = props;\n        if (tmNode.key === droppingMouseNode.key) return true;\n        return false;\n      }),\n      showDropMarkAsParent: useMemo(() => {\n        const {\n          value: droppingNodeParent\n        } = droppingNodeParentRef;\n        if (!droppingNodeParent) return false;\n        const {\n          tmNode\n        } = props;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (droppingPosition === 'before' || droppingPosition === 'after') {\n          return droppingNodeParent.key === tmNode.key;\n        }\n        return false;\n      }),\n      pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n      loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n      highlight: useMemo(() => {\n        var _a;\n        return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n      }),\n      checked: checkedRef,\n      indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n      selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n      expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n      disabled: disabledRef,\n      checkable: checkableRef,\n      mergedCheckOnClick: mergedCheckOnClickRef,\n      checkboxDisabled: checkboxDisabledRef,\n      selectable: selectableRef,\n      expandOnClick: NTree.expandOnClickRef,\n      internalScrollable: NTree.internalScrollableRef,\n      draggable: NTree.draggableRef,\n      blockLine: blockLineRef,\n      nodeProps: resolvedNodePropsRef,\n      checkboxFocusable: NTree.internalCheckboxFocusableRef,\n      droppingPosition: droppingPositionRef,\n      droppingOffsetLevel: droppingOffsetLevelRef,\n      indent: indentRef,\n      checkboxPlacement: checkboxPlacementRef,\n      showLine: showLineRef,\n      contentInstRef,\n      contentElRef,\n      indentNodes,\n      handleCheck,\n      handleDrop,\n      handleDragStart,\n      handleDragEnter,\n      handleDragOver,\n      handleDragEnd,\n      handleDragLeave,\n      handleLineClick,\n      handleContentClick,\n      handleSwitcherClick\n    };\n  },\n  render() {\n    const {\n      tmNode,\n      clsPrefix,\n      checkable,\n      expandOnClick,\n      selectable,\n      selected,\n      checked,\n      highlight,\n      draggable,\n      blockLine,\n      indent,\n      indentNodes,\n      disabled,\n      pending,\n      internalScrollable,\n      nodeProps,\n      checkboxPlacement\n    } = this;\n    // drag start not inside\n    // it need to be append to node itself, not wrapper\n    const dragEventHandlers = draggable && !disabled ? {\n      onDragenter: this.handleDragEnter,\n      onDragleave: this.handleDragLeave,\n      onDragend: this.handleDragEnd,\n      onDrop: this.handleDrop,\n      onDragover: this.handleDragOver\n    } : undefined;\n    // In non virtual mode, there's no evidence that which element should be\n    // scrolled to, so we need data-key to query the target element.\n    const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n    const checkboxOnRight = checkboxPlacement === 'right';\n    const checkboxNode = checkable ? h(NTreeNodeCheckbox, {\n      indent: indent,\n      right: checkboxOnRight,\n      focusable: this.checkboxFocusable,\n      disabled: disabled || this.checkboxDisabled,\n      clsPrefix: clsPrefix,\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      onCheck: this.handleCheck\n    }) : null;\n    return h(\"div\", Object.assign({\n      class: `${clsPrefix}-tree-node-wrapper`\n    }, dragEventHandlers), h(\"div\", Object.assign({}, blockLine ? nodeProps : undefined, {\n      class: [`${clsPrefix}-tree-node`, {\n        [`${clsPrefix}-tree-node--selected`]: selected,\n        [`${clsPrefix}-tree-node--checkable`]: checkable,\n        [`${clsPrefix}-tree-node--highlight`]: highlight,\n        [`${clsPrefix}-tree-node--pending`]: pending,\n        [`${clsPrefix}-tree-node--disabled`]: disabled,\n        [`${clsPrefix}-tree-node--selectable`]: selectable,\n        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n      }, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      \"data-key\": dataKey,\n      draggable: draggable && blockLine,\n      onClick: this.handleLineClick,\n      onDragstart: draggable && blockLine && !disabled ? this.handleDragStart : undefined\n    }), indentNodes, tmNode.isLeaf && this.showLine ? h(\"div\", {\n      class: [`${clsPrefix}-tree-node-indent`, `${clsPrefix}-tree-node-indent--show-line`, tmNode.isLeaf && `${clsPrefix}-tree-node-indent--is-leaf`, tmNode.isLastChild && `${clsPrefix}-tree-node-indent--last-child`]\n    }, h(\"div\", {\n      style: {\n        width: `${indent}px`\n      }\n    })) : h(NTreeNodeSwitcher, {\n      clsPrefix: clsPrefix,\n      expanded: this.expanded,\n      selected: selected,\n      loading: this.loading,\n      hide: tmNode.isLeaf,\n      tmNode: this.tmNode,\n      indent: indent,\n      onClick: this.handleSwitcherClick\n    }), !checkboxOnRight ? checkboxNode : null, h(NTreeNodeContent, {\n      ref: \"contentInstRef\",\n      clsPrefix: clsPrefix,\n      checked: checked,\n      selected: selected,\n      onClick: this.handleContentClick,\n      nodeProps: blockLine ? undefined : nodeProps,\n      onDragstart: draggable && !blockLine && !disabled ? this.handleDragStart : undefined,\n      tmNode: tmNode\n    }), draggable ? this.showDropMark ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      position: this.droppingPosition,\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : this.showDropMarkAsParent ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      position: 'inside',\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : null : null, checkboxOnRight ? checkboxNode : null));\n  }\n});\nexport default TreeNode;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}