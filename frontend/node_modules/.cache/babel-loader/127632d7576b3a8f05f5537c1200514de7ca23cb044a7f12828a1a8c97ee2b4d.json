{"ast":null,"code":"import { h, ref, computed, inject, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { changeColor } from 'seemly';\nimport { createHoverColor, createPressedColor } from \"../../_utils/color/index.mjs\";\nimport { buttonGroupInjectionKey } from \"../../button-group/src/context.mjs\";\nimport { useRtl } from \"../../_mixins/use-rtl.mjs\";\nimport { isSafari } from \"../../_utils/env/browser.mjs\";\nimport { useConfig, useFormItem, useTheme, useThemeClass } from \"../../_mixins/index.mjs\";\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from \"../../_internal/index.mjs\";\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from \"../../_utils/index.mjs\";\nimport { buttonLight } from \"../styles/index.mjs\";\nimport style from \"./styles/index.cssr.mjs\";\nexport const buttonProps = Object.assign(Object.assign({}, useTheme.props), {\n  color: String,\n  textColor: String,\n  text: Boolean,\n  block: Boolean,\n  loading: Boolean,\n  disabled: Boolean,\n  circle: Boolean,\n  size: String,\n  ghost: Boolean,\n  round: Boolean,\n  secondary: Boolean,\n  tertiary: Boolean,\n  quaternary: Boolean,\n  strong: Boolean,\n  focusable: {\n    type: Boolean,\n    default: true\n  },\n  keyboard: {\n    type: Boolean,\n    default: true\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  type: {\n    type: String,\n    default: 'default'\n  },\n  dashed: Boolean,\n  renderIcon: Function,\n  iconPlacement: {\n    type: String,\n    default: 'left'\n  },\n  attrType: {\n    type: String,\n    default: 'button'\n  },\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  onClick: [Function, Array],\n  nativeFocusBehavior: {\n    type: Boolean,\n    default: !isSafari\n  }\n});\nconst Button = defineComponent({\n  name: 'Button',\n  props: buttonProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        const {\n          dashed,\n          ghost,\n          text,\n          secondary,\n          tertiary,\n          quaternary\n        } = props;\n        if ((dashed || ghost || text) && (secondary || tertiary || quaternary)) {\n          warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaternary` props.\");\n        }\n      });\n    }\n    const selfElRef = ref(null);\n    const waveElRef = ref(null);\n    const enterPressedRef = ref(false);\n    const showBorderRef = useMemo(() => {\n      return !props.quaternary && !props.tertiary && !props.secondary && !props.text && (!props.color || props.ghost || props.dashed) && props.bordered;\n    });\n    const NButtonGroup = inject(buttonGroupInjectionKey, {});\n    const {\n      mergedSizeRef\n    } = useFormItem({}, {\n      defaultSize: 'medium',\n      mergedSize: NFormItem => {\n        const {\n          size\n        } = props;\n        if (size) return size;\n        const {\n          size: buttonGroupSize\n        } = NButtonGroup;\n        if (buttonGroupSize) return buttonGroupSize;\n        const {\n          mergedSize: formItemSize\n        } = NFormItem || {};\n        if (formItemSize) {\n          return formItemSize.value;\n        }\n        return 'medium';\n      }\n    });\n    const mergedFocusableRef = computed(() => {\n      return props.focusable && !props.disabled;\n    });\n    const handleMousedown = e => {\n      var _a;\n      if (!mergedFocusableRef.value) {\n        e.preventDefault();\n      }\n      if (props.nativeFocusBehavior) {\n        return;\n      }\n      e.preventDefault();\n      // normally this won't be called if disabled (when tag is button)\n      // if not, we try to make it behave like a button\n      if (props.disabled) {\n        return;\n      }\n      if (mergedFocusableRef.value) {\n        (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n    const handleClick = e => {\n      var _a;\n      if (!props.disabled && !props.loading) {\n        const {\n          onClick\n        } = props;\n        if (onClick) call(onClick, e);\n        if (!props.text) {\n          (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n        }\n      }\n    };\n    const handleKeyup = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard) {\n            return;\n          }\n          enterPressedRef.value = false;\n      }\n    };\n    const handleKeydown = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard || props.loading) {\n            e.preventDefault();\n            return;\n          }\n          enterPressedRef.value = true;\n      }\n    };\n    const handleBlur = () => {\n      enterPressedRef.value = false;\n    };\n    const {\n      inlineThemeDisabled,\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n    const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const theme = themeRef.value;\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          cubicBezierEaseOut\n        },\n        self\n      } = theme;\n      const {\n        rippleDuration,\n        opacityDisabled,\n        fontWeight,\n        fontWeightStrong\n      } = self;\n      const size = mergedSizeRef.value;\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      // font\n      const fontProps = {\n        'font-weight': strong ? fontWeightStrong : fontWeight\n      };\n      // color\n      let colorProps = {\n        '--n-color': 'initial',\n        '--n-color-hover': 'initial',\n        '--n-color-pressed': 'initial',\n        '--n-color-focus': 'initial',\n        '--n-color-disabled': 'initial',\n        '--n-ripple-color': 'initial',\n        '--n-text-color': 'initial',\n        '--n-text-color-hover': 'initial',\n        '--n-text-color-pressed': 'initial',\n        '--n-text-color-focus': 'initial',\n        '--n-text-color-disabled': 'initial'\n      };\n      const typeIsTertiary = type === 'tertiary';\n      const typeIsDefault = type === 'default';\n      const mergedType = typeIsTertiary ? 'default' : type;\n      if (text) {\n        const propTextColor = textColor || color;\n        const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-pressed': propTextColor ? createPressedColor(propTextColor) : self[createKey('textColorTextPressed', mergedType)],\n          '--n-text-color-focus': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-disabled': propTextColor || self[createKey('textColorTextDisabled', mergedType)]\n        };\n      } else if (ghost || dashed) {\n        const mergedTextColor = textColor || color;\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n          '--n-text-color-hover': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-pressed': mergedTextColor ? createPressedColor(mergedTextColor) : self[createKey('textColorGhostPressed', mergedType)],\n          '--n-text-color-focus': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-disabled': mergedTextColor || self[createKey('textColorGhostDisabled', mergedType)]\n        };\n      } else if (secondary) {\n        const typeTextColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedTextColor = color || typeTextColor;\n        const isColoredType = type !== 'default' && type !== 'tertiary';\n        colorProps = {\n          '--n-color': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondary)\n          }) : self.colorSecondary,\n          '--n-color-hover': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-pressed': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryPressed)\n          }) : self.colorSecondaryPressed,\n          '--n-color-focus': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-disabled': self.colorSecondary,\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': mergedTextColor,\n          '--n-text-color-pressed': mergedTextColor,\n          '--n-text-color-focus': mergedTextColor,\n          '--n-text-color-disabled': mergedTextColor\n        };\n      } else if (tertiary || quaternary) {\n        const typeColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedColor = color || typeColor;\n        if (tertiary) {\n          colorProps['--n-color'] = self.colorTertiary;\n          colorProps['--n-color-hover'] = self.colorTertiaryHover;\n          colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n          colorProps['--n-color-focus'] = self.colorSecondaryHover;\n          colorProps['--n-color-disabled'] = self.colorTertiary;\n        } else {\n          colorProps['--n-color'] = self.colorQuaternary;\n          colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n          colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n          colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n          colorProps['--n-color-disabled'] = self.colorQuaternary;\n        }\n        colorProps['--n-ripple-color'] = '#0000';\n        colorProps['--n-text-color'] = mergedColor;\n        colorProps['--n-text-color-hover'] = mergedColor;\n        colorProps['--n-text-color-pressed'] = mergedColor;\n        colorProps['--n-text-color-focus'] = mergedColor;\n        colorProps['--n-text-color-disabled'] = mergedColor;\n      } else {\n        colorProps = {\n          '--n-color': color || self[createKey('color', mergedType)],\n          '--n-color-hover': color ? createHoverColor(color) : self[createKey('colorHover', mergedType)],\n          '--n-color-pressed': color ? createPressedColor(color) : self[createKey('colorPressed', mergedType)],\n          '--n-color-focus': color ? createHoverColor(color) : self[createKey('colorFocus', mergedType)],\n          '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': textColor || (color ? self.textColorPrimary : typeIsTertiary ? self.textColorTertiary : self[createKey('textColor', mergedType)]),\n          '--n-text-color-hover': textColor || (color ? self.textColorHoverPrimary : self[createKey('textColorHover', mergedType)]),\n          '--n-text-color-pressed': textColor || (color ? self.textColorPressedPrimary : self[createKey('textColorPressed', mergedType)]),\n          '--n-text-color-focus': textColor || (color ? self.textColorFocusPrimary : self[createKey('textColorFocus', mergedType)]),\n          '--n-text-color-disabled': textColor || (color ? self.textColorDisabledPrimary : self[createKey('textColorDisabled', mergedType)])\n        };\n      }\n      // border\n      let borderProps = {\n        '--n-border': 'initial',\n        '--n-border-hover': 'initial',\n        '--n-border-pressed': 'initial',\n        '--n-border-focus': 'initial',\n        '--n-border-disabled': 'initial'\n      };\n      if (text) {\n        borderProps = {\n          '--n-border': 'none',\n          '--n-border-hover': 'none',\n          '--n-border-pressed': 'none',\n          '--n-border-focus': 'none',\n          '--n-border-disabled': 'none'\n        };\n      } else {\n        borderProps = {\n          '--n-border': self[createKey('border', mergedType)],\n          '--n-border-hover': self[createKey('borderHover', mergedType)],\n          '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n          '--n-border-focus': self[createKey('borderFocus', mergedType)],\n          '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n        };\n      }\n      // size\n      const {\n        [createKey('height', size)]: height,\n        [createKey('fontSize', size)]: fontSize,\n        [createKey('padding', size)]: padding,\n        [createKey('paddingRound', size)]: paddingRound,\n        [createKey('iconSize', size)]: iconSize,\n        [createKey('borderRadius', size)]: borderRadius,\n        [createKey('iconMargin', size)]: iconMargin,\n        waveOpacity\n      } = self;\n      const sizeProps = {\n        '--n-width': circle && !text ? height : 'initial',\n        '--n-height': text ? 'initial' : height,\n        '--n-font-size': fontSize,\n        '--n-padding': circle ? 'initial' : text ? 'initial' : round ? paddingRound : padding,\n        '--n-icon-size': iconSize,\n        '--n-icon-margin': iconMargin,\n        '--n-border-radius': text ? 'initial' : circle || round ? height : borderRadius\n      };\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-bezier-ease-out': cubicBezierEaseOut,\n        '--n-ripple-duration': rippleDuration,\n        '--n-opacity-disabled': opacityDisabled,\n        '--n-wave-opacity': waveOpacity\n      }, fontProps), colorProps), borderProps), sizeProps);\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('button', computed(() => {\n      let hash = '';\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      if (dashed) hash += 'a';\n      if (ghost) hash += 'b';\n      if (text) hash += 'c';\n      if (round) hash += 'd';\n      if (circle) hash += 'e';\n      if (secondary) hash += 'f';\n      if (tertiary) hash += 'g';\n      if (quaternary) hash += 'h';\n      if (strong) hash += 'i';\n      if (color) hash += 'j' + color2Class(color);\n      if (textColor) hash += 'k' + color2Class(textColor);\n      const {\n        value: size\n      } = mergedSizeRef;\n      hash += 'l' + size[0];\n      hash += 'm' + type[0];\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      selfElRef,\n      waveElRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedFocusable: mergedFocusableRef,\n      mergedSize: mergedSizeRef,\n      showBorder: showBorderRef,\n      enterPressed: enterPressedRef,\n      rtlEnabled: rtlEnabledRef,\n      handleMousedown,\n      handleKeydown,\n      handleBlur,\n      handleKeyup,\n      handleClick,\n      customColorCssVars: computed(() => {\n        const {\n          color\n        } = props;\n        if (!color) return null;\n        const hoverColor = createHoverColor(color);\n        return {\n          '--n-border-color': color,\n          '--n-border-color-hover': hoverColor,\n          '--n-border-color-pressed': createPressedColor(color),\n          '--n-border-color-focus': hoverColor,\n          '--n-border-color-disabled': color\n        };\n      }),\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n  render() {\n    const {\n      mergedClsPrefix,\n      tag: Component,\n      onRender\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    const children = resolveWrappedSlot(this.$slots.default, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-button__content`\n    }, children));\n    return h(Component, {\n      ref: \"selfElRef\",\n      class: [this.themeClass, `${mergedClsPrefix}-button`, `${mergedClsPrefix}-button--${this.type}-type`, `${mergedClsPrefix}-button--${this.mergedSize}-type`, this.rtlEnabled && `${mergedClsPrefix}-button--rtl`, this.disabled && `${mergedClsPrefix}-button--disabled`, this.block && `${mergedClsPrefix}-button--block`, this.enterPressed && `${mergedClsPrefix}-button--pressed`, !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`, this.color && `${mergedClsPrefix}-button--color`, this.secondary && `${mergedClsPrefix}-button--secondary`, this.loading && `${mergedClsPrefix}-button--loading`, this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n      ],\n      tabindex: this.mergedFocusable ? 0 : -1,\n      type: this.attrType,\n      style: this.cssVars,\n      disabled: this.disabled,\n      onClick: this.handleClick,\n      onBlur: this.handleBlur,\n      onMousedown: this.handleMousedown,\n      onKeyup: this.handleKeyup,\n      onKeydown: this.handleKeydown\n    }, this.iconPlacement === 'right' && children, h(NFadeInExpandTransition, {\n      width: true\n    }, {\n      default: () => resolveWrappedSlot(this.$slots.icon, children => (this.loading || this.renderIcon || children) && h(\"span\", {\n        class: `${mergedClsPrefix}-button__icon`,\n        style: {\n          margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n        }\n      }, h(NIconSwitchTransition, null, {\n        default: () => this.loading ? h(NBaseLoading, {\n          clsPrefix: mergedClsPrefix,\n          key: \"loading\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          strokeWidth: 20\n        }) : h(\"div\", {\n          key: \"icon\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          role: \"none\"\n        }, this.renderIcon ? this.renderIcon() : children)\n      })))\n    }), this.iconPlacement === 'left' && children, !this.text ? h(NBaseWave, {\n      ref: \"waveElRef\",\n      clsPrefix: mergedClsPrefix\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__border`,\n      style: this.customColorCssVars\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__state-border`,\n      style: this.customColorCssVars\n    }) : null);\n  }\n});\nexport default Button;\n// XButton is for tsx type checking\n// It's not compatible with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\nexport const XButton = Button;\n// Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later","map":{"version":3,"names":["h","ref","computed","inject","defineComponent","watchEffect","useMemo","changeColor","createHoverColor","createPressedColor","buttonGroupInjectionKey","useRtl","isSafari","useConfig","useFormItem","useTheme","useThemeClass","NFadeInExpandTransition","NIconSwitchTransition","NBaseLoading","NBaseWave","call","color2Class","createKey","isSlotEmpty","resolveWrappedSlot","warnOnce","buttonLight","style","buttonProps","Object","assign","props","color","String","textColor","text","Boolean","block","loading","disabled","circle","size","ghost","round","secondary","tertiary","quaternary","strong","focusable","type","default","keyboard","tag","dashed","renderIcon","Function","iconPlacement","attrType","bordered","onClick","Array","nativeFocusBehavior","Button","name","setup","process","env","NODE_ENV","selfElRef","waveElRef","enterPressedRef","showBorderRef","NButtonGroup","mergedSizeRef","defaultSize","mergedSize","NFormItem","buttonGroupSize","formItemSize","value","mergedFocusableRef","handleMousedown","e","_a","preventDefault","focus","preventScroll","handleClick","play","handleKeyup","key","handleKeydown","handleBlur","inlineThemeDisabled","mergedClsPrefixRef","mergedRtlRef","themeRef","rtlEnabledRef","cssVarsRef","theme","common","cubicBezierEaseInOut","cubicBezierEaseOut","self","rippleDuration","opacityDisabled","fontWeight","fontWeightStrong","fontProps","colorProps","typeIsTertiary","typeIsDefault","mergedType","propTextColor","mergedTextColor","typeTextColor","textColorTertiary","isColoredType","alpha","Number","colorOpacitySecondary","colorSecondary","colorOpacitySecondaryHover","colorSecondaryHover","colorOpacitySecondaryPressed","colorSecondaryPressed","typeColor","mergedColor","colorTertiary","colorTertiaryHover","colorTertiaryPressed","colorQuaternary","colorQuaternaryHover","colorQuaternaryPressed","textColorPrimary","textColorHoverPrimary","textColorPressedPrimary","textColorFocusPrimary","textColorDisabledPrimary","borderProps","height","fontSize","padding","paddingRound","iconSize","borderRadius","iconMargin","waveOpacity","sizeProps","themeClassHandle","hash","undefined","mergedClsPrefix","mergedFocusable","showBorder","enterPressed","rtlEnabled","customColorCssVars","hoverColor","cssVars","themeClass","onRender","render","Component","children","$slots","class","tabindex","onBlur","onMousedown","onKeyup","onKeydown","width","icon","margin","clsPrefix","strokeWidth","role","XButton"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/button/src/Button.mjs"],"sourcesContent":["import { h, ref, computed, inject, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { changeColor } from 'seemly';\nimport { createHoverColor, createPressedColor } from \"../../_utils/color/index.mjs\";\nimport { buttonGroupInjectionKey } from \"../../button-group/src/context.mjs\";\nimport { useRtl } from \"../../_mixins/use-rtl.mjs\";\nimport { isSafari } from \"../../_utils/env/browser.mjs\";\nimport { useConfig, useFormItem, useTheme, useThemeClass } from \"../../_mixins/index.mjs\";\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from \"../../_internal/index.mjs\";\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from \"../../_utils/index.mjs\";\nimport { buttonLight } from \"../styles/index.mjs\";\nimport style from \"./styles/index.cssr.mjs\";\nexport const buttonProps = Object.assign(Object.assign({}, useTheme.props), {\n  color: String,\n  textColor: String,\n  text: Boolean,\n  block: Boolean,\n  loading: Boolean,\n  disabled: Boolean,\n  circle: Boolean,\n  size: String,\n  ghost: Boolean,\n  round: Boolean,\n  secondary: Boolean,\n  tertiary: Boolean,\n  quaternary: Boolean,\n  strong: Boolean,\n  focusable: {\n    type: Boolean,\n    default: true\n  },\n  keyboard: {\n    type: Boolean,\n    default: true\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  type: {\n    type: String,\n    default: 'default'\n  },\n  dashed: Boolean,\n  renderIcon: Function,\n  iconPlacement: {\n    type: String,\n    default: 'left'\n  },\n  attrType: {\n    type: String,\n    default: 'button'\n  },\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  onClick: [Function, Array],\n  nativeFocusBehavior: {\n    type: Boolean,\n    default: !isSafari\n  }\n});\nconst Button = defineComponent({\n  name: 'Button',\n  props: buttonProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        const {\n          dashed,\n          ghost,\n          text,\n          secondary,\n          tertiary,\n          quaternary\n        } = props;\n        if ((dashed || ghost || text) && (secondary || tertiary || quaternary)) {\n          warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaternary` props.\");\n        }\n      });\n    }\n    const selfElRef = ref(null);\n    const waveElRef = ref(null);\n    const enterPressedRef = ref(false);\n    const showBorderRef = useMemo(() => {\n      return !props.quaternary && !props.tertiary && !props.secondary && !props.text && (!props.color || props.ghost || props.dashed) && props.bordered;\n    });\n    const NButtonGroup = inject(buttonGroupInjectionKey, {});\n    const {\n      mergedSizeRef\n    } = useFormItem({}, {\n      defaultSize: 'medium',\n      mergedSize: NFormItem => {\n        const {\n          size\n        } = props;\n        if (size) return size;\n        const {\n          size: buttonGroupSize\n        } = NButtonGroup;\n        if (buttonGroupSize) return buttonGroupSize;\n        const {\n          mergedSize: formItemSize\n        } = NFormItem || {};\n        if (formItemSize) {\n          return formItemSize.value;\n        }\n        return 'medium';\n      }\n    });\n    const mergedFocusableRef = computed(() => {\n      return props.focusable && !props.disabled;\n    });\n    const handleMousedown = e => {\n      var _a;\n      if (!mergedFocusableRef.value) {\n        e.preventDefault();\n      }\n      if (props.nativeFocusBehavior) {\n        return;\n      }\n      e.preventDefault();\n      // normally this won't be called if disabled (when tag is button)\n      // if not, we try to make it behave like a button\n      if (props.disabled) {\n        return;\n      }\n      if (mergedFocusableRef.value) {\n        (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n    const handleClick = e => {\n      var _a;\n      if (!props.disabled && !props.loading) {\n        const {\n          onClick\n        } = props;\n        if (onClick) call(onClick, e);\n        if (!props.text) {\n          (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n        }\n      }\n    };\n    const handleKeyup = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard) {\n            return;\n          }\n          enterPressedRef.value = false;\n      }\n    };\n    const handleKeydown = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard || props.loading) {\n            e.preventDefault();\n            return;\n          }\n          enterPressedRef.value = true;\n      }\n    };\n    const handleBlur = () => {\n      enterPressedRef.value = false;\n    };\n    const {\n      inlineThemeDisabled,\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n    const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const theme = themeRef.value;\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          cubicBezierEaseOut\n        },\n        self\n      } = theme;\n      const {\n        rippleDuration,\n        opacityDisabled,\n        fontWeight,\n        fontWeightStrong\n      } = self;\n      const size = mergedSizeRef.value;\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      // font\n      const fontProps = {\n        'font-weight': strong ? fontWeightStrong : fontWeight\n      };\n      // color\n      let colorProps = {\n        '--n-color': 'initial',\n        '--n-color-hover': 'initial',\n        '--n-color-pressed': 'initial',\n        '--n-color-focus': 'initial',\n        '--n-color-disabled': 'initial',\n        '--n-ripple-color': 'initial',\n        '--n-text-color': 'initial',\n        '--n-text-color-hover': 'initial',\n        '--n-text-color-pressed': 'initial',\n        '--n-text-color-focus': 'initial',\n        '--n-text-color-disabled': 'initial'\n      };\n      const typeIsTertiary = type === 'tertiary';\n      const typeIsDefault = type === 'default';\n      const mergedType = typeIsTertiary ? 'default' : type;\n      if (text) {\n        const propTextColor = textColor || color;\n        const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-pressed': propTextColor ? createPressedColor(propTextColor) : self[createKey('textColorTextPressed', mergedType)],\n          '--n-text-color-focus': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-disabled': propTextColor || self[createKey('textColorTextDisabled', mergedType)]\n        };\n      } else if (ghost || dashed) {\n        const mergedTextColor = textColor || color;\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n          '--n-text-color-hover': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-pressed': mergedTextColor ? createPressedColor(mergedTextColor) : self[createKey('textColorGhostPressed', mergedType)],\n          '--n-text-color-focus': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-disabled': mergedTextColor || self[createKey('textColorGhostDisabled', mergedType)]\n        };\n      } else if (secondary) {\n        const typeTextColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedTextColor = color || typeTextColor;\n        const isColoredType = type !== 'default' && type !== 'tertiary';\n        colorProps = {\n          '--n-color': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondary)\n          }) : self.colorSecondary,\n          '--n-color-hover': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-pressed': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryPressed)\n          }) : self.colorSecondaryPressed,\n          '--n-color-focus': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-disabled': self.colorSecondary,\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': mergedTextColor,\n          '--n-text-color-pressed': mergedTextColor,\n          '--n-text-color-focus': mergedTextColor,\n          '--n-text-color-disabled': mergedTextColor\n        };\n      } else if (tertiary || quaternary) {\n        const typeColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedColor = color || typeColor;\n        if (tertiary) {\n          colorProps['--n-color'] = self.colorTertiary;\n          colorProps['--n-color-hover'] = self.colorTertiaryHover;\n          colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n          colorProps['--n-color-focus'] = self.colorSecondaryHover;\n          colorProps['--n-color-disabled'] = self.colorTertiary;\n        } else {\n          colorProps['--n-color'] = self.colorQuaternary;\n          colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n          colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n          colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n          colorProps['--n-color-disabled'] = self.colorQuaternary;\n        }\n        colorProps['--n-ripple-color'] = '#0000';\n        colorProps['--n-text-color'] = mergedColor;\n        colorProps['--n-text-color-hover'] = mergedColor;\n        colorProps['--n-text-color-pressed'] = mergedColor;\n        colorProps['--n-text-color-focus'] = mergedColor;\n        colorProps['--n-text-color-disabled'] = mergedColor;\n      } else {\n        colorProps = {\n          '--n-color': color || self[createKey('color', mergedType)],\n          '--n-color-hover': color ? createHoverColor(color) : self[createKey('colorHover', mergedType)],\n          '--n-color-pressed': color ? createPressedColor(color) : self[createKey('colorPressed', mergedType)],\n          '--n-color-focus': color ? createHoverColor(color) : self[createKey('colorFocus', mergedType)],\n          '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': textColor || (color ? self.textColorPrimary : typeIsTertiary ? self.textColorTertiary : self[createKey('textColor', mergedType)]),\n          '--n-text-color-hover': textColor || (color ? self.textColorHoverPrimary : self[createKey('textColorHover', mergedType)]),\n          '--n-text-color-pressed': textColor || (color ? self.textColorPressedPrimary : self[createKey('textColorPressed', mergedType)]),\n          '--n-text-color-focus': textColor || (color ? self.textColorFocusPrimary : self[createKey('textColorFocus', mergedType)]),\n          '--n-text-color-disabled': textColor || (color ? self.textColorDisabledPrimary : self[createKey('textColorDisabled', mergedType)])\n        };\n      }\n      // border\n      let borderProps = {\n        '--n-border': 'initial',\n        '--n-border-hover': 'initial',\n        '--n-border-pressed': 'initial',\n        '--n-border-focus': 'initial',\n        '--n-border-disabled': 'initial'\n      };\n      if (text) {\n        borderProps = {\n          '--n-border': 'none',\n          '--n-border-hover': 'none',\n          '--n-border-pressed': 'none',\n          '--n-border-focus': 'none',\n          '--n-border-disabled': 'none'\n        };\n      } else {\n        borderProps = {\n          '--n-border': self[createKey('border', mergedType)],\n          '--n-border-hover': self[createKey('borderHover', mergedType)],\n          '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n          '--n-border-focus': self[createKey('borderFocus', mergedType)],\n          '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n        };\n      }\n      // size\n      const {\n        [createKey('height', size)]: height,\n        [createKey('fontSize', size)]: fontSize,\n        [createKey('padding', size)]: padding,\n        [createKey('paddingRound', size)]: paddingRound,\n        [createKey('iconSize', size)]: iconSize,\n        [createKey('borderRadius', size)]: borderRadius,\n        [createKey('iconMargin', size)]: iconMargin,\n        waveOpacity\n      } = self;\n      const sizeProps = {\n        '--n-width': circle && !text ? height : 'initial',\n        '--n-height': text ? 'initial' : height,\n        '--n-font-size': fontSize,\n        '--n-padding': circle ? 'initial' : text ? 'initial' : round ? paddingRound : padding,\n        '--n-icon-size': iconSize,\n        '--n-icon-margin': iconMargin,\n        '--n-border-radius': text ? 'initial' : circle || round ? height : borderRadius\n      };\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-bezier-ease-out': cubicBezierEaseOut,\n        '--n-ripple-duration': rippleDuration,\n        '--n-opacity-disabled': opacityDisabled,\n        '--n-wave-opacity': waveOpacity\n      }, fontProps), colorProps), borderProps), sizeProps);\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('button', computed(() => {\n      let hash = '';\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      if (dashed) hash += 'a';\n      if (ghost) hash += 'b';\n      if (text) hash += 'c';\n      if (round) hash += 'd';\n      if (circle) hash += 'e';\n      if (secondary) hash += 'f';\n      if (tertiary) hash += 'g';\n      if (quaternary) hash += 'h';\n      if (strong) hash += 'i';\n      if (color) hash += 'j' + color2Class(color);\n      if (textColor) hash += 'k' + color2Class(textColor);\n      const {\n        value: size\n      } = mergedSizeRef;\n      hash += 'l' + size[0];\n      hash += 'm' + type[0];\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      selfElRef,\n      waveElRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedFocusable: mergedFocusableRef,\n      mergedSize: mergedSizeRef,\n      showBorder: showBorderRef,\n      enterPressed: enterPressedRef,\n      rtlEnabled: rtlEnabledRef,\n      handleMousedown,\n      handleKeydown,\n      handleBlur,\n      handleKeyup,\n      handleClick,\n      customColorCssVars: computed(() => {\n        const {\n          color\n        } = props;\n        if (!color) return null;\n        const hoverColor = createHoverColor(color);\n        return {\n          '--n-border-color': color,\n          '--n-border-color-hover': hoverColor,\n          '--n-border-color-pressed': createPressedColor(color),\n          '--n-border-color-focus': hoverColor,\n          '--n-border-color-disabled': color\n        };\n      }),\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n  render() {\n    const {\n      mergedClsPrefix,\n      tag: Component,\n      onRender\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    const children = resolveWrappedSlot(this.$slots.default, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-button__content`\n    }, children));\n    return h(Component, {\n      ref: \"selfElRef\",\n      class: [this.themeClass, `${mergedClsPrefix}-button`, `${mergedClsPrefix}-button--${this.type}-type`, `${mergedClsPrefix}-button--${this.mergedSize}-type`, this.rtlEnabled && `${mergedClsPrefix}-button--rtl`, this.disabled && `${mergedClsPrefix}-button--disabled`, this.block && `${mergedClsPrefix}-button--block`, this.enterPressed && `${mergedClsPrefix}-button--pressed`, !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`, this.color && `${mergedClsPrefix}-button--color`, this.secondary && `${mergedClsPrefix}-button--secondary`, this.loading && `${mergedClsPrefix}-button--loading`, this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n      ],\n      tabindex: this.mergedFocusable ? 0 : -1,\n      type: this.attrType,\n      style: this.cssVars,\n      disabled: this.disabled,\n      onClick: this.handleClick,\n      onBlur: this.handleBlur,\n      onMousedown: this.handleMousedown,\n      onKeyup: this.handleKeyup,\n      onKeydown: this.handleKeydown\n    }, this.iconPlacement === 'right' && children, h(NFadeInExpandTransition, {\n      width: true\n    }, {\n      default: () => resolveWrappedSlot(this.$slots.icon, children => (this.loading || this.renderIcon || children) && h(\"span\", {\n        class: `${mergedClsPrefix}-button__icon`,\n        style: {\n          margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n        }\n      }, h(NIconSwitchTransition, null, {\n        default: () => this.loading ? h(NBaseLoading, {\n          clsPrefix: mergedClsPrefix,\n          key: \"loading\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          strokeWidth: 20\n        }) : h(\"div\", {\n          key: \"icon\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          role: \"none\"\n        }, this.renderIcon ? this.renderIcon() : children)\n      })))\n    }), this.iconPlacement === 'left' && children, !this.text ? h(NBaseWave, {\n      ref: \"waveElRef\",\n      clsPrefix: mergedClsPrefix\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__border`,\n      style: this.customColorCssVars\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__state-border`,\n      style: this.customColorCssVars\n    }) : null);\n  }\n});\nexport default Button;\n// XButton is for tsx type checking\n// It's not compatible with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\nexport const XButton = Button;\n// Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}