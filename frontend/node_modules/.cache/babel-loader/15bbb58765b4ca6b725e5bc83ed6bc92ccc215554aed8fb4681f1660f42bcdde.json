{"ast":null,"code":"// string => string (expected, not implemented)\n// string => number (legacy)\nexport function parse(value) {\n  if (value === undefined || value === null || typeof value === 'string' && value.trim() === '') {\n    return null;\n  }\n  return Number(value);\n}\n// can be parsed to number but shouldn't be applied when inputing\n// when value includes `.`, ending with 0 and`.`, doesn't update, if 0 parse func will remove 0\nexport function isWipValue(value) {\n  return value.includes('.') && (/^(-)?\\d+.*(\\.|0)$/.test(value) || /^\\.\\d+$/.test(value));\n}\n// string => boolean (expected, not implemented)\n// number => boolean (legacy)\nexport function validator(value) {\n  if (value === undefined || value === null) return true;\n  if (Number.isNaN(value)) return false;\n  return true;\n}\n// string => string (expected, not implemented)\n// number => string (legacy)\nexport function format(value, precision) {\n  if (value === undefined || value === null) return '';\n  return precision === undefined ? String(value) : value.toFixed(precision);\n}\nexport function parseNumber(number) {\n  if (number === null) return null;\n  if (typeof number === 'number') {\n    return number;\n  } else {\n    const parsedNumber = Number(number);\n    if (Number.isNaN(parsedNumber)) return null;else {\n      return parsedNumber;\n    }\n  }\n}","map":{"version":3,"names":["parse","value","undefined","trim","Number","isWipValue","includes","test","validator","isNaN","format","precision","String","toFixed","parseNumber","number","parsedNumber"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/input-number/src/utils.mjs"],"sourcesContent":["// string => string (expected, not implemented)\n// string => number (legacy)\nexport function parse(value) {\n  if (value === undefined || value === null || typeof value === 'string' && value.trim() === '') {\n    return null;\n  }\n  return Number(value);\n}\n// can be parsed to number but shouldn't be applied when inputing\n// when value includes `.`, ending with 0 and`.`, doesn't update, if 0 parse func will remove 0\nexport function isWipValue(value) {\n  return value.includes('.') && (/^(-)?\\d+.*(\\.|0)$/.test(value) || /^\\.\\d+$/.test(value));\n}\n// string => boolean (expected, not implemented)\n// number => boolean (legacy)\nexport function validator(value) {\n  if (value === undefined || value === null) return true;\n  if (Number.isNaN(value)) return false;\n  return true;\n}\n// string => string (expected, not implemented)\n// number => string (legacy)\nexport function format(value, precision) {\n  if (value === undefined || value === null) return '';\n  return precision === undefined ? String(value) : value.toFixed(precision);\n}\nexport function parseNumber(number) {\n  if (number === null) return null;\n  if (typeof number === 'number') {\n    return number;\n  } else {\n    const parsedNumber = Number(number);\n    if (Number.isNaN(parsedNumber)) return null;else {\n      return parsedNumber;\n    }\n  }\n}"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,KAAKA,CAACC,KAAK,EAAE;EAC3B,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC7F,OAAO,IAAI;EACb;EACA,OAAOC,MAAM,CAACH,KAAK,CAAC;AACtB;AACA;AACA;AACA,OAAO,SAASI,UAAUA,CAACJ,KAAK,EAAE;EAChC,OAAOA,KAAK,CAACK,QAAQ,CAAC,GAAG,CAAC,KAAK,mBAAmB,CAACC,IAAI,CAACN,KAAK,CAAC,IAAI,SAAS,CAACM,IAAI,CAACN,KAAK,CAAC,CAAC;AAC1F;AACA;AACA;AACA,OAAO,SAASO,SAASA,CAACP,KAAK,EAAE;EAC/B,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE,OAAO,IAAI;EACtD,IAAIG,MAAM,CAACK,KAAK,CAACR,KAAK,CAAC,EAAE,OAAO,KAAK;EACrC,OAAO,IAAI;AACb;AACA;AACA;AACA,OAAO,SAASS,MAAMA,CAACT,KAAK,EAAEU,SAAS,EAAE;EACvC,IAAIV,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE,OAAO,EAAE;EACpD,OAAOU,SAAS,KAAKT,SAAS,GAAGU,MAAM,CAACX,KAAK,CAAC,GAAGA,KAAK,CAACY,OAAO,CAACF,SAAS,CAAC;AAC3E;AACA,OAAO,SAASG,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAIA,MAAM,KAAK,IAAI,EAAE,OAAO,IAAI;EAChC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;EACf,CAAC,MAAM;IACL,MAAMC,YAAY,GAAGZ,MAAM,CAACW,MAAM,CAAC;IACnC,IAAIX,MAAM,CAACK,KAAK,CAACO,YAAY,CAAC,EAAE,OAAO,IAAI,CAAC,KAAK;MAC/C,OAAOA,YAAY;IACrB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}