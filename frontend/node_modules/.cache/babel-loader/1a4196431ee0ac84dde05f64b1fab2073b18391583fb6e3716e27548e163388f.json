{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { h, defineComponent, provide, computed, toRef, ref, watchEffect } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from \"../../_mixins/index.mjs\";\nimport { call, createInjectionKey, warnOnce } from \"../../_utils/index.mjs\";\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nexport const checkboxGroupProps = {\n  min: Number,\n  max: Number,\n  size: String,\n  value: Array,\n  defaultValue: {\n    type: Array,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  // deprecated\n  onChange: [Function, Array]\n};\nexport default defineComponent({\n  name: 'CheckboxGroup',\n  props: checkboxGroupProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.onChange !== undefined) {\n          warnOnce('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n        }\n      });\n    }\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const formItem = useFormItem(props);\n    const {\n      mergedSizeRef,\n      mergedDisabledRef\n    } = formItem;\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = computed(() => props.value);\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const checkedCount = computed(() => {\n      var _a;\n      return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    });\n    const valueSetRef = computed(() => {\n      if (Array.isArray(mergedValueRef.value)) {\n        return new Set(mergedValueRef.value);\n      }\n      return new Set();\n    });\n    function toggleCheckbox(checked, checkboxValue) {\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      const {\n        onChange,\n        'onUpdate:value': _onUpdateValue,\n        onUpdateValue\n      } = props;\n      if (Array.isArray(mergedValueRef.value)) {\n        const groupValue = Array.from(mergedValueRef.value);\n        const index = groupValue.findIndex(value => value === checkboxValue);\n        if (checked) {\n          if (!~index) {\n            groupValue.push(checkboxValue);\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledValueRef.value = groupValue;\n            // deprecated\n            if (onChange) call(onChange, groupValue);\n          }\n        } else {\n          if (~index) {\n            groupValue.splice(index, 1);\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n            if (onChange) call(onChange, groupValue); // deprecated\n            uncontrolledValueRef.value = groupValue;\n            nTriggerFormInput();\n            nTriggerFormChange();\n          }\n        }\n      } else {\n        if (checked) {\n          if (onUpdateValue) {\n            call(onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n          if (onChange) call(onChange, [checkboxValue]); // deprecated\n          uncontrolledValueRef.value = [checkboxValue];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        } else {\n          if (onUpdateValue) {\n            call(onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n          if (onChange) call(onChange, []); // deprecated\n          uncontrolledValueRef.value = [];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        }\n      }\n    }\n    provide(checkboxGroupInjectionKey, {\n      checkedCountRef: checkedCount,\n      maxRef: toRef(props, 'max'),\n      minRef: toRef(props, 'min'),\n      valueSetRef,\n      disabledRef: mergedDisabledRef,\n      mergedSizeRef,\n      toggleCheckbox\n    });\n    return {\n      mergedClsPrefix: mergedClsPrefixRef\n    };\n  },\n  render() {\n    return h(\"div\", {\n      class: `${this.mergedClsPrefix}-checkbox-group`,\n      role: \"group\"\n    }, this.$slots);\n  }\n});","map":{"version":3,"names":["h","defineComponent","provide","computed","toRef","ref","watchEffect","useMergedState","useConfig","useFormItem","call","createInjectionKey","warnOnce","checkboxGroupInjectionKey","checkboxGroupProps","min","Number","max","size","String","value","Array","defaultValue","type","default","disabled","Boolean","undefined","Function","onUpdateValue","onChange","name","props","setup","process","env","NODE_ENV","mergedClsPrefixRef","formItem","mergedSizeRef","mergedDisabledRef","uncontrolledValueRef","controlledValueRef","mergedValueRef","checkedCount","_a","length","valueSetRef","isArray","Set","toggleCheckbox","checked","checkboxValue","nTriggerFormInput","nTriggerFormChange","_onUpdateValue","groupValue","from","index","findIndex","push","actionType","splice","checkedCountRef","maxRef","minRef","disabledRef","mergedClsPrefix","render","class","role","$slots"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/checkbox/src/CheckboxGroup.mjs"],"sourcesContent":["import { h, defineComponent, provide, computed, toRef, ref, watchEffect } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from \"../../_mixins/index.mjs\";\nimport { call, createInjectionKey, warnOnce } from \"../../_utils/index.mjs\";\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nexport const checkboxGroupProps = {\n  min: Number,\n  max: Number,\n  size: String,\n  value: Array,\n  defaultValue: {\n    type: Array,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  // deprecated\n  onChange: [Function, Array]\n};\nexport default defineComponent({\n  name: 'CheckboxGroup',\n  props: checkboxGroupProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.onChange !== undefined) {\n          warnOnce('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n        }\n      });\n    }\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const formItem = useFormItem(props);\n    const {\n      mergedSizeRef,\n      mergedDisabledRef\n    } = formItem;\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = computed(() => props.value);\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const checkedCount = computed(() => {\n      var _a;\n      return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    });\n    const valueSetRef = computed(() => {\n      if (Array.isArray(mergedValueRef.value)) {\n        return new Set(mergedValueRef.value);\n      }\n      return new Set();\n    });\n    function toggleCheckbox(checked, checkboxValue) {\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      const {\n        onChange,\n        'onUpdate:value': _onUpdateValue,\n        onUpdateValue\n      } = props;\n      if (Array.isArray(mergedValueRef.value)) {\n        const groupValue = Array.from(mergedValueRef.value);\n        const index = groupValue.findIndex(value => value === checkboxValue);\n        if (checked) {\n          if (!~index) {\n            groupValue.push(checkboxValue);\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledValueRef.value = groupValue;\n            // deprecated\n            if (onChange) call(onChange, groupValue);\n          }\n        } else {\n          if (~index) {\n            groupValue.splice(index, 1);\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n            if (onChange) call(onChange, groupValue); // deprecated\n            uncontrolledValueRef.value = groupValue;\n            nTriggerFormInput();\n            nTriggerFormChange();\n          }\n        }\n      } else {\n        if (checked) {\n          if (onUpdateValue) {\n            call(onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n          if (onChange) call(onChange, [checkboxValue]); // deprecated\n          uncontrolledValueRef.value = [checkboxValue];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        } else {\n          if (onUpdateValue) {\n            call(onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n          if (onChange) call(onChange, []); // deprecated\n          uncontrolledValueRef.value = [];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        }\n      }\n    }\n    provide(checkboxGroupInjectionKey, {\n      checkedCountRef: checkedCount,\n      maxRef: toRef(props, 'max'),\n      minRef: toRef(props, 'min'),\n      valueSetRef,\n      disabledRef: mergedDisabledRef,\n      mergedSizeRef,\n      toggleCheckbox\n    });\n    return {\n      mergedClsPrefix: mergedClsPrefixRef\n    };\n  },\n  render() {\n    return h(\"div\", {\n      class: `${this.mergedClsPrefix}-checkbox-group`,\n      role: \"group\"\n    }, this.$slots);\n  }\n});"],"mappings":";;;;;;;;AAAA,SAASA,CAAC,EAAEC,eAAe,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,GAAG,EAAEC,WAAW,QAAQ,KAAK;AACpF,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AAChE,SAASC,IAAI,EAAEC,kBAAkB,EAAEC,QAAQ,QAAQ,wBAAwB;AAC3E,OAAO,MAAMC,yBAAyB,GAAGF,kBAAkB,CAAC,kBAAkB,CAAC;AAC/E,OAAO,MAAMG,kBAAkB,GAAG;EAChCC,GAAG,EAAEC,MAAM;EACXC,GAAG,EAAED,MAAM;EACXE,IAAI,EAAEC,MAAM;EACZC,KAAK,EAAEC,KAAK;EACZC,YAAY,EAAE;IACZC,IAAI,EAAEF,KAAK;IACXG,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACRF,IAAI,EAAEG,OAAO;IACbF,OAAO,EAAEG;EACX,CAAC;EACD,gBAAgB,EAAE,CAACC,QAAQ,EAAEP,KAAK,CAAC;EACnCQ,aAAa,EAAE,CAACD,QAAQ,EAAEP,KAAK,CAAC;EAChC;EACAS,QAAQ,EAAE,CAACF,QAAQ,EAAEP,KAAK;AAC5B,CAAC;AACD,eAAepB,eAAe,CAAC;EAC7B8B,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAElB,kBAAkB;EACzBmB,KAAKA,CAACD,KAAK,EAAE;IACX,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC9B,WAAW,CAAC,MAAM;QAChB,IAAI0B,KAAK,CAACF,QAAQ,KAAKH,SAAS,EAAE;UAChCf,QAAQ,CAAC,gBAAgB,EAAE,kEAAkE,CAAC;QAChG;MACF,CAAC,CAAC;IACJ;IACA,MAAM;MACJyB;IACF,CAAC,GAAG7B,SAAS,CAACwB,KAAK,CAAC;IACpB,MAAMM,QAAQ,GAAG7B,WAAW,CAACuB,KAAK,CAAC;IACnC,MAAM;MACJO,aAAa;MACbC;IACF,CAAC,GAAGF,QAAQ;IACZ,MAAMG,oBAAoB,GAAGpC,GAAG,CAAC2B,KAAK,CAACV,YAAY,CAAC;IACpD,MAAMoB,kBAAkB,GAAGvC,QAAQ,CAAC,MAAM6B,KAAK,CAACZ,KAAK,CAAC;IACtD,MAAMuB,cAAc,GAAGpC,cAAc,CAACmC,kBAAkB,EAAED,oBAAoB,CAAC;IAC/E,MAAMG,YAAY,GAAGzC,QAAQ,CAAC,MAAM;MAClC,IAAI0C,EAAE;MACN,OAAO,CAAC,CAACA,EAAE,GAAGF,cAAc,CAACvB,KAAK,MAAM,IAAI,IAAIyB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,MAAM,KAAK,CAAC;IAC1F,CAAC,CAAC;IACF,MAAMC,WAAW,GAAG5C,QAAQ,CAAC,MAAM;MACjC,IAAIkB,KAAK,CAAC2B,OAAO,CAACL,cAAc,CAACvB,KAAK,CAAC,EAAE;QACvC,OAAO,IAAI6B,GAAG,CAACN,cAAc,CAACvB,KAAK,CAAC;MACtC;MACA,OAAO,IAAI6B,GAAG,CAAC,CAAC;IAClB,CAAC,CAAC;IACF,SAASC,cAAcA,CAACC,OAAO,EAAEC,aAAa,EAAE;MAC9C,MAAM;QACJC,iBAAiB;QACjBC;MACF,CAAC,GAAGhB,QAAQ;MACZ,MAAM;QACJR,QAAQ;QACR,gBAAgB,EAAEyB,cAAc;QAChC1B;MACF,CAAC,GAAGG,KAAK;MACT,IAAIX,KAAK,CAAC2B,OAAO,CAACL,cAAc,CAACvB,KAAK,CAAC,EAAE;QACvC,MAAMoC,UAAU,GAAGnC,KAAK,CAACoC,IAAI,CAACd,cAAc,CAACvB,KAAK,CAAC;QACnD,MAAMsC,KAAK,GAAGF,UAAU,CAACG,SAAS,CAACvC,KAAK,IAAIA,KAAK,KAAKgC,aAAa,CAAC;QACpE,IAAID,OAAO,EAAE;UACX,IAAI,CAAC,CAACO,KAAK,EAAE;YACXF,UAAU,CAACI,IAAI,CAACR,aAAa,CAAC;YAC9B,IAAIvB,aAAa,EAAE;cACjBnB,IAAI,CAACmB,aAAa,EAAE2B,UAAU,EAAE;gBAC9BK,UAAU,EAAE,OAAO;gBACnBzC,KAAK,EAAEgC;cACT,CAAC,CAAC;YACJ;YACA,IAAIG,cAAc,EAAE;cAClB7C,IAAI,CAAC6C,cAAc,EAAEC,UAAU,EAAE;gBAC/BK,UAAU,EAAE,OAAO;gBACnBzC,KAAK,EAAEgC;cACT,CAAC,CAAC;YACJ;YACAC,iBAAiB,CAAC,CAAC;YACnBC,kBAAkB,CAAC,CAAC;YACpBb,oBAAoB,CAACrB,KAAK,GAAGoC,UAAU;YACvC;YACA,IAAI1B,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ,EAAE0B,UAAU,CAAC;UAC1C;QACF,CAAC,MAAM;UACL,IAAI,CAACE,KAAK,EAAE;YACVF,UAAU,CAACM,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;YAC3B,IAAI7B,aAAa,EAAE;cACjBnB,IAAI,CAACmB,aAAa,EAAE2B,UAAU,EAAE;gBAC9BK,UAAU,EAAE,SAAS;gBACrBzC,KAAK,EAAEgC;cACT,CAAC,CAAC;YACJ;YACA,IAAIG,cAAc,EAAE;cAClB7C,IAAI,CAAC6C,cAAc,EAAEC,UAAU,EAAE;gBAC/BK,UAAU,EAAE,SAAS;gBACrBzC,KAAK,EAAEgC;cACT,CAAC,CAAC;YACJ;YACA,IAAItB,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ,EAAE0B,UAAU,CAAC,CAAC,CAAC;YAC1Cf,oBAAoB,CAACrB,KAAK,GAAGoC,UAAU;YACvCH,iBAAiB,CAAC,CAAC;YACnBC,kBAAkB,CAAC,CAAC;UACtB;QACF;MACF,CAAC,MAAM;QACL,IAAIH,OAAO,EAAE;UACX,IAAItB,aAAa,EAAE;YACjBnB,IAAI,CAACmB,aAAa,EAAE,CAACuB,aAAa,CAAC,EAAE;cACnCS,UAAU,EAAE,OAAO;cACnBzC,KAAK,EAAEgC;YACT,CAAC,CAAC;UACJ;UACA,IAAIG,cAAc,EAAE;YAClB7C,IAAI,CAAC6C,cAAc,EAAE,CAACH,aAAa,CAAC,EAAE;cACpCS,UAAU,EAAE,OAAO;cACnBzC,KAAK,EAAEgC;YACT,CAAC,CAAC;UACJ;UACA,IAAItB,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ,EAAE,CAACsB,aAAa,CAAC,CAAC,CAAC,CAAC;UAC/CX,oBAAoB,CAACrB,KAAK,GAAG,CAACgC,aAAa,CAAC;UAC5CC,iBAAiB,CAAC,CAAC;UACnBC,kBAAkB,CAAC,CAAC;QACtB,CAAC,MAAM;UACL,IAAIzB,aAAa,EAAE;YACjBnB,IAAI,CAACmB,aAAa,EAAE,EAAE,EAAE;cACtBgC,UAAU,EAAE,SAAS;cACrBzC,KAAK,EAAEgC;YACT,CAAC,CAAC;UACJ;UACA,IAAIG,cAAc,EAAE;YAClB7C,IAAI,CAAC6C,cAAc,EAAE,EAAE,EAAE;cACvBM,UAAU,EAAE,SAAS;cACrBzC,KAAK,EAAEgC;YACT,CAAC,CAAC;UACJ;UACA,IAAItB,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;UAClCW,oBAAoB,CAACrB,KAAK,GAAG,EAAE;UAC/BiC,iBAAiB,CAAC,CAAC;UACnBC,kBAAkB,CAAC,CAAC;QACtB;MACF;IACF;IACApD,OAAO,CAACW,yBAAyB,EAAE;MACjCkD,eAAe,EAAEnB,YAAY;MAC7BoB,MAAM,EAAE5D,KAAK,CAAC4B,KAAK,EAAE,KAAK,CAAC;MAC3BiC,MAAM,EAAE7D,KAAK,CAAC4B,KAAK,EAAE,KAAK,CAAC;MAC3Be,WAAW;MACXmB,WAAW,EAAE1B,iBAAiB;MAC9BD,aAAa;MACbW;IACF,CAAC,CAAC;IACF,OAAO;MACLiB,eAAe,EAAE9B;IACnB,CAAC;EACH,CAAC;EACD+B,MAAMA,CAAA,EAAG;IACP,OAAOpE,CAAC,CAAC,KAAK,EAAE;MACdqE,KAAK,EAAG,GAAE,IAAI,CAACF,eAAgB,iBAAgB;MAC/CG,IAAI,EAAE;IACR,CAAC,EAAE,IAAI,CAACC,MAAM,CAAC;EACjB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}