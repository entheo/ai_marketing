{"ast":null,"code":"/**\r\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\r\n * `date` as it will be rendered in the `timeZone`.\r\n */\nexport default function tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone);\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\nfunction partsOffset(dtf, date) {\n  try {\n    var formatted = dtf.formatToParts(date);\n    var filled = [];\n    for (var i = 0; i < formatted.length; i++) {\n      var pos = typeToPos[formatted[i].type];\n      if (pos >= 0) {\n        filled[pos] = parseInt(formatted[i].value, 10);\n      }\n    }\n    return filled;\n  } catch (error) {\n    if (error instanceof RangeError) {\n      return [NaN];\n    }\n    throw error;\n  }\n}\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date);\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n  // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];\n}\n\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nvar dtfCache = {};\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'));\n    var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n    dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: timeZone,\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }) : new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timeZone,\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n  return dtfCache[timeZone];\n}","map":{"version":3,"names":["tzTokenizeDate","date","timeZone","dtf","getDateTimeFormat","formatToParts","partsOffset","hackyOffset","typeToPos","year","month","day","hour","minute","second","formatted","filled","i","length","pos","type","parseInt","value","error","RangeError","NaN","format","parsed","exec","dtfCache","testDateFormatted","Intl","DateTimeFormat","hourCycle","Date","hourCycleSupported","hour12"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/date-fns-tz/esm/_lib/tzTokenizeDate/index.js"],"sourcesContent":["/**\r\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\r\n * `date` as it will be rendered in the `timeZone`.\r\n */\r\nexport default function tzTokenizeDate(date, timeZone) {\r\n  var dtf = getDateTimeFormat(timeZone)\r\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date)\r\n}\r\n\r\nvar typeToPos = {\r\n  year: 0,\r\n  month: 1,\r\n  day: 2,\r\n  hour: 3,\r\n  minute: 4,\r\n  second: 5,\r\n}\r\n\r\nfunction partsOffset(dtf, date) {\r\n  try {\r\n    var formatted = dtf.formatToParts(date)\r\n    var filled = []\r\n    for (var i = 0; i < formatted.length; i++) {\r\n      var pos = typeToPos[formatted[i].type]\r\n\r\n      if (pos >= 0) {\r\n        filled[pos] = parseInt(formatted[i].value, 10)\r\n      }\r\n    }\r\n    return filled\r\n  } catch (error) {\r\n    if (error instanceof RangeError) {\r\n      return [NaN]\r\n    }\r\n    throw error\r\n  }\r\n}\r\n\r\nfunction hackyOffset(dtf, date) {\r\n  var formatted = dtf.format(date)\r\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted)\r\n  // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\r\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\r\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]]\r\n}\r\n\r\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\r\n// to get deterministic local date/time output according to the `en-US` locale which\r\n// can be used to extract local time parts as necessary.\r\nvar dtfCache = {}\r\nfunction getDateTimeFormat(timeZone) {\r\n  if (!dtfCache[timeZone]) {\r\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\r\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\r\n      hourCycle: 'h23',\r\n      timeZone: 'America/New_York',\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n    }).format(new Date('2014-06-25T04:00:00.123Z'))\r\n    var hourCycleSupported =\r\n      testDateFormatted === '06/25/2014, 00:00:00' ||\r\n      testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00'\r\n\r\n    dtfCache[timeZone] = hourCycleSupported\r\n      ? new Intl.DateTimeFormat('en-US', {\r\n          hourCycle: 'h23',\r\n          timeZone: timeZone,\r\n          year: 'numeric',\r\n          month: 'numeric',\r\n          day: '2-digit',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          second: '2-digit',\r\n        })\r\n      : new Intl.DateTimeFormat('en-US', {\r\n          hour12: false,\r\n          timeZone: timeZone,\r\n          year: 'numeric',\r\n          month: 'numeric',\r\n          day: '2-digit',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          second: '2-digit',\r\n        })\r\n  }\r\n  return dtfCache[timeZone]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}