{"ast":null,"code":"// store/index.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\nexport const useAuthStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userData: null\n    // isAuthenticated: false,\n  }),\n  // 你可以添加 actions 和 mutations 等\n  actions: {\n    logIn({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        axios({\n          url: 'http://localhost:8005l/api/account/login/',\n          data: user,\n          method: 'POST'\n        }).then(resp => {\n          const token = resp.data.token.access;\n          const user = resp.data.username;\n          localStorage.setItem('token', token);\n          axios.defaults.headers.common['Authorization'] = token;\n          commit('auth_success', {\n            token,\n            user\n          });\n          resolve(resp);\n        }).catch(err => {\n          localStorage.removeItem('token');\n          reject(err);\n        });\n      });\n    },\n    logout({\n      commit\n    }) {\n      return new Promise(resolve => {\n        commit('logout');\n        localStorage.removeItem('token');\n        delete axios.defaults.headers.common['Authorization'];\n        resolve();\n      });\n    },\n    getters: {\n      isLoggedIn: state => !!state.token,\n      authStatus: state => state.status\n    },\n    checkLoginStatus() {\n      // 根据localStorage或其他持久化存储状态恢复登录状态\n      // 例如:\n      const userData = localStorage.getItem('user');\n      if (user) {\n        const userData = JSON.parse(user);\n        const now = new Date().getTime();\n        if (userData.expiration > now) {\n          this.logIn(userData);\n        } else {\n          this.logOut(); // 清除过期Token\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","axios","useAuthStore","state","isLoggedIn","userData","actions","logIn","commit","user","Promise","resolve","reject","url","data","method","then","resp","token","access","username","localStorage","setItem","defaults","headers","common","catch","err","removeItem","logout","getters","authStatus","status","checkLoginStatus","getItem","JSON","parse","now","Date","getTime","expiration","logOut"],"sources":["/Users/wangjohnson/ai_marketing/frontend/src/store/index.js"],"sourcesContent":["// store/index.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios'\nexport const useAuthStore = defineStore(\n  'user',{\n  state: () => ({\n    isLoggedIn: false,\n    userData: null,\n    // isAuthenticated: false,\n  }),\n  // 你可以添加 actions 和 mutations 等\n   actions: {\n     logIn({commit}, user) {\n       return new Promise((resolve, reject) => {\n          axios({url: 'http://localhost:8005l/api/account/login/', data: user, method: 'POST' })\n          .then(resp => {\n            const token = resp.data.token.access\n            const user = resp.data.username\n            localStorage.setItem('token', token)\n            axios.defaults.headers.common['Authorization'] = token\n            commit('auth_success', { token, user })\n            resolve(resp)\n          })\n          .catch(err => {\n            localStorage.removeItem('token')\n            reject(err)\n          })\n       })\n     },\n\n     logout({commit}){\n       return new Promise((resolve) => {\n         commit('logout')\n         localStorage.removeItem('token')\n         delete axios.defaults.headers.common['Authorization']\n         resolve()\n       })\n     },\n     getters : {\n        isLoggedIn: state => !!state.token,\n        authStatus: state => state.status,\n    },\n\n     checkLoginStatus() {\n      // 根据localStorage或其他持久化存储状态恢复登录状态\n      // 例如:\n      const userData = localStorage.getItem('user');\n      if (user) {\n        const userData = JSON.parse(user);\n        const now = new Date().getTime();\n        if (userData.expiration > now) {\n          this.logIn(userData);\n          } \n        else {\n          this.logOut(); // 清除过期Token\n          }\n      }\n    }\n   }\n});\n\n\n\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,MAAMC,YAAY,GAAGF,WAAW,CACrC,MAAM,EAAC;EACPG,KAAK,EAAEA,CAAA,MAAO;IACZC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE;IACV;EACF,CAAC,CAAC;EACF;EACCC,OAAO,EAAE;IACPC,KAAKA,CAAC;MAACC;IAAM,CAAC,EAAEC,IAAI,EAAE;MACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACrCX,KAAK,CAAC;UAACY,GAAG,EAAE,2CAA2C;UAAEC,IAAI,EAAEL,IAAI;UAAEM,MAAM,EAAE;QAAO,CAAC,CAAC,CACrFC,IAAI,CAACC,IAAI,IAAI;UACZ,MAAMC,KAAK,GAAGD,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,MAAM;UACpC,MAAMV,IAAI,GAAGQ,IAAI,CAACH,IAAI,CAACM,QAAQ;UAC/BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;UACpCjB,KAAK,CAACsB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAGP,KAAK;UACtDV,MAAM,CAAC,cAAc,EAAE;YAAEU,KAAK;YAAET;UAAK,CAAC,CAAC;UACvCE,OAAO,CAACM,IAAI,CAAC;QACf,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;UACZN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;UAChChB,MAAM,CAACe,GAAG,CAAC;QACb,CAAC,CAAC;MACL,CAAC,CAAC;IACJ,CAAC;IAEDE,MAAMA,CAAC;MAACrB;IAAM,CAAC,EAAC;MACd,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAK;QAC9BH,MAAM,CAAC,QAAQ,CAAC;QAChBa,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;QAChC,OAAO3B,KAAK,CAACsB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;QACrDd,OAAO,CAAC,CAAC;MACX,CAAC,CAAC;IACJ,CAAC;IACDmB,OAAO,EAAG;MACP1B,UAAU,EAAED,KAAK,IAAI,CAAC,CAACA,KAAK,CAACe,KAAK;MAClCa,UAAU,EAAE5B,KAAK,IAAIA,KAAK,CAAC6B;IAC/B,CAAC;IAEAC,gBAAgBA,CAAA,EAAG;MAClB;MACA;MACA,MAAM5B,QAAQ,GAAGgB,YAAY,CAACa,OAAO,CAAC,MAAM,CAAC;MAC7C,IAAIzB,IAAI,EAAE;QACR,MAAMJ,QAAQ,GAAG8B,IAAI,CAACC,KAAK,CAAC3B,IAAI,CAAC;QACjC,MAAM4B,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAChC,IAAIlC,QAAQ,CAACmC,UAAU,GAAGH,GAAG,EAAE;UAC7B,IAAI,CAAC9B,KAAK,CAACF,QAAQ,CAAC;QACpB,CAAC,MACE;UACH,IAAI,CAACoC,MAAM,CAAC,CAAC,CAAC,CAAC;QACf;MACJ;IACF;EACD;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}