{"ast":null,"code":"import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from \"../../input/index.mjs\";\nimport ColorInputUnit from \"./ColorInputUnit.mjs\";\nexport default defineComponent({\n  name: 'ColorInput',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    modes: {\n      type: Array,\n      required: true\n    },\n    showAlpha: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      // for hex to get percise value\n      type: String,\n      default: null\n    },\n    valueArr: {\n      type: Array,\n      default: null\n    },\n    onUpdateValue: {\n      type: Function,\n      required: true\n    },\n    onUpdateMode: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    return {\n      handleUnitUpdateValue(index, value) {\n        const {\n          showAlpha\n        } = props;\n        if (props.mode === 'hex') {\n          props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n          return;\n        }\n        let nextValueArr;\n        if (props.valueArr === null) {\n          nextValueArr = [0, 0, 0, 0];\n        } else {\n          nextValueArr = Array.from(props.valueArr);\n        }\n        switch (props.mode) {\n          case 'hsv':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n            break;\n          case 'rgb':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n            break;\n          case 'hsl':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n            break;\n        }\n      }\n    };\n  },\n  render() {\n    const {\n      clsPrefix,\n      modes\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-input`\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-input__mode`,\n      onClick: this.onUpdateMode,\n      style: {\n        cursor: modes.length === 1 ? '' : 'pointer'\n      }\n    }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')), h(NInputGroup, null, {\n      default: () => {\n        const {\n          mode,\n          valueArr,\n          showAlpha\n        } = this;\n        if (mode === 'hex') {\n          // hex and rgba shares the same value arr\n          let hexValue = null;\n          try {\n            hexValue = valueArr === null ? null : (showAlpha ? toHexaString : toHexString)(valueArr);\n          } catch (_a) {}\n          return h(ColorInputUnit, {\n            label: 'HEX',\n            showAlpha: showAlpha,\n            value: hexValue,\n            onUpdateValue: unitValue => {\n              this.handleUnitUpdateValue(0, unitValue);\n            }\n          });\n        }\n        return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => h(ColorInputUnit, {\n          label: v.toUpperCase(),\n          value: valueArr === null ? null : valueArr[i],\n          onUpdateValue: unitValue => {\n            this.handleUnitUpdateValue(i, unitValue);\n          }\n        }));\n      }\n    }));\n  }\n});","map":{"version":3,"names":["toHsvaString","toRgbaString","toHslaString","toHexaString","toHexString","toHsvString","toRgbString","toHslString","h","defineComponent","NInputGroup","ColorInputUnit","name","props","clsPrefix","type","String","required","mode","modes","Array","showAlpha","Boolean","value","default","valueArr","onUpdateValue","Function","onUpdateMode","setup","handleUnitUpdateValue","index","nextValueArr","from","render","class","onClick","style","cursor","length","toUpperCase","hexValue","_a","label","unitValue","split","map","v","i"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/color-picker/src/ColorInput.mjs"],"sourcesContent":["import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from \"../../input/index.mjs\";\nimport ColorInputUnit from \"./ColorInputUnit.mjs\";\nexport default defineComponent({\n  name: 'ColorInput',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    modes: {\n      type: Array,\n      required: true\n    },\n    showAlpha: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      // for hex to get percise value\n      type: String,\n      default: null\n    },\n    valueArr: {\n      type: Array,\n      default: null\n    },\n    onUpdateValue: {\n      type: Function,\n      required: true\n    },\n    onUpdateMode: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    return {\n      handleUnitUpdateValue(index, value) {\n        const {\n          showAlpha\n        } = props;\n        if (props.mode === 'hex') {\n          props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n          return;\n        }\n        let nextValueArr;\n        if (props.valueArr === null) {\n          nextValueArr = [0, 0, 0, 0];\n        } else {\n          nextValueArr = Array.from(props.valueArr);\n        }\n        switch (props.mode) {\n          case 'hsv':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n            break;\n          case 'rgb':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n            break;\n          case 'hsl':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n            break;\n        }\n      }\n    };\n  },\n  render() {\n    const {\n      clsPrefix,\n      modes\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-input`\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-input__mode`,\n      onClick: this.onUpdateMode,\n      style: {\n        cursor: modes.length === 1 ? '' : 'pointer'\n      }\n    }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')), h(NInputGroup, null, {\n      default: () => {\n        const {\n          mode,\n          valueArr,\n          showAlpha\n        } = this;\n        if (mode === 'hex') {\n          // hex and rgba shares the same value arr\n          let hexValue = null;\n          try {\n            hexValue = valueArr === null ? null : (showAlpha ? toHexaString : toHexString)(valueArr);\n          } catch (_a) {}\n          return h(ColorInputUnit, {\n            label: 'HEX',\n            showAlpha: showAlpha,\n            value: hexValue,\n            onUpdateValue: unitValue => {\n              this.handleUnitUpdateValue(0, unitValue);\n            }\n          });\n        }\n        return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => h(ColorInputUnit, {\n          label: v.toUpperCase(),\n          value: valueArr === null ? null : valueArr[i],\n          onUpdateValue: unitValue => {\n            this.handleUnitUpdateValue(i, unitValue);\n          }\n        }));\n      }\n    }));\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}