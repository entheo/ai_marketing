{"ast":null,"code":"import { defineComponent, inject, h, computed } from 'vue';\nimport { resolveSlotWithProps } from \"../../_utils/index.mjs\";\nimport { inputInjectionKey } from \"./interface.mjs\";\nimport { len } from \"./utils.mjs\";\nexport default defineComponent({\n  name: 'InputWordCount',\n  setup(_, {\n    slots\n  }) {\n    const {\n      mergedValueRef,\n      maxlengthRef,\n      mergedClsPrefixRef,\n      countGraphemesRef\n    } =\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    inject(inputInjectionKey);\n    const wordCountRef = computed(() => {\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (mergedValue === null || Array.isArray(mergedValue)) return 0;\n      return (countGraphemesRef.value || len)(mergedValue);\n    });\n    return () => {\n      const {\n        value: maxlength\n      } = maxlengthRef;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      return h(\"span\", {\n        class: `${mergedClsPrefixRef.value}-input-word-count`\n      }, resolveSlotWithProps(slots.default, {\n        value: mergedValue === null || Array.isArray(mergedValue) ? '' : mergedValue\n      }, () => [maxlength === undefined ? wordCountRef.value : `${wordCountRef.value} / ${maxlength}`]));\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","inject","h","computed","resolveSlotWithProps","inputInjectionKey","len","name","setup","_","slots","mergedValueRef","maxlengthRef","mergedClsPrefixRef","countGraphemesRef","wordCountRef","value","mergedValue","Array","isArray","maxlength","class","default","undefined"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/input/src/WordCount.mjs"],"sourcesContent":["import { defineComponent, inject, h, computed } from 'vue';\nimport { resolveSlotWithProps } from \"../../_utils/index.mjs\";\nimport { inputInjectionKey } from \"./interface.mjs\";\nimport { len } from \"./utils.mjs\";\nexport default defineComponent({\n  name: 'InputWordCount',\n  setup(_, {\n    slots\n  }) {\n    const {\n      mergedValueRef,\n      maxlengthRef,\n      mergedClsPrefixRef,\n      countGraphemesRef\n    } =\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    inject(inputInjectionKey);\n    const wordCountRef = computed(() => {\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (mergedValue === null || Array.isArray(mergedValue)) return 0;\n      return (countGraphemesRef.value || len)(mergedValue);\n    });\n    return () => {\n      const {\n        value: maxlength\n      } = maxlengthRef;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      return h(\"span\", {\n        class: `${mergedClsPrefixRef.value}-input-word-count`\n      }, resolveSlotWithProps(slots.default, {\n        value: mergedValue === null || Array.isArray(mergedValue) ? '' : mergedValue\n      }, () => [maxlength === undefined ? wordCountRef.value : `${wordCountRef.value} / ${maxlength}`]));\n    };\n  }\n});"],"mappings":"AAAA,SAASA,eAAe,EAAEC,MAAM,EAAEC,CAAC,EAAEC,QAAQ,QAAQ,KAAK;AAC1D,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,GAAG,QAAQ,aAAa;AACjC,eAAeN,eAAe,CAAC;EAC7BO,IAAI,EAAE,gBAAgB;EACtBC,KAAKA,CAACC,CAAC,EAAE;IACPC;EACF,CAAC,EAAE;IACD,MAAM;MACJC,cAAc;MACdC,YAAY;MACZC,kBAAkB;MAClBC;IACF,CAAC;IACD;IACAb,MAAM,CAACI,iBAAiB,CAAC;IACzB,MAAMU,YAAY,GAAGZ,QAAQ,CAAC,MAAM;MAClC,MAAM;QACJa,KAAK,EAAEC;MACT,CAAC,GAAGN,cAAc;MAClB,IAAIM,WAAW,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,EAAE,OAAO,CAAC;MAChE,OAAO,CAACH,iBAAiB,CAACE,KAAK,IAAIV,GAAG,EAAEW,WAAW,CAAC;IACtD,CAAC,CAAC;IACF,OAAO,MAAM;MACX,MAAM;QACJD,KAAK,EAAEI;MACT,CAAC,GAAGR,YAAY;MAChB,MAAM;QACJI,KAAK,EAAEC;MACT,CAAC,GAAGN,cAAc;MAClB,OAAOT,CAAC,CAAC,MAAM,EAAE;QACfmB,KAAK,EAAG,GAAER,kBAAkB,CAACG,KAAM;MACrC,CAAC,EAAEZ,oBAAoB,CAACM,KAAK,CAACY,OAAO,EAAE;QACrCN,KAAK,EAAEC,WAAW,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,GAAG,EAAE,GAAGA;MACnE,CAAC,EAAE,MAAM,CAACG,SAAS,KAAKG,SAAS,GAAGR,YAAY,CAACC,KAAK,GAAI,GAAED,YAAY,CAACC,KAAM,MAAKI,SAAU,EAAC,CAAC,CAAC,CAAC;IACpG,CAAC;EACH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}