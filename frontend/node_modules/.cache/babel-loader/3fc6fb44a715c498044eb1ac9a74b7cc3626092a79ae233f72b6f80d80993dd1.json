{"ast":null,"code":"import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { NCheckbox, NCheckboxGroup } from \"../../../checkbox/index.mjs\";\nimport { NRadio, NRadioGroup } from \"../../../radio/index.mjs\";\nimport { NButton } from \"../../../button/index.mjs\";\nimport { NScrollbar } from \"../../../_internal/index.mjs\";\nimport { shouldUseArrayInSingleMode } from \"../utils.mjs\";\nimport { dataTableInjectionKey } from \"../interface.mjs\";\nimport { useConfig, useRtl } from \"../../../_mixins/index.mjs\";\nexport default defineComponent({\n  name: 'DataTableFilterMenu',\n  props: {\n    column: {\n      type: Object,\n      required: true\n    },\n    radioGroupName: {\n      type: String,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      type: [Array, String, Number],\n      default: null\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    onConfirm: {\n      type: Function,\n      required: true\n    },\n    onClear: {\n      type: Function,\n      required: true\n    },\n    onChange: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      mergedClsPrefixRef: mergedClsPrefixRefRtl,\n      mergedRtlRef\n    } = useConfig(props);\n    const rtlEnabledRef = useRtl('DataTable', mergedRtlRef, mergedClsPrefixRefRtl);\n    const {\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      localeRef\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(dataTableInjectionKey);\n    // to be compared with changed value\n    // const initialValueRef = ref(props.value)\n    const temporalValueRef = ref(props.value);\n    const checkboxGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (!Array.isArray(temporalValue)) return null;\n      return temporalValue;\n    });\n    const radioGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (shouldUseArrayInSingleMode(props.column)) {\n        return Array.isArray(temporalValue) && temporalValue.length && temporalValue[0] || null;\n      }\n      if (!Array.isArray(temporalValue)) return temporalValue;\n      return null;\n    });\n    function doChange(value) {\n      // May need to check if equal\n      ;\n      props.onChange(value);\n    }\n    function handleChange(value) {\n      if (props.multiple && Array.isArray(value)) {\n        temporalValueRef.value = value;\n      } else if (shouldUseArrayInSingleMode(props.column) && !Array.isArray(value)) {\n        /** this branch is for compatibility */\n        temporalValueRef.value = [value];\n      } else {\n        temporalValueRef.value = value;\n      }\n    }\n    function handleConfirmClick() {\n      doChange(temporalValueRef.value);\n      props.onConfirm();\n    }\n    function handleClearClick() {\n      if (props.multiple || shouldUseArrayInSingleMode(props.column)) {\n        doChange([]);\n      } else {\n        doChange(null);\n      }\n      props.onClear();\n    }\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      rtlEnabled: rtlEnabledRef,\n      mergedTheme: mergedThemeRef,\n      locale: localeRef,\n      checkboxGroupValue: checkboxGroupValueRef,\n      radioGroupValue: radioGroupValueRef,\n      handleChange,\n      handleConfirmClick,\n      handleClearClick\n    };\n  },\n  render() {\n    const {\n      mergedTheme,\n      locale,\n      mergedClsPrefix\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-data-table-filter-menu`, this.rtlEnabled && `${mergedClsPrefix}-data-table-filter-menu--rtl`]\n    }, h(NScrollbar, null, {\n      default: () => {\n        const {\n          checkboxGroupValue,\n          handleChange\n        } = this;\n        return this.multiple ? h(NCheckboxGroup, {\n          value: checkboxGroupValue,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          onUpdateValue: handleChange\n        }, {\n          default: () => this.options.map(option => {\n            return h(NCheckbox, {\n              key: option.value,\n              theme: mergedTheme.peers.Checkbox,\n              themeOverrides: mergedTheme.peerOverrides.Checkbox,\n              value: option.value\n            }, {\n              default: () => option.label\n            });\n          })\n        }) : h(NRadioGroup, {\n          name: this.radioGroupName,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          value: this.radioGroupValue,\n          onUpdateValue: this.handleChange\n        }, {\n          default: () => this.options.map(option => h(NRadio, {\n            key: option.value,\n            value: option.value,\n            theme: mergedTheme.peers.Radio,\n            themeOverrides: mergedTheme.peerOverrides.Radio\n          }, {\n            default: () => option.label\n          }))\n        });\n      }\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-filter-menu__action`\n    }, h(NButton, {\n      size: \"tiny\",\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      onClick: this.handleClearClick\n    }, {\n      default: () => locale.clear\n    }), h(NButton, {\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      type: \"primary\",\n      size: \"tiny\",\n      onClick: this.handleConfirmClick\n    }, {\n      default: () => locale.confirm\n    })));\n  }\n});","map":{"version":3,"names":["h","defineComponent","ref","computed","inject","NCheckbox","NCheckboxGroup","NRadio","NRadioGroup","NButton","NScrollbar","shouldUseArrayInSingleMode","dataTableInjectionKey","useConfig","useRtl","name","props","column","type","Object","required","radioGroupName","String","multiple","Boolean","value","Array","Number","default","options","onConfirm","Function","onClear","onChange","setup","mergedClsPrefixRef","mergedClsPrefixRefRtl","mergedRtlRef","rtlEnabledRef","mergedThemeRef","localeRef","temporalValueRef","checkboxGroupValueRef","temporalValue","isArray","radioGroupValueRef","length","doChange","handleChange","handleConfirmClick","handleClearClick","mergedClsPrefix","rtlEnabled","mergedTheme","locale","checkboxGroupValue","radioGroupValue","render","class","onUpdateValue","map","option","key","theme","peers","Checkbox","themeOverrides","peerOverrides","label","Radio","size","Button","onClick","clear","confirm"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/data-table/src/HeaderButton/FilterMenu.mjs"],"sourcesContent":["import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { NCheckbox, NCheckboxGroup } from \"../../../checkbox/index.mjs\";\nimport { NRadio, NRadioGroup } from \"../../../radio/index.mjs\";\nimport { NButton } from \"../../../button/index.mjs\";\nimport { NScrollbar } from \"../../../_internal/index.mjs\";\nimport { shouldUseArrayInSingleMode } from \"../utils.mjs\";\nimport { dataTableInjectionKey } from \"../interface.mjs\";\nimport { useConfig, useRtl } from \"../../../_mixins/index.mjs\";\nexport default defineComponent({\n  name: 'DataTableFilterMenu',\n  props: {\n    column: {\n      type: Object,\n      required: true\n    },\n    radioGroupName: {\n      type: String,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      type: [Array, String, Number],\n      default: null\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    onConfirm: {\n      type: Function,\n      required: true\n    },\n    onClear: {\n      type: Function,\n      required: true\n    },\n    onChange: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      mergedClsPrefixRef: mergedClsPrefixRefRtl,\n      mergedRtlRef\n    } = useConfig(props);\n    const rtlEnabledRef = useRtl('DataTable', mergedRtlRef, mergedClsPrefixRefRtl);\n    const {\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      localeRef\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(dataTableInjectionKey);\n    // to be compared with changed value\n    // const initialValueRef = ref(props.value)\n    const temporalValueRef = ref(props.value);\n    const checkboxGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (!Array.isArray(temporalValue)) return null;\n      return temporalValue;\n    });\n    const radioGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (shouldUseArrayInSingleMode(props.column)) {\n        return Array.isArray(temporalValue) && temporalValue.length && temporalValue[0] || null;\n      }\n      if (!Array.isArray(temporalValue)) return temporalValue;\n      return null;\n    });\n    function doChange(value) {\n      // May need to check if equal\n      ;\n      props.onChange(value);\n    }\n    function handleChange(value) {\n      if (props.multiple && Array.isArray(value)) {\n        temporalValueRef.value = value;\n      } else if (shouldUseArrayInSingleMode(props.column) && !Array.isArray(value)) {\n        /** this branch is for compatibility */\n        temporalValueRef.value = [value];\n      } else {\n        temporalValueRef.value = value;\n      }\n    }\n    function handleConfirmClick() {\n      doChange(temporalValueRef.value);\n      props.onConfirm();\n    }\n    function handleClearClick() {\n      if (props.multiple || shouldUseArrayInSingleMode(props.column)) {\n        doChange([]);\n      } else {\n        doChange(null);\n      }\n      props.onClear();\n    }\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      rtlEnabled: rtlEnabledRef,\n      mergedTheme: mergedThemeRef,\n      locale: localeRef,\n      checkboxGroupValue: checkboxGroupValueRef,\n      radioGroupValue: radioGroupValueRef,\n      handleChange,\n      handleConfirmClick,\n      handleClearClick\n    };\n  },\n  render() {\n    const {\n      mergedTheme,\n      locale,\n      mergedClsPrefix\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-data-table-filter-menu`, this.rtlEnabled && `${mergedClsPrefix}-data-table-filter-menu--rtl`]\n    }, h(NScrollbar, null, {\n      default: () => {\n        const {\n          checkboxGroupValue,\n          handleChange\n        } = this;\n        return this.multiple ? h(NCheckboxGroup, {\n          value: checkboxGroupValue,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          onUpdateValue: handleChange\n        }, {\n          default: () => this.options.map(option => {\n            return h(NCheckbox, {\n              key: option.value,\n              theme: mergedTheme.peers.Checkbox,\n              themeOverrides: mergedTheme.peerOverrides.Checkbox,\n              value: option.value\n            }, {\n              default: () => option.label\n            });\n          })\n        }) : h(NRadioGroup, {\n          name: this.radioGroupName,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          value: this.radioGroupValue,\n          onUpdateValue: this.handleChange\n        }, {\n          default: () => this.options.map(option => h(NRadio, {\n            key: option.value,\n            value: option.value,\n            theme: mergedTheme.peers.Radio,\n            themeOverrides: mergedTheme.peerOverrides.Radio\n          }, {\n            default: () => option.label\n          }))\n        });\n      }\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-filter-menu__action`\n    }, h(NButton, {\n      size: \"tiny\",\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      onClick: this.handleClearClick\n    }, {\n      default: () => locale.clear\n    }), h(NButton, {\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      type: \"primary\",\n      size: \"tiny\",\n      onClick: this.handleConfirmClick\n    }, {\n      default: () => locale.confirm\n    })));\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}