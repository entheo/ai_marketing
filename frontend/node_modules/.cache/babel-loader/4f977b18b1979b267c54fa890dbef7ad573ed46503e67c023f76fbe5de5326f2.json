{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from '@/store';\n\n// 用于获取csrftoken的函数\nfunction getCsrfToken() {\n  let csrfToken = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.startsWith('csrftoken=')) {\n        csrfToken = decodeURIComponent(cookie.substring('csrftoken='.length));\n        break;\n      }\n    }\n  }\n  return csrfToken;\n}\nexport default {\n  name: 'HomePage',\n  setup() {\n    const authStore = useAuthStore();\n    console.log(authStore.isLoggedIn); // 访问状态\n    // 在组件加载时获取CSRF token\n    const csrfToken = ref(getCsrfToken());\n    const loginUsername = ref('');\n    const loginPassword = ref('');\n    const keepLoggedInForDays = ref('7'); // 默认设置为7天，通过select控件让用户可选择\n\n    const registerUsername = ref('');\n    const registerPassword = ref('');\n    const invitation = ref('');\n    const router = useRouter();\n    const handleLoginSubmit = () => {\n      // 使用loginUsername.value和loginPassword.value来构造发送数据\n      axios.post('http://localhost:8005/account/login/', {\n        username: loginUsername.value,\n        password: loginPassword.value,\n        keep_logged_in_for_days: keepLoggedInForDays.value // 添加这一行，从select控件取值\n      }, {\n        withCredentials: true,\n        // 确保发送请求时携带credentails（cookies等）\n        headers: {\n          'X-CSRFToken': csrfToken.value // 使用组件状态中的CSRF token\n        }\n      }).then(response => {\n        console.log(\"登录成功，用户名: \", loginUsername.value);\n        console.log(response);\n        authStore.logIn(response.data);\n        router.push('/dashboard');\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n    const handleRegisterSubmit = () => {\n      // 同上，构造包含用户名、密码和邀请码的对象来发送\n      axios.post('http://localhost:8005/account/register/', {\n        username: registerUsername.value,\n        password: registerPassword.value,\n        invitation_code: invitation.value // 假设后端接受的参数名为invitationCode\n      }, {\n        headers: {\n          'X-CSRFToken': getCsrfToken() // 同样在这里添加CSRF令牌\n        }\n      }).then(response => {\n        console.log(\"注册成功，用户名: \", registerUsername.value);\n        console.log(response);\n        router.push('/login');\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n    return {\n      loginUsername,\n      loginPassword,\n      keepLoggedInForDays,\n      registerUsername,\n      registerPassword,\n      invitation,\n      handleLoginSubmit,\n      handleRegisterSubmit,\n      csrfToken // 添加csrfToken到返回值中\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","useRouter","useAuthStore","getCsrfToken","csrfToken","document","cookie","cookies","split","i","length","trim","startsWith","decodeURIComponent","substring","name","setup","authStore","console","log","isLoggedIn","loginUsername","loginPassword","keepLoggedInForDays","registerUsername","registerPassword","invitation","router","handleLoginSubmit","post","username","value","password","keep_logged_in_for_days","withCredentials","headers","then","response","logIn","data","push","catch","err","handleRegisterSubmit","invitation_code"],"sources":["/Users/wangjohnson/ai_marketing/frontend/src/components/HomePage.vue"],"sourcesContent":["<!-- src/components/HomePage.vue -->\n<template>\n  <div>\n    <h1>欢迎来到我们的网站</h1>\n    <p>请登录以继续操作。</p>\n    <!-- 登录表单 -->\n    <form @submit.prevent=\"handleLoginSubmit\">\n      <input type=\"text\" v-model=\"loginUsername\" placeholder=\"用户名\" />\n      <input type=\"password\" v-model=\"loginPassword\" placeholder=\"密码\" />\n      <select v-model=\"keepLoggedInForDays\"> \n        <option value=\"7\">保持登录7天</option>\n      </select>\n      <button type=\"submit\">登录</button>\n    </form>\n\n\n    <!-- 注册表单 -->\n    <form @submit.prevent=\"handleRegisterSubmit\" class=\"register-form\">\n        <h2>注册</h2>\n        <input type=\"text\" v-model=\"registerUsername\" placeholder=\"用户名\" />\n        <input type=\"password\" v-model=\"registerPassword\" placeholder=\"密码\" />\n        <input type=\"text\" v-model=\"invitation\" placeholder=\"邀请码\" />\n        <button type=\"submit\">注册</button>\n      </form>\n  \n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from '@/store';\n\n// 用于获取csrftoken的函数\nfunction getCsrfToken() {\n  let csrfToken = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.startsWith('csrftoken=')) {\n        csrfToken = decodeURIComponent(cookie.substring('csrftoken='.length));\n        break;\n      }\n    }\n  }\n  return csrfToken;\n}\n\nexport default {\n  name: 'HomePage',\n  setup() {\n    const authStore = useAuthStore();\n    console.log(authStore.isLoggedIn); // 访问状态\n    // 在组件加载时获取CSRF token\n    const csrfToken = ref(getCsrfToken());\n    const loginUsername = ref('');\n    const loginPassword = ref('');\n    const keepLoggedInForDays = ref('7'); // 默认设置为7天，通过select控件让用户可选择\n\n    const registerUsername = ref('');\n    const registerPassword = ref('');\n    const invitation = ref('');\n\n    const router = useRouter();\n\n    const handleLoginSubmit = () => {\n    // 使用loginUsername.value和loginPassword.value来构造发送数据\n      axios.post('http://localhost:8005/account/login/', {\n        username: loginUsername.value,\n        password: loginPassword.value,\n        keep_logged_in_for_days: keepLoggedInForDays.value // 添加这一行，从select控件取值\n      },\n      {\n        withCredentials: true,  // 确保发送请求时携带credentails（cookies等）\n        headers: {\n          'X-CSRFToken': csrfToken.value,  // 使用组件状态中的CSRF token\n          }\n        })\n       \n      .then(response => {\n        console.log(\"登录成功，用户名: \", loginUsername.value);\n        console.log(response);\n        authStore.logIn(response.data);\n        router.push('/dashboard');\n        \n      })\n      .catch(err => {\n        console.log(err);\n      });\n    };\n\n    const handleRegisterSubmit = () => {\n    // 同上，构造包含用户名、密码和邀请码的对象来发送\n      axios.post('http://localhost:8005/account/register/', {\n        username: registerUsername.value,\n        password: registerPassword.value,\n        invitation_code: invitation.value // 假设后端接受的参数名为invitationCode\n      },\n      { \n        headers: {\n          'X-CSRFToken': getCsrfToken(), // 同样在这里添加CSRF令牌\n        }\n      })\n      .then(response => {\n        console.log(\"注册成功，用户名: \", registerUsername.value);\n        console.log(response)\n        router.push('/login');\n\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    };\n    \n    return {\n      loginUsername,\n      loginPassword,\n      keepLoggedInForDays,\n      registerUsername,\n      registerPassword,\n      invitation,\n      handleLoginSubmit,\n      handleRegisterSubmit,\n      csrfToken, // 添加csrfToken到返回值中\n    };\n  },\n};\n</script>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}