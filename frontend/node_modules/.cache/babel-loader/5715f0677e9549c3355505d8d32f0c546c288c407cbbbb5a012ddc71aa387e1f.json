{"ast":null,"code":"import { h, defineComponent, ref, inject } from 'vue';\nimport { render } from \"../../_utils/index.mjs\";\nimport { treeInjectionKey } from \"./interface.mjs\";\nexport default defineComponent({\n  name: 'TreeNodeContent',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    disabled: Boolean,\n    checked: Boolean,\n    selected: Boolean,\n    onClick: Function,\n    onDragstart: Function,\n    tmNode: {\n      type: Object,\n      required: true\n    },\n    nodeProps: Object\n  },\n  setup(props) {\n    const {\n      renderLabelRef,\n      renderPrefixRef,\n      renderSuffixRef,\n      labelFieldRef\n    } =\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    inject(treeInjectionKey);\n    const selfRef = ref(null);\n    function doClick(e) {\n      const {\n        onClick\n      } = props;\n      if (onClick) onClick(e);\n    }\n    function handleClick(e) {\n      doClick(e);\n    }\n    return {\n      selfRef,\n      renderLabel: renderLabelRef,\n      renderPrefix: renderPrefixRef,\n      renderSuffix: renderSuffixRef,\n      labelField: labelFieldRef,\n      handleClick\n    };\n  },\n  render() {\n    const {\n      clsPrefix,\n      labelField,\n      nodeProps,\n      checked = false,\n      selected = false,\n      renderLabel,\n      renderPrefix,\n      renderSuffix,\n      handleClick,\n      onDragstart,\n      tmNode: {\n        rawNode,\n        rawNode: {\n          prefix,\n          suffix,\n          [labelField]: label\n        }\n      }\n    } = this;\n    return h(\"span\", Object.assign({}, nodeProps, {\n      ref: \"selfRef\",\n      class: [`${clsPrefix}-tree-node-content`, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      onClick: handleClick,\n      draggable: onDragstart === undefined ? undefined : true,\n      onDragstart: onDragstart\n    }), renderPrefix || prefix ? h(\"div\", {\n      class: `${clsPrefix}-tree-node-content__prefix`\n    }, renderPrefix ? renderPrefix({\n      option: rawNode,\n      selected,\n      checked\n    }) : render(prefix)) : null, h(\"div\", {\n      class: `${clsPrefix}-tree-node-content__text`\n    }, renderLabel ? renderLabel({\n      option: rawNode,\n      selected,\n      checked\n    }) : render(label)), renderSuffix || suffix ? h(\"div\", {\n      class: `${clsPrefix}-tree-node-content__suffix`\n    }, renderSuffix ? renderSuffix({\n      option: rawNode,\n      selected,\n      checked\n    }) : render(suffix)) : null);\n  }\n});","map":{"version":3,"names":["h","defineComponent","ref","inject","render","treeInjectionKey","name","props","clsPrefix","type","String","required","disabled","Boolean","checked","selected","onClick","Function","onDragstart","tmNode","Object","nodeProps","setup","renderLabelRef","renderPrefixRef","renderSuffixRef","labelFieldRef","selfRef","doClick","e","handleClick","renderLabel","renderPrefix","renderSuffix","labelField","rawNode","prefix","suffix","label","assign","class","draggable","undefined","option"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/tree/src/TreeNodeContent.mjs"],"sourcesContent":["import { h, defineComponent, ref, inject } from 'vue';\nimport { render } from \"../../_utils/index.mjs\";\nimport { treeInjectionKey } from \"./interface.mjs\";\nexport default defineComponent({\n  name: 'TreeNodeContent',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    disabled: Boolean,\n    checked: Boolean,\n    selected: Boolean,\n    onClick: Function,\n    onDragstart: Function,\n    tmNode: {\n      type: Object,\n      required: true\n    },\n    nodeProps: Object\n  },\n  setup(props) {\n    const {\n      renderLabelRef,\n      renderPrefixRef,\n      renderSuffixRef,\n      labelFieldRef\n    } =\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    inject(treeInjectionKey);\n    const selfRef = ref(null);\n    function doClick(e) {\n      const {\n        onClick\n      } = props;\n      if (onClick) onClick(e);\n    }\n    function handleClick(e) {\n      doClick(e);\n    }\n    return {\n      selfRef,\n      renderLabel: renderLabelRef,\n      renderPrefix: renderPrefixRef,\n      renderSuffix: renderSuffixRef,\n      labelField: labelFieldRef,\n      handleClick\n    };\n  },\n  render() {\n    const {\n      clsPrefix,\n      labelField,\n      nodeProps,\n      checked = false,\n      selected = false,\n      renderLabel,\n      renderPrefix,\n      renderSuffix,\n      handleClick,\n      onDragstart,\n      tmNode: {\n        rawNode,\n        rawNode: {\n          prefix,\n          suffix,\n          [labelField]: label\n        }\n      }\n    } = this;\n    return h(\"span\", Object.assign({}, nodeProps, {\n      ref: \"selfRef\",\n      class: [`${clsPrefix}-tree-node-content`, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      onClick: handleClick,\n      draggable: onDragstart === undefined ? undefined : true,\n      onDragstart: onDragstart\n    }), renderPrefix || prefix ? h(\"div\", {\n      class: `${clsPrefix}-tree-node-content__prefix`\n    }, renderPrefix ? renderPrefix({\n      option: rawNode,\n      selected,\n      checked\n    }) : render(prefix)) : null, h(\"div\", {\n      class: `${clsPrefix}-tree-node-content__text`\n    }, renderLabel ? renderLabel({\n      option: rawNode,\n      selected,\n      checked\n    }) : render(label)), renderSuffix || suffix ? h(\"div\", {\n      class: `${clsPrefix}-tree-node-content__suffix`\n    }, renderSuffix ? renderSuffix({\n      option: rawNode,\n      selected,\n      checked\n    }) : render(suffix)) : null);\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}