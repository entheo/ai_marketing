{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NFormItem, NFormItemRow, NForm, NButton, NInput } from 'naive-ui';\nimport { ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from 'axios';\n\n//注册表单操作\n\nexport default {\n  __name: 'RegisterForm',\n  setup(__props, {\n    expose: __expose\n  }) {\n    const registerUsername = ref('');\n    const registerPassword = ref('');\n    //const registerRePassword=ref('');\n    const invitationCode = ref('');\n    const router = useRoute();\n    const registeredNextPath = ref('');\n    const register = async () => {\n      try {\n        const response = axios.post('/account/register/', {\n          username: registerUsername,\n          password: registerPassword,\n          invitation_code: invitationCode\n        }, {\n          headers: {\n            //'X-CSRFToken': csrfToken.value,\n          }\n        });\n        console.log(response);\n        console.log('注册成功！');\n        await router.push(registeredNextPath.value);\n      } catch (err) {\n        console.log('注册失败:', err);\n      }\n    };\n\n    //密码验证\n    /*\n    const formRef = ref(null);\n    \n    const model = ref({\n          password: '',\n          reenteredPassword: ''\n        });\n    \n    const validatePasswordStartWith=(rule, value)=> {\n          console.log(value);\n          return !!model.value.password && model.value.password.startsWith(value) && model.value.password.length >= value.length;};\n    const validatePasswordSame=(rule, value)=> {\n          console.log(value);\n          return value === model.value.password;\n        };\n    const rules = {\n        password: [\n            {\n              required: true,\n              message: \"请输入密码\"\n            }\n          ],\n          reenteredPassword: [\n            {\n              required: true,\n              message: \"请再次输入密码\",\n              trigger: [\"input\", \"blur\"]\n            },\n            {\n              validator: validatePasswordStartWith,\n              message: \"两次密码输入不一致\",\n              trigger: \"input\"\n            },\n            {\n              validator: validatePasswordSame,\n              message: \"两次密码输入不一致\",\n              trigger: [\"blur\", \"input\"]\n            }\n          ]\n        };\n    const handlePasswordInput=()=> {\n            if (model.value.reenteredPassword) {\n              rPasswordFormItemRef.value?.validate({ trigger: \"input\" });\n            }\n          };\n    \n    */\n\n    const formRef = ref(null);\n    const rPasswordFormItemRef = ref(null);\n\n    // 响应式表单数据\n    const modelRef = ref({\n      password: '',\n      reenteredPassword: ''\n    });\n\n    //表单验证规则\n    const rules = {\n      password: [{\n        required: true,\n        message: \"请输入密码\",\n        trigger: [\"blur\", \"input\"]\n      }],\n      reenteredPassword: [{\n        required: true,\n        message: \"请再次输入密码\",\n        trigger: [\"input\", \"blur\"]\n      }, {\n        validator: validatePasswordSame,\n        message: \"两次密码输入不一致\",\n        trigger: [\"blur\", \"input\"]\n      }]\n    };\n    function validatePasswordSame(rule, value) {\n      try {\n        return value === modelRef.value.password;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    const handlePasswordInput = () => {\n      if (modelRef.value.reenteredPassword) {\n        console.log(rPasswordFormItemRef.value.validate({\n          trigger: 'input'\n        }));\n        //rPasswordFormItemRef.value?.validate({ trigger: \"input\" });\n      }\n    };\n    __expose({\n      register\n    });\n    const __returned__ = {\n      registerUsername,\n      registerPassword,\n      invitationCode,\n      router,\n      registeredNextPath,\n      register,\n      formRef,\n      rPasswordFormItemRef,\n      modelRef,\n      rules,\n      validatePasswordSame,\n      handlePasswordInput,\n      get NFormItem() {\n        return NFormItem;\n      },\n      get NFormItemRow() {\n        return NFormItemRow;\n      },\n      get NForm() {\n        return NForm;\n      },\n      get NButton() {\n        return NButton;\n      },\n      get NInput() {\n        return NInput;\n      },\n      ref,\n      get useRoute() {\n        return useRoute;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["NFormItem","NFormItemRow","NForm","NButton","NInput","ref","useRoute","axios","registerUsername","registerPassword","invitationCode","router","registeredNextPath","register","response","post","username","password","invitation_code","headers","console","log","push","value","err","formRef","rPasswordFormItemRef","modelRef","reenteredPassword","rules","required","message","trigger","validator","validatePasswordSame","rule","handlePasswordInput","validate","__expose"],"sources":["/Users/wangjohnson/ai_marketing/frontend/src/components/RegisterForm.vue"],"sourcesContent":["<template>\n    <n-form ref=\"formRef\" :rules=\"rules\"  :model=\"modelRef\">\n        <n-form-item-row label=\"用户名\">\n            <n-input v-model:value=\"registerUsername\" placeholder=\"\" />\n        </n-form-item-row>\n        \n        <!--\n        <n-form-item-row label=\"密码\" :feedback=\"validateInfos.password>\n            <n-input v-model:value=\"registerPassword\" placeholder=\"\"/>\n        </n-form-item-row>\n          \n        <n-form-item-row label=\"重复密码\">\n            //<n-input passively-activated @input=\"checkRePassword\" v-model:value=\"rePassword\" placeholder=\"\"/>\n            <n-input\n                v-model:value=\"rePassword\"\n                :disabled=\"!model.password\"\n                type=\"password\"\n                @keydown.enter.prevent/>\n        </n-form-item-row>\n         -->\n         \n         \n         <!--验证模块-->\n\n        <n-form-item path=\"password\" label=\"密码\">\n          <n-input\n            v-model:value=\"modelRef.password\"\n            type=\"password\"\n            @input=\"handlePasswordInput\"\n            @keydown.enter.prevent/>\n        </n-form-item>\n    \n        <n-form-item\n          ref=\"rPasswordFormItemRef\"\n          first\n          path=\"reenteredPassword\"\n          label=\"重复密码\">\n\n          <n-input\n            v-model:value=\"modelRef.reenteredPassword\"\n            :disabled=\"!modelRef.password\"\n            type=\"password\"\n            @keydown.enter.prevent/>\n\n        </n-form-item>\n\n\n\n\n\n\n        <n-form-item-row label=\"邀请码\">\n            <n-input v-model:value=\"invitation_code\" placeholder=\"\"/>\n        </n-form-item-row>\n        \n    </n-form>\n    <n-button @click=\"register\" type=\"primary\" block secondary strong>\n          注册\n    </n-button>\n\n<pre>{{ JSON.stringify(modelRef, null, 2) }}\n</pre>\n</template>\n\n\n<script setup>\nimport {NFormItem,NFormItemRow,NForm,NButton,NInput} from 'naive-ui';\nimport {ref,defineExpose} from 'vue';\nimport {useRoute} from 'vue-router';\nimport axios from 'axios';\n\n//注册表单操作\nconst registerUsername=ref('');\nconst registerPassword=ref('');\n//const registerRePassword=ref('');\nconst invitationCode = ref('');\nconst router=useRoute();\nconst registeredNextPath = ref('');\n\nconst register=async()=>{\n    try{\n      const response = axios.post('/account/register/',\n      {\n        username:registerUsername,\n        password:registerPassword,\n        invitation_code:invitationCode,\n        },\n      {\n            headers:{\n                //'X-CSRFToken': csrfToken.value,\n                }\n      });\n      console.log(response);\n      console.log('注册成功！');\n      await router.push(registeredNextPath.value);\n    }\n    catch(err){\n        console.log('注册失败:',err)}\n    \n }\n\n//密码验证\n/*\nconst formRef = ref(null);\n\nconst model = ref({\n      password: '',\n      reenteredPassword: ''\n    });\n\nconst validatePasswordStartWith=(rule, value)=> {\n      console.log(value);\n      return !!model.value.password && model.value.password.startsWith(value) && model.value.password.length >= value.length;};\nconst validatePasswordSame=(rule, value)=> {\n      console.log(value);\n      return value === model.value.password;\n    };\nconst rules = {\n    password: [\n        {\n          required: true,\n          message: \"请输入密码\"\n        }\n      ],\n      reenteredPassword: [\n        {\n          required: true,\n          message: \"请再次输入密码\",\n          trigger: [\"input\", \"blur\"]\n        },\n        {\n          validator: validatePasswordStartWith,\n          message: \"两次密码输入不一致\",\n          trigger: \"input\"\n        },\n        {\n          validator: validatePasswordSame,\n          message: \"两次密码输入不一致\",\n          trigger: [\"blur\", \"input\"]\n        }\n      ]\n    };\nconst handlePasswordInput=()=> {\n        if (model.value.reenteredPassword) {\n          rPasswordFormItemRef.value?.validate({ trigger: \"input\" });\n        }\n      };\n\n*/\n\nconst formRef = ref(null);\nconst rPasswordFormItemRef = ref(null);\n\n// 响应式表单数据\nconst modelRef = ref({\n  password: '',\n  reenteredPassword: '',\n});\n\n//表单验证规则\nconst rules = {\n  password: [\n    {\n      required: true,\n      message: \"请输入密码\",\n      trigger:[\"blur\",\"input\"]\n    }\n  ],\n  reenteredPassword: [\n    {\n      required: true,\n      message: \"请再次输入密码\",\n      trigger: [\"input\", \"blur\"]\n    },\n    \n    {\n      validator: validatePasswordSame,\n      message: \"两次密码输入不一致\",\n      trigger: [\"blur\", \"input\"]\n    }\n  ]\n};\n\n\n\nfunction validatePasswordSame(rule, value) {\n  try{\n  return value === modelRef.value.password;\n  }catch(err){\n      console.log(err)}\n  \n  }\n\n\n\nconst handlePasswordInput=()=> {\n  if (modelRef.value.reenteredPassword) {\n     console.log(rPasswordFormItemRef.value.validate({trigger:'input'}));\n    //rPasswordFormItemRef.value?.validate({ trigger: \"input\" });\n  }\n}\n\n\ndefineExpose({register});\n</script>\n\n<style>\n.n-input{\n    text-align:left}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}