{"ast":null,"code":"import { useStore } from 'vuex';\n//import { useRouter } from 'vue-router';\nimport LoginForm from './LoginForm.vue';\nimport { NGrid, NGridItem } from 'naive-ui';\n\n// 用于获取csrftoken的函数\n/*\nfunction getCsrfToken() {\n  return document.cookie.split('; ')\n    .find(row => row.startsWith('csrftoken'))\n    ?.split('=')[1];\n}*/\n\nexport default {\n  __name: 'HomePage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n\n    //import axios from 'axios';\n    //import { ref } from 'vue';\n    const authStore = useStore();\n    console.log(authStore.getters.isLoggedIn); // 使用getters来访问状态\n    // 在组件加载时获取CSRF token\n    //const csrfToken = ref(getCsrfToken());\n    /*\n    const registerUsername = ref('');\n    const registerPassword = ref('');\n    const invitation = ref('');\n    const router = useRouter();\n    const handleRegisterSubmit = async () => {\n          try{\n              const response = await axios.post('/account/register/', {\n                username: registerUsername.value,\n                password: registerPassword.value,\n                invitation_code: invitation.value\n              },\n              {\n              headers: {\n                'X-CSRFToken': csrfToken.value,\n                }\n              });\n              console.log(response);\n              console.log(\"注册成功，用户名: \", registerUsername.value);\n              await router.push('/login');\n              }\n         catch (err) {\n                console.log(err);\n               }\n           };\n    */\n    /*\n    export default {\n      name: 'HomePage',\n      setup() {\n        const authStore = useStore();\n        console.log(authStore.getters.isLoggedIn); // 使用getters来访问状态\n        // 在组件加载时获取CSRF token\n        const csrfToken = ref(getCsrfToken());\n        const loginUsername = ref('');\n        const loginPassword = ref('');\n        const keepLoggedInForDays = ref('7'); // 默认设置为7天，通过select控件让用户可选择\n    \n        const registerUsername = ref('');\n        const registerPassword = ref('');\n        const invitation = ref('');\n    \n        const router = useRouter();\n    \n        const handleLoginSubmit = async () => {\n          try{\n              console.log(loginUsername.value);\n              console.log(loginPassword.value);\n              const response = await axios.post('/account/login/', {\n                username: loginUsername.value,\n                password: loginPassword.value,\n                keep_logged_in_for_days: keepLoggedInForDays.value\n              },\n             {\n                withCredentials: true,\n                headers: {\n                'X-CSRFToken': csrfToken.value,\n              }\n            });\n    \n             console.log(\"登录成功，用户名: \", loginUsername.value);\n             const token = response.data.token.access;\n             const user = response.data.username;\n             const csrf_token = response.data.csrf_token;\n             console.log('csrf_token:');\n             console.log(csrf_token);\n             localStorage.setItem('token', token);\n             await authStore.commit('auth_success', { token, user });\n             await router.push('/dashboard');\n              }\n          catch (err) {\n              console.log(err);\n              }\n            };\n           \n    \n        const handleRegisterSubmit = async () => {\n          try{\n              const response = await axios.post('/account/register/', {\n                username: registerUsername.value,\n                password: registerPassword.value,\n                invitation_code: invitation.value\n              },\n              {\n              headers: {\n                'X-CSRFToken': csrfToken.value,\n                }\n              });\n              console.log(response);\n              console.log(\"注册成功，用户名: \", registerUsername.value);\n              await router.push('/login');\n              }\n         catch (err) {\n                console.log(err);\n               }\n           };\n    \n        return {\n          loginUsername,\n          loginPassword,\n          keepLoggedInForDays,\n          registerUsername,\n          registerPassword,\n          invitation,\n          handleLoginSubmit,\n          handleRegisterSubmit,\n          csrfToken, // 添加csrfToken到返回值中\n          LoginForm,\n        };\n      },\n    };\n    */\n\n    const __returned__ = {\n      authStore,\n      get useStore() {\n        return useStore;\n      },\n      LoginForm,\n      get NGrid() {\n        return NGrid;\n      },\n      get NGridItem() {\n        return NGridItem;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["useStore","LoginForm","NGrid","NGridItem","authStore","console","log","getters","isLoggedIn"],"sources":["/Users/wangjohnson/ai_marketing/frontend/src/components/HomePage.vue"],"sourcesContent":["<!-- src/components/HomePage.vue -->\n<template>\n  <div>\n\n    <div class='brand'>\n      <h1>步步为营</h1>\n    </div>\n    \n    <div class='slogan'>\n      <p>一款仅为追求营销效果的你提供脚手架的AI助理</p>\n    </div>\n   \n\n    <!-- 登录表单 -->\n    <n-grid class=\"login\" cols=\"2 s:2 m:2 l:8 xl:8 2xl:8\" responsive=\"screen\">\n      <n-grid-item span=2 :offset=3>\n        <login-form/>\n      </n-grid-item>\n    </n-grid>\n   \n    \n    <!--\n    <form @submit.prevent=\"handleLoginSubmit\">\n      <input type=\"text\" v-model=\"loginUsername\" placeholder=\"用户名\" />\n      <input type=\"password\" v-model=\"loginPassword\" placeholder=\"密码\" />\n      <select v-model=\"keepLoggedInForDays\"> \n        <option value=\"7\">保持登录7天</option>\n      </select>\n      <button type=\"submit\">登录</button>\n    </form>\n    -->\n    \n    \n    <!-- 注册表单 -->\n    <!--\n    <form @submit.prevent=\"handleRegisterSubmit\" class=\"register-form\">\n        <h2>注册</h2>\n        <input type=\"text\" v-model=\"registerUsername\" placeholder=\"用户名\" />\n        <input type=\"password\" v-model=\"registerPassword\" placeholder=\"密码\" />\n        <input type=\"text\" v-model=\"invitation\" placeholder=\"邀请码\" />\n        <button type=\"submit\">注册</button>\n      </form>\n    -->\n\n  </div>\n</template>\n\n<script setup>\n//import axios from 'axios';\n//import { ref } from 'vue';\nimport { useStore } from 'vuex';\n//import { useRouter } from 'vue-router';\nimport LoginForm from './LoginForm.vue';\nimport {NGrid,NGridItem} from 'naive-ui';\n\n// 用于获取csrftoken的函数\n/*\nfunction getCsrfToken() {\n  return document.cookie.split('; ')\n    .find(row => row.startsWith('csrftoken'))\n    ?.split('=')[1];\n}*/\n\nconst authStore = useStore();\nconsole.log(authStore.getters.isLoggedIn); // 使用getters来访问状态\n// 在组件加载时获取CSRF token\n//const csrfToken = ref(getCsrfToken());\n/*\nconst registerUsername = ref('');\nconst registerPassword = ref('');\nconst invitation = ref('');\nconst router = useRouter();\nconst handleRegisterSubmit = async () => {\n      try{\n          const response = await axios.post('/account/register/', {\n            username: registerUsername.value,\n            password: registerPassword.value,\n            invitation_code: invitation.value\n          },\n          {\n          headers: {\n            'X-CSRFToken': csrfToken.value,\n            }\n          });\n          console.log(response);\n          console.log(\"注册成功，用户名: \", registerUsername.value);\n          await router.push('/login');\n          }\n     catch (err) {\n            console.log(err);\n           }\n       };\n*/\n/*\nexport default {\n  name: 'HomePage',\n  setup() {\n    const authStore = useStore();\n    console.log(authStore.getters.isLoggedIn); // 使用getters来访问状态\n    // 在组件加载时获取CSRF token\n    const csrfToken = ref(getCsrfToken());\n    const loginUsername = ref('');\n    const loginPassword = ref('');\n    const keepLoggedInForDays = ref('7'); // 默认设置为7天，通过select控件让用户可选择\n\n    const registerUsername = ref('');\n    const registerPassword = ref('');\n    const invitation = ref('');\n\n    const router = useRouter();\n\n    const handleLoginSubmit = async () => {\n      try{\n          console.log(loginUsername.value);\n          console.log(loginPassword.value);\n          const response = await axios.post('/account/login/', {\n            username: loginUsername.value,\n            password: loginPassword.value,\n            keep_logged_in_for_days: keepLoggedInForDays.value\n          },\n         {\n            withCredentials: true,\n            headers: {\n            'X-CSRFToken': csrfToken.value,\n          }\n        });\n\n         console.log(\"登录成功，用户名: \", loginUsername.value);\n         const token = response.data.token.access;\n         const user = response.data.username;\n         const csrf_token = response.data.csrf_token;\n         console.log('csrf_token:');\n         console.log(csrf_token);\n         localStorage.setItem('token', token);\n         await authStore.commit('auth_success', { token, user });\n         await router.push('/dashboard');\n          }\n      catch (err) {\n          console.log(err);\n          }\n        };\n       \n\n    const handleRegisterSubmit = async () => {\n      try{\n          const response = await axios.post('/account/register/', {\n            username: registerUsername.value,\n            password: registerPassword.value,\n            invitation_code: invitation.value\n          },\n          {\n          headers: {\n            'X-CSRFToken': csrfToken.value,\n            }\n          });\n          console.log(response);\n          console.log(\"注册成功，用户名: \", registerUsername.value);\n          await router.push('/login');\n          }\n     catch (err) {\n            console.log(err);\n           }\n       };\n\n    return {\n      loginUsername,\n      loginPassword,\n      keepLoggedInForDays,\n      registerUsername,\n      registerPassword,\n      invitation,\n      handleLoginSubmit,\n      handleRegisterSubmit,\n      csrfToken, // 添加csrfToken到返回值中\n      LoginForm,\n    };\n  },\n};\n*/\n</script>\n\n<style>\n.brand{\n    margin-top:3em;\n    font-size:3em;\n    }\n.slogan{\n    margin-top:-2em;\n    font-size:1.2em}\n.login{\n    margin-top:3em;}\n.card-tabs .n-tabs-nav--bar-type {\n  padding-left: 4px;\n}\n</style>\n"],"mappings":"AAkDA,SAASA,QAAQ,QAAQ,MAAM;AAC/B;AACA,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAAQC,KAAK,EAACC,SAAS,QAAO,UAAU;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;IAbA;IACA;IAcignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}