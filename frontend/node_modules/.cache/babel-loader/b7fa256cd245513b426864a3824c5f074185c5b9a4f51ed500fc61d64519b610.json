{"ast":null,"code":"import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from \"../../_mixins/index.mjs\";\nimport { formatLength, call, warn, useReactivated } from \"../../_utils/index.mjs\";\nimport { NScrollbar } from \"../../_internal/index.mjs\";\nimport { layoutLight } from \"../styles/index.mjs\";\nimport style from \"./styles/layout-sider.cssr.mjs\";\nimport ToggleButton from \"./ToggleButton.mjs\";\nimport ToggleBar from \"./ToggleBar.mjs\";\nimport { layoutSiderInjectionKey, positionProp } from \"./interface.mjs\";\nimport { layoutInjectionKey } from \"./Layout.mjs\";\nexport const layoutSiderProps = {\n  position: positionProp,\n  bordered: Boolean,\n  collapsedWidth: {\n    type: Number,\n    default: 48\n  },\n  width: {\n    type: [Number, String],\n    default: 272\n  },\n  contentClass: String,\n  contentStyle: {\n    type: [String, Object],\n    default: ''\n  },\n  collapseMode: {\n    type: String,\n    default: 'transform'\n  },\n  collapsed: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultCollapsed: Boolean,\n  showCollapsedContent: {\n    type: Boolean,\n    default: true\n  },\n  showTrigger: {\n    type: [Boolean, String],\n    default: false\n  },\n  nativeScrollbar: {\n    type: Boolean,\n    default: true\n  },\n  inverted: Boolean,\n  scrollbarProps: Object,\n  triggerClass: String,\n  triggerStyle: [String, Object],\n  collapsedTriggerClass: String,\n  collapsedTriggerStyle: [String, Object],\n  'onUpdate:collapsed': [Function, Array],\n  onUpdateCollapsed: [Function, Array],\n  onAfterEnter: Function,\n  onAfterLeave: Function,\n  // deprecated\n  onExpand: [Function, Array],\n  onCollapse: [Function, Array],\n  onScroll: Function\n};\nexport default defineComponent({\n  name: 'LayoutSider',\n  props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n  setup(props) {\n    const layoutProps = inject(layoutInjectionKey);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!layoutProps) {\n        warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n      } else {\n        if (!layoutProps.hasSider) {\n          warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n        }\n      }\n    }\n    const scrollableElRef = ref(null);\n    const scrollbarInstRef = ref(null);\n    const styleMaxWidthRef = computed(() => {\n      return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n    });\n    const scrollContainerStyleRef = computed(() => {\n      if (props.collapseMode !== 'transform') return {};\n      return {\n        minWidth: formatLength(props.width)\n      };\n    });\n    const siderPlacementRef = computed(() => {\n      return layoutProps ? layoutProps.siderPlacement : 'left';\n    });\n    const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n    const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n    function scrollTo(options, y) {\n      if (props.nativeScrollbar) {\n        const {\n          value: scrollableEl\n        } = scrollableElRef;\n        if (scrollableEl) {\n          if (y === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            scrollableEl.scrollTo(options);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            scrollableEl.scrollTo(options, y);\n          }\n        }\n      } else {\n        const {\n          value: scrollbarInst\n        } = scrollbarInstRef;\n        if (scrollbarInst) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          scrollbarInst.scrollTo(options, y);\n        }\n      }\n    }\n    function handleTriggerClick() {\n      const {\n        'onUpdate:collapsed': _onUpdateCollapsed,\n        onUpdateCollapsed,\n        // deprecated\n        onExpand,\n        onCollapse\n      } = props;\n      const {\n        value: collapsed\n      } = mergedCollapsedRef;\n      if (onUpdateCollapsed) {\n        call(onUpdateCollapsed, !collapsed);\n      }\n      if (_onUpdateCollapsed) {\n        call(_onUpdateCollapsed, !collapsed);\n      }\n      uncontrolledCollapsedRef.value = !collapsed;\n      if (collapsed) {\n        if (onExpand) call(onExpand);\n      } else {\n        if (onCollapse) call(onCollapse);\n      }\n    }\n    let scrollX = 0;\n    let scrollY = 0;\n    const handleNativeElScroll = e => {\n      var _a;\n      const target = e.target;\n      scrollX = target.scrollLeft;\n      scrollY = target.scrollTop;\n      (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    };\n    useReactivated(() => {\n      if (props.nativeScrollbar) {\n        const el = scrollableElRef.value;\n        if (el) {\n          el.scrollTop = scrollY;\n          el.scrollLeft = scrollX;\n        }\n      }\n    });\n    provide(layoutSiderInjectionKey, {\n      collapsedRef: mergedCollapsedRef,\n      collapseModeRef: toRef(props, 'collapseMode')\n    });\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n    function handleTransitionend(e) {\n      var _a, _b;\n      if (e.propertyName === 'max-width') {\n        if (mergedCollapsedRef.value) {\n          (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n        } else {\n          (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n      }\n    }\n    const exposedMethods = {\n      scrollTo\n    };\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self\n      } = themeRef.value;\n      const {\n        siderToggleButtonColor,\n        siderToggleButtonBorder,\n        siderToggleBarColor,\n        siderToggleBarColorHover\n      } = self;\n      const vars = {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-toggle-button-color': siderToggleButtonColor,\n        '--n-toggle-button-border': siderToggleButtonBorder,\n        '--n-toggle-bar-color': siderToggleBarColor,\n        '--n-toggle-bar-color-hover': siderToggleBarColorHover\n      };\n      if (props.inverted) {\n        vars['--n-color'] = self.siderColorInverted;\n        vars['--n-text-color'] = self.textColorInverted;\n        vars['--n-border-color'] = self.siderBorderColorInverted;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColorInverted;\n        vars.__invertScrollbar = self.__invertScrollbar;\n      } else {\n        vars['--n-color'] = self.siderColor;\n        vars['--n-text-color'] = self.textColor;\n        vars['--n-border-color'] = self.siderBorderColor;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n      }\n      return vars;\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('layout-sider', computed(() => props.inverted ? 'a' : 'b'), cssVarsRef, props) : undefined;\n    return Object.assign({\n      scrollableElRef,\n      scrollbarInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: themeRef,\n      styleMaxWidth: styleMaxWidthRef,\n      mergedCollapsed: mergedCollapsedRef,\n      scrollContainerStyle: scrollContainerStyleRef,\n      siderPlacement: siderPlacementRef,\n      handleNativeElScroll,\n      handleTransitionend,\n      handleTriggerClick,\n      inlineThemeDisabled,\n      cssVars: cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    }, exposedMethods);\n  },\n  render() {\n    var _a;\n    const {\n      mergedClsPrefix,\n      mergedCollapsed,\n      showTrigger\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"aside\", {\n      class: [`${mergedClsPrefix}-layout-sider`, this.themeClass, `${mergedClsPrefix}-layout-sider--${this.position}-positioned`, `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`, this.bordered && `${mergedClsPrefix}-layout-sider--bordered`, mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`, (!mergedCollapsed || this.showCollapsedContent) && `${mergedClsPrefix}-layout-sider--show-content`],\n      onTransitionend: this.handleTransitionend,\n      style: [this.inlineThemeDisabled ? undefined : this.cssVars, {\n        maxWidth: this.styleMaxWidth,\n        width: formatLength(this.width)\n      }]\n    }, !this.nativeScrollbar ? h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      onScroll: this.onScroll,\n      ref: \"scrollbarInstRef\",\n      style: this.scrollContainerStyle,\n      contentStyle: this.contentStyle,\n      contentClass: this.contentClass,\n      theme: this.mergedTheme.peers.Scrollbar,\n      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,\n      // here is a hack, since in light theme the scrollbar color is dark,\n      // we need to invert it in light color...\n      builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true' ? {\n        colorHover: 'rgba(255, 255, 255, .4)',\n        color: 'rgba(255, 255, 255, .3)'\n      } : undefined\n    }), this.$slots) : h(\"div\", {\n      class: [`${mergedClsPrefix}-layout-sider-scroll-container`, this.contentClass],\n      onScroll: this.handleNativeElScroll,\n      style: [this.scrollContainerStyle, {\n        overflow: 'auto'\n      }, this.contentStyle],\n      ref: \"scrollableElRef\"\n    }, this.$slots), showTrigger ? showTrigger === 'bar' ? h(ToggleBar, {\n      clsPrefix: mergedClsPrefix,\n      class: mergedCollapsed ? this.collapsedTriggerClass : this.triggerClass,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : h(ToggleButton, {\n      clsPrefix: mergedClsPrefix,\n      class: mergedCollapsed ? this.collapsedTriggerClass : this.triggerClass,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : null, this.bordered ? h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider__border`\n    }) : null);\n  }\n});","map":{"version":3,"names":["h","defineComponent","computed","ref","toRef","inject","provide","useMergedState","useConfig","useTheme","useThemeClass","formatLength","call","warn","useReactivated","NScrollbar","layoutLight","style","ToggleButton","ToggleBar","layoutSiderInjectionKey","positionProp","layoutInjectionKey","layoutSiderProps","position","bordered","Boolean","collapsedWidth","type","Number","default","width","String","contentClass","contentStyle","Object","collapseMode","collapsed","undefined","defaultCollapsed","showCollapsedContent","showTrigger","nativeScrollbar","inverted","scrollbarProps","triggerClass","triggerStyle","collapsedTriggerClass","collapsedTriggerStyle","Function","Array","onUpdateCollapsed","onAfterEnter","onAfterLeave","onExpand","onCollapse","onScroll","name","props","assign","setup","layoutProps","process","env","NODE_ENV","hasSider","scrollableElRef","scrollbarInstRef","styleMaxWidthRef","mergedCollapsedRef","value","scrollContainerStyleRef","minWidth","siderPlacementRef","siderPlacement","uncontrolledCollapsedRef","scrollTo","options","y","scrollableEl","scrollbarInst","handleTriggerClick","_onUpdateCollapsed","scrollX","scrollY","handleNativeElScroll","e","_a","target","scrollLeft","scrollTop","el","collapsedRef","collapseModeRef","mergedClsPrefixRef","inlineThemeDisabled","themeRef","handleTransitionend","_b","propertyName","exposedMethods","cssVarsRef","common","cubicBezierEaseInOut","self","siderToggleButtonColor","siderToggleButtonBorder","siderToggleBarColor","siderToggleBarColorHover","vars","siderColorInverted","textColorInverted","siderBorderColorInverted","siderToggleButtonIconColorInverted","__invertScrollbar","siderColor","textColor","siderBorderColor","siderToggleButtonIconColor","themeClassHandle","mergedClsPrefix","mergedTheme","styleMaxWidth","mergedCollapsed","scrollContainerStyle","cssVars","themeClass","onRender","render","class","onTransitionend","maxWidth","theme","peers","Scrollbar","themeOverrides","peerOverrides","builtinThemeOverrides","colorHover","color","$slots","overflow","clsPrefix","onClick"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/layout/src/LayoutSider.mjs"],"sourcesContent":["import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from \"../../_mixins/index.mjs\";\nimport { formatLength, call, warn, useReactivated } from \"../../_utils/index.mjs\";\nimport { NScrollbar } from \"../../_internal/index.mjs\";\nimport { layoutLight } from \"../styles/index.mjs\";\nimport style from \"./styles/layout-sider.cssr.mjs\";\nimport ToggleButton from \"./ToggleButton.mjs\";\nimport ToggleBar from \"./ToggleBar.mjs\";\nimport { layoutSiderInjectionKey, positionProp } from \"./interface.mjs\";\nimport { layoutInjectionKey } from \"./Layout.mjs\";\nexport const layoutSiderProps = {\n  position: positionProp,\n  bordered: Boolean,\n  collapsedWidth: {\n    type: Number,\n    default: 48\n  },\n  width: {\n    type: [Number, String],\n    default: 272\n  },\n  contentClass: String,\n  contentStyle: {\n    type: [String, Object],\n    default: ''\n  },\n  collapseMode: {\n    type: String,\n    default: 'transform'\n  },\n  collapsed: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultCollapsed: Boolean,\n  showCollapsedContent: {\n    type: Boolean,\n    default: true\n  },\n  showTrigger: {\n    type: [Boolean, String],\n    default: false\n  },\n  nativeScrollbar: {\n    type: Boolean,\n    default: true\n  },\n  inverted: Boolean,\n  scrollbarProps: Object,\n  triggerClass: String,\n  triggerStyle: [String, Object],\n  collapsedTriggerClass: String,\n  collapsedTriggerStyle: [String, Object],\n  'onUpdate:collapsed': [Function, Array],\n  onUpdateCollapsed: [Function, Array],\n  onAfterEnter: Function,\n  onAfterLeave: Function,\n  // deprecated\n  onExpand: [Function, Array],\n  onCollapse: [Function, Array],\n  onScroll: Function\n};\nexport default defineComponent({\n  name: 'LayoutSider',\n  props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n  setup(props) {\n    const layoutProps = inject(layoutInjectionKey);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!layoutProps) {\n        warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n      } else {\n        if (!layoutProps.hasSider) {\n          warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n        }\n      }\n    }\n    const scrollableElRef = ref(null);\n    const scrollbarInstRef = ref(null);\n    const styleMaxWidthRef = computed(() => {\n      return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n    });\n    const scrollContainerStyleRef = computed(() => {\n      if (props.collapseMode !== 'transform') return {};\n      return {\n        minWidth: formatLength(props.width)\n      };\n    });\n    const siderPlacementRef = computed(() => {\n      return layoutProps ? layoutProps.siderPlacement : 'left';\n    });\n    const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n    const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n    function scrollTo(options, y) {\n      if (props.nativeScrollbar) {\n        const {\n          value: scrollableEl\n        } = scrollableElRef;\n        if (scrollableEl) {\n          if (y === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            scrollableEl.scrollTo(options);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            scrollableEl.scrollTo(options, y);\n          }\n        }\n      } else {\n        const {\n          value: scrollbarInst\n        } = scrollbarInstRef;\n        if (scrollbarInst) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          scrollbarInst.scrollTo(options, y);\n        }\n      }\n    }\n    function handleTriggerClick() {\n      const {\n        'onUpdate:collapsed': _onUpdateCollapsed,\n        onUpdateCollapsed,\n        // deprecated\n        onExpand,\n        onCollapse\n      } = props;\n      const {\n        value: collapsed\n      } = mergedCollapsedRef;\n      if (onUpdateCollapsed) {\n        call(onUpdateCollapsed, !collapsed);\n      }\n      if (_onUpdateCollapsed) {\n        call(_onUpdateCollapsed, !collapsed);\n      }\n      uncontrolledCollapsedRef.value = !collapsed;\n      if (collapsed) {\n        if (onExpand) call(onExpand);\n      } else {\n        if (onCollapse) call(onCollapse);\n      }\n    }\n    let scrollX = 0;\n    let scrollY = 0;\n    const handleNativeElScroll = e => {\n      var _a;\n      const target = e.target;\n      scrollX = target.scrollLeft;\n      scrollY = target.scrollTop;\n      (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    };\n    useReactivated(() => {\n      if (props.nativeScrollbar) {\n        const el = scrollableElRef.value;\n        if (el) {\n          el.scrollTop = scrollY;\n          el.scrollLeft = scrollX;\n        }\n      }\n    });\n    provide(layoutSiderInjectionKey, {\n      collapsedRef: mergedCollapsedRef,\n      collapseModeRef: toRef(props, 'collapseMode')\n    });\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n    function handleTransitionend(e) {\n      var _a, _b;\n      if (e.propertyName === 'max-width') {\n        if (mergedCollapsedRef.value) {\n          (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n        } else {\n          (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n      }\n    }\n    const exposedMethods = {\n      scrollTo\n    };\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self\n      } = themeRef.value;\n      const {\n        siderToggleButtonColor,\n        siderToggleButtonBorder,\n        siderToggleBarColor,\n        siderToggleBarColorHover\n      } = self;\n      const vars = {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-toggle-button-color': siderToggleButtonColor,\n        '--n-toggle-button-border': siderToggleButtonBorder,\n        '--n-toggle-bar-color': siderToggleBarColor,\n        '--n-toggle-bar-color-hover': siderToggleBarColorHover\n      };\n      if (props.inverted) {\n        vars['--n-color'] = self.siderColorInverted;\n        vars['--n-text-color'] = self.textColorInverted;\n        vars['--n-border-color'] = self.siderBorderColorInverted;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColorInverted;\n        vars.__invertScrollbar = self.__invertScrollbar;\n      } else {\n        vars['--n-color'] = self.siderColor;\n        vars['--n-text-color'] = self.textColor;\n        vars['--n-border-color'] = self.siderBorderColor;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n      }\n      return vars;\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('layout-sider', computed(() => props.inverted ? 'a' : 'b'), cssVarsRef, props) : undefined;\n    return Object.assign({\n      scrollableElRef,\n      scrollbarInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: themeRef,\n      styleMaxWidth: styleMaxWidthRef,\n      mergedCollapsed: mergedCollapsedRef,\n      scrollContainerStyle: scrollContainerStyleRef,\n      siderPlacement: siderPlacementRef,\n      handleNativeElScroll,\n      handleTransitionend,\n      handleTriggerClick,\n      inlineThemeDisabled,\n      cssVars: cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    }, exposedMethods);\n  },\n  render() {\n    var _a;\n    const {\n      mergedClsPrefix,\n      mergedCollapsed,\n      showTrigger\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"aside\", {\n      class: [`${mergedClsPrefix}-layout-sider`, this.themeClass, `${mergedClsPrefix}-layout-sider--${this.position}-positioned`, `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`, this.bordered && `${mergedClsPrefix}-layout-sider--bordered`, mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`, (!mergedCollapsed || this.showCollapsedContent) && `${mergedClsPrefix}-layout-sider--show-content`],\n      onTransitionend: this.handleTransitionend,\n      style: [this.inlineThemeDisabled ? undefined : this.cssVars, {\n        maxWidth: this.styleMaxWidth,\n        width: formatLength(this.width)\n      }]\n    }, !this.nativeScrollbar ? h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      onScroll: this.onScroll,\n      ref: \"scrollbarInstRef\",\n      style: this.scrollContainerStyle,\n      contentStyle: this.contentStyle,\n      contentClass: this.contentClass,\n      theme: this.mergedTheme.peers.Scrollbar,\n      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,\n      // here is a hack, since in light theme the scrollbar color is dark,\n      // we need to invert it in light color...\n      builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true' ? {\n        colorHover: 'rgba(255, 255, 255, .4)',\n        color: 'rgba(255, 255, 255, .3)'\n      } : undefined\n    }), this.$slots) : h(\"div\", {\n      class: [`${mergedClsPrefix}-layout-sider-scroll-container`, this.contentClass],\n      onScroll: this.handleNativeElScroll,\n      style: [this.scrollContainerStyle, {\n        overflow: 'auto'\n      }, this.contentStyle],\n      ref: \"scrollableElRef\"\n    }, this.$slots), showTrigger ? showTrigger === 'bar' ? h(ToggleBar, {\n      clsPrefix: mergedClsPrefix,\n      class: mergedCollapsed ? this.collapsedTriggerClass : this.triggerClass,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : h(ToggleButton, {\n      clsPrefix: mergedClsPrefix,\n      class: mergedCollapsed ? this.collapsedTriggerClass : this.triggerClass,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : null, this.bordered ? h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider__border`\n    }) : null);\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}