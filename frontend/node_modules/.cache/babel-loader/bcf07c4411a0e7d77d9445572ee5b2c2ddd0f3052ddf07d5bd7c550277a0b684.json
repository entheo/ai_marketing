{"ast":null,"code":"// src/router/index.js\nimport { createRouter, createWebHistory } from 'vue-router';\n//import { useStore } from 'vuex';\nimport store from '@/store'; // 从 '@/store' 导入 Vuex store\n\n// 引入你的Vue组件\nimport HomePage from '../components/HomePage.vue';\nimport DashboardPage from '../components/DashboardPage.vue';\n//import TestDashboardPage from '../components/TestDashboardPage.vue';\nimport LoginPage from '../components/LoginPage.vue';\nimport OldCampaignPage from '../components/OldCampaignPage.vue';\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: HomePage\n}, {\n  path: '/dashboard',\n  name: 'Dashboard',\n  component: DashboardPage,\n  // 这个meta字段可以用来检查用户是否登录\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/campaign',\n  name: 'Campaign',\n  component: OldCampaignPage,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/login',\n  name: 'Login',\n  component: LoginPage\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// 应用启动时从localStorage恢复状态\n//const restoreAuthState = () => {\n//  const authStore = useStore();\n//  console.log(authStore.getters.isLogedIn);\n//  const token = localStorage.getItem('user'); // 假设存储的令牌键名为'authToken'\n//  console.log(token)\n//  if (token) {\n//    authStore.logIn(token);\n//  }\n// };\n///\n\nconst restoreAuthState = () => {\n  //console.log(localStorage);\n  if (localStorage.getItem('token')) {\n    // 这里是假设存储的令牌键名为 'token'\n    const token = localStorage.getItem('token');\n    const user = {}; // 这里需要从某处获取或初始化 user 信息\n    store.commit('auth_success', {\n      token,\n      user\n    });\n  }\n};\nrouter.beforeEach((to, from, next) => {\n  restoreAuthState();\n  if (to.matched.some(record => record.meta.requiresAuth) && !store.getters.isLoggedIn) {\n    next({\n      name: 'Home'\n    });\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","HomePage","DashboardPage","LoginPage","OldCampaignPage","routes","path","name","component","meta","requiresAuth","router","history","restoreAuthState","localStorage","getItem","token","user","commit","beforeEach","to","from","next","matched","some","record","getters","isLoggedIn"],"sources":["/Users/wangjohnson/ai_marketing/frontend/src/router/index.js"],"sourcesContent":["// src/router/index.js\nimport { createRouter, createWebHistory } from 'vue-router';\n//import { useStore } from 'vuex';\nimport store from '@/store';  // 从 '@/store' 导入 Vuex store\n\n// 引入你的Vue组件\nimport HomePage from '../components/HomePage.vue';\nimport DashboardPage from '../components/DashboardPage.vue';\n//import TestDashboardPage from '../components/TestDashboardPage.vue';\nimport LoginPage from '../components/LoginPage.vue';\nimport OldCampaignPage from '../components/OldCampaignPage.vue';\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: HomePage,\n  },\n  {\n      path: '/dashboard',\n      name: 'Dashboard',\n      component: DashboardPage,\n    // 这个meta字段可以用来检查用户是否登录\n       meta: { requiresAuth: true }\n  },\n  {   path: '/campaign',\n      name: 'Campaign',\n      component:OldCampaignPage,\n       meta: { requiresAuth: true }\n      },\n  {\n    path: '/login',\n    name: 'Login',\n    component: LoginPage,\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\n// 应用启动时从localStorage恢复状态\n//const restoreAuthState = () => {\n//  const authStore = useStore();\n//  console.log(authStore.getters.isLogedIn);\n//  const token = localStorage.getItem('user'); // 假设存储的令牌键名为'authToken'\n//  console.log(token)\n//  if (token) {\n//    authStore.logIn(token);\n//  }\n// };\n///\n\nconst restoreAuthState = () => {\n  //console.log(localStorage);\n  if (localStorage.getItem('token')) {\n    // 这里是假设存储的令牌键名为 'token'\n    const token = localStorage.getItem('token');\n    const user = {}; // 这里需要从某处获取或初始化 user 信息\n    store.commit('auth_success', { token, user });\n  }\n};\n\n\nrouter.beforeEach((to, from, next) => {\n  restoreAuthState(); \n  if (to.matched.some(record => record.meta.requiresAuth) && !store.getters.isLoggedIn) {\n    next({ name: 'Home' });\n  } else {\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D;AACA,OAAOC,KAAK,MAAM,SAAS,CAAC,CAAE;;AAE9B;AACA,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D;AACA,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,eAAe,MAAM,mCAAmC;AAE/D,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEP;AACb,CAAC,EACD;EACIK,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEN,aAAa;EAC1B;EACGO,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAChC,CAAC,EACD;EAAIJ,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAACJ,eAAe;EACxBK,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC5B,CAAC,EACL;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEL;AACb,CAAC,CACF;AAED,MAAMQ,MAAM,GAAGb,YAAY,CAAC;EAC1Bc,OAAO,EAAEb,gBAAgB,CAAC,CAAC;EAC3BM;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;EAC7B;EACA,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IACjC;IACA,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAME,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;IACjBjB,KAAK,CAACkB,MAAM,CAAC,cAAc,EAAE;MAAEF,KAAK;MAAEC;IAAK,CAAC,CAAC;EAC/C;AACF,CAAC;AAGDN,MAAM,CAACQ,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpCT,gBAAgB,CAAC,CAAC;EAClB,IAAIO,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAChB,IAAI,CAACC,YAAY,CAAC,IAAI,CAACV,KAAK,CAAC0B,OAAO,CAACC,UAAU,EAAE;IACpFL,IAAI,CAAC;MAAEf,IAAI,EAAE;IAAO,CAAC,CAAC;EACxB,CAAC,MAAM;IACLe,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeX,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}