{"ast":null,"code":"import { h, defineComponent, computed } from 'vue';\nfunction circlePath(r, sw, vw = 100) {\n  return `m ${vw / 2} ${vw / 2 - r} a ${r} ${r} 0 1 1 0 ${2 * r} a ${r} ${r} 0 1 1 0 -${2 * r}`;\n}\nexport default defineComponent({\n  name: 'ProgressMultipleCircle',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    viewBoxWidth: {\n      type: Number,\n      required: true\n    },\n    percentage: {\n      type: Array,\n      default: [0]\n    },\n    strokeWidth: {\n      type: Number,\n      required: true\n    },\n    circleGap: {\n      type: Number,\n      required: true\n    },\n    showIndicator: {\n      type: Boolean,\n      required: true\n    },\n    fillColor: {\n      type: Array,\n      default: () => []\n    },\n    railColor: {\n      type: Array,\n      default: () => []\n    },\n    railStyle: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props, {\n    slots\n  }) {\n    const strokeDasharrayRef = computed(() => {\n      const strokeDasharrays = props.percentage.map((v, i) => `${Math.PI * v / 100 * (props.viewBoxWidth / 2 - props.strokeWidth / 2 * (1 + 2 * i) - props.circleGap * i) * 2}, ${props.viewBoxWidth * 8}`);\n      return strokeDasharrays;\n    });\n    return () => {\n      const {\n        viewBoxWidth,\n        strokeWidth,\n        circleGap,\n        showIndicator,\n        fillColor,\n        railColor,\n        railStyle,\n        percentage,\n        clsPrefix\n      } = props;\n      return h(\"div\", {\n        class: `${clsPrefix}-progress-content`,\n        role: \"none\"\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph`,\n        \"aria-hidden\": true\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph-circle`\n      }, h(\"svg\", {\n        viewBox: `0 0 ${viewBoxWidth} ${viewBoxWidth}`\n      }, percentage.map((p, index) => {\n        return h(\"g\", {\n          key: index\n        }, h(\"path\", {\n          class: `${clsPrefix}-progress-graph-circle-rail`,\n          d: circlePath(viewBoxWidth / 2 - strokeWidth / 2 * (1 + 2 * index) - circleGap * index, strokeWidth, viewBoxWidth),\n          \"stroke-width\": strokeWidth,\n          \"stroke-linecap\": \"round\",\n          fill: \"none\",\n          style: [{\n            strokeDashoffset: 0,\n            stroke: railColor[index]\n          }, railStyle[index]]\n        }), h(\"path\", {\n          class: [`${clsPrefix}-progress-graph-circle-fill`, p === 0 && `${clsPrefix}-progress-graph-circle-fill--empty`],\n          d: circlePath(viewBoxWidth / 2 - strokeWidth / 2 * (1 + 2 * index) - circleGap * index, strokeWidth, viewBoxWidth),\n          \"stroke-width\": strokeWidth,\n          \"stroke-linecap\": \"round\",\n          fill: \"none\",\n          style: {\n            strokeDasharray: strokeDasharrayRef.value[index],\n            strokeDashoffset: 0,\n            stroke: fillColor[index]\n          }\n        }));\n      })))), showIndicator && slots.default ? h(\"div\", null, h(\"div\", {\n        class: `${clsPrefix}-progress-text`\n      }, slots.default())) : null);\n    };\n  }\n});","map":{"version":3,"names":["h","defineComponent","computed","circlePath","r","sw","vw","name","props","clsPrefix","type","String","required","viewBoxWidth","Number","percentage","Array","default","strokeWidth","circleGap","showIndicator","Boolean","fillColor","railColor","railStyle","setup","slots","strokeDasharrayRef","strokeDasharrays","map","v","i","Math","PI","class","role","viewBox","p","index","key","d","fill","style","strokeDashoffset","stroke","strokeDasharray","value"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/progress/src/MultipleCircle.mjs"],"sourcesContent":["import { h, defineComponent, computed } from 'vue';\nfunction circlePath(r, sw, vw = 100) {\n  return `m ${vw / 2} ${vw / 2 - r} a ${r} ${r} 0 1 1 0 ${2 * r} a ${r} ${r} 0 1 1 0 -${2 * r}`;\n}\nexport default defineComponent({\n  name: 'ProgressMultipleCircle',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    viewBoxWidth: {\n      type: Number,\n      required: true\n    },\n    percentage: {\n      type: Array,\n      default: [0]\n    },\n    strokeWidth: {\n      type: Number,\n      required: true\n    },\n    circleGap: {\n      type: Number,\n      required: true\n    },\n    showIndicator: {\n      type: Boolean,\n      required: true\n    },\n    fillColor: {\n      type: Array,\n      default: () => []\n    },\n    railColor: {\n      type: Array,\n      default: () => []\n    },\n    railStyle: {\n      type: Array,\n      default: () => []\n    }\n  },\n  setup(props, {\n    slots\n  }) {\n    const strokeDasharrayRef = computed(() => {\n      const strokeDasharrays = props.percentage.map((v, i) => `${Math.PI * v / 100 * (props.viewBoxWidth / 2 - props.strokeWidth / 2 * (1 + 2 * i) - props.circleGap * i) * 2}, ${props.viewBoxWidth * 8}`);\n      return strokeDasharrays;\n    });\n    return () => {\n      const {\n        viewBoxWidth,\n        strokeWidth,\n        circleGap,\n        showIndicator,\n        fillColor,\n        railColor,\n        railStyle,\n        percentage,\n        clsPrefix\n      } = props;\n      return h(\"div\", {\n        class: `${clsPrefix}-progress-content`,\n        role: \"none\"\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph`,\n        \"aria-hidden\": true\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph-circle`\n      }, h(\"svg\", {\n        viewBox: `0 0 ${viewBoxWidth} ${viewBoxWidth}`\n      }, percentage.map((p, index) => {\n        return h(\"g\", {\n          key: index\n        }, h(\"path\", {\n          class: `${clsPrefix}-progress-graph-circle-rail`,\n          d: circlePath(viewBoxWidth / 2 - strokeWidth / 2 * (1 + 2 * index) - circleGap * index, strokeWidth, viewBoxWidth),\n          \"stroke-width\": strokeWidth,\n          \"stroke-linecap\": \"round\",\n          fill: \"none\",\n          style: [{\n            strokeDashoffset: 0,\n            stroke: railColor[index]\n          }, railStyle[index]]\n        }), h(\"path\", {\n          class: [`${clsPrefix}-progress-graph-circle-fill`, p === 0 && `${clsPrefix}-progress-graph-circle-fill--empty`],\n          d: circlePath(viewBoxWidth / 2 - strokeWidth / 2 * (1 + 2 * index) - circleGap * index, strokeWidth, viewBoxWidth),\n          \"stroke-width\": strokeWidth,\n          \"stroke-linecap\": \"round\",\n          fill: \"none\",\n          style: {\n            strokeDasharray: strokeDasharrayRef.value[index],\n            strokeDashoffset: 0,\n            stroke: fillColor[index]\n          }\n        }));\n      })))), showIndicator && slots.default ? h(\"div\", null, h(\"div\", {\n        class: `${clsPrefix}-progress-text`\n      }, slots.default())) : null);\n    };\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}