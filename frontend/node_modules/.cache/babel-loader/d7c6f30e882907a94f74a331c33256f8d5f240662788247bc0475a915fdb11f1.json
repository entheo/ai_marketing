{"ast":null,"code":"import commonVars from \"./_common.mjs\";\nimport { commonLight } from \"../../_styles/common/index.mjs\";\nexport const self = vars => {\n  const {\n    primaryColor,\n    textColor2,\n    borderColor,\n    lineHeight,\n    fontSize,\n    borderRadiusSmall,\n    dividerColor,\n    fontWeightStrong,\n    textColor1,\n    textColor3,\n    infoColor,\n    warningColor,\n    errorColor,\n    successColor,\n    codeColor\n  } = vars;\n  return Object.assign(Object.assign({}, commonVars), {\n    aTextColor: primaryColor,\n    blockquoteTextColor: textColor2,\n    blockquotePrefixColor: borderColor,\n    blockquoteLineHeight: lineHeight,\n    blockquoteFontSize: fontSize,\n    codeBorderRadius: borderRadiusSmall,\n    liTextColor: textColor2,\n    liLineHeight: lineHeight,\n    liFontSize: fontSize,\n    hrColor: dividerColor,\n    headerFontWeight: fontWeightStrong,\n    headerTextColor: textColor1,\n    pTextColor: textColor2,\n    pTextColor1Depth: textColor1,\n    pTextColor2Depth: textColor2,\n    pTextColor3Depth: textColor3,\n    pLineHeight: lineHeight,\n    pFontSize: fontSize,\n    headerBarColor: primaryColor,\n    headerBarColorPrimary: primaryColor,\n    headerBarColorInfo: infoColor,\n    headerBarColorError: errorColor,\n    headerBarColorWarning: warningColor,\n    headerBarColorSuccess: successColor,\n    textColor: textColor2,\n    textColor1Depth: textColor1,\n    textColor2Depth: textColor2,\n    textColor3Depth: textColor3,\n    textColorPrimary: primaryColor,\n    textColorInfo: infoColor,\n    textColorSuccess: successColor,\n    textColorWarning: warningColor,\n    textColorError: errorColor,\n    codeTextColor: textColor2,\n    codeColor,\n    codeBorder: '1px solid #0000'\n  });\n};\nconst typographyLight = {\n  name: 'Typography',\n  common: commonLight,\n  self\n};\nexport default typographyLight;","map":{"version":3,"names":["commonVars","commonLight","self","vars","primaryColor","textColor2","borderColor","lineHeight","fontSize","borderRadiusSmall","dividerColor","fontWeightStrong","textColor1","textColor3","infoColor","warningColor","errorColor","successColor","codeColor","Object","assign","aTextColor","blockquoteTextColor","blockquotePrefixColor","blockquoteLineHeight","blockquoteFontSize","codeBorderRadius","liTextColor","liLineHeight","liFontSize","hrColor","headerFontWeight","headerTextColor","pTextColor","pTextColor1Depth","pTextColor2Depth","pTextColor3Depth","pLineHeight","pFontSize","headerBarColor","headerBarColorPrimary","headerBarColorInfo","headerBarColorError","headerBarColorWarning","headerBarColorSuccess","textColor","textColor1Depth","textColor2Depth","textColor3Depth","textColorPrimary","textColorInfo","textColorSuccess","textColorWarning","textColorError","codeTextColor","codeBorder","typographyLight","name","common"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/typography/styles/light.mjs"],"sourcesContent":["import commonVars from \"./_common.mjs\";\nimport { commonLight } from \"../../_styles/common/index.mjs\";\nexport const self = vars => {\n  const {\n    primaryColor,\n    textColor2,\n    borderColor,\n    lineHeight,\n    fontSize,\n    borderRadiusSmall,\n    dividerColor,\n    fontWeightStrong,\n    textColor1,\n    textColor3,\n    infoColor,\n    warningColor,\n    errorColor,\n    successColor,\n    codeColor\n  } = vars;\n  return Object.assign(Object.assign({}, commonVars), {\n    aTextColor: primaryColor,\n    blockquoteTextColor: textColor2,\n    blockquotePrefixColor: borderColor,\n    blockquoteLineHeight: lineHeight,\n    blockquoteFontSize: fontSize,\n    codeBorderRadius: borderRadiusSmall,\n    liTextColor: textColor2,\n    liLineHeight: lineHeight,\n    liFontSize: fontSize,\n    hrColor: dividerColor,\n    headerFontWeight: fontWeightStrong,\n    headerTextColor: textColor1,\n    pTextColor: textColor2,\n    pTextColor1Depth: textColor1,\n    pTextColor2Depth: textColor2,\n    pTextColor3Depth: textColor3,\n    pLineHeight: lineHeight,\n    pFontSize: fontSize,\n    headerBarColor: primaryColor,\n    headerBarColorPrimary: primaryColor,\n    headerBarColorInfo: infoColor,\n    headerBarColorError: errorColor,\n    headerBarColorWarning: warningColor,\n    headerBarColorSuccess: successColor,\n    textColor: textColor2,\n    textColor1Depth: textColor1,\n    textColor2Depth: textColor2,\n    textColor3Depth: textColor3,\n    textColorPrimary: primaryColor,\n    textColorInfo: infoColor,\n    textColorSuccess: successColor,\n    textColorWarning: warningColor,\n    textColorError: errorColor,\n    codeTextColor: textColor2,\n    codeColor,\n    codeBorder: '1px solid #0000'\n  });\n};\nconst typographyLight = {\n  name: 'Typography',\n  common: commonLight,\n  self\n};\nexport default typographyLight;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;AACtC,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,OAAO,MAAMC,IAAI,GAAGC,IAAI,IAAI;EAC1B,MAAM;IACJC,YAAY;IACZC,UAAU;IACVC,WAAW;IACXC,UAAU;IACVC,QAAQ;IACRC,iBAAiB;IACjBC,YAAY;IACZC,gBAAgB;IAChBC,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,YAAY;IACZC,UAAU;IACVC,YAAY;IACZC;EACF,CAAC,GAAGf,IAAI;EACR,OAAOgB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAAC,EAAE;IAClDqB,UAAU,EAAEjB,YAAY;IACxBkB,mBAAmB,EAAEjB,UAAU;IAC/BkB,qBAAqB,EAAEjB,WAAW;IAClCkB,oBAAoB,EAAEjB,UAAU;IAChCkB,kBAAkB,EAAEjB,QAAQ;IAC5BkB,gBAAgB,EAAEjB,iBAAiB;IACnCkB,WAAW,EAAEtB,UAAU;IACvBuB,YAAY,EAAErB,UAAU;IACxBsB,UAAU,EAAErB,QAAQ;IACpBsB,OAAO,EAAEpB,YAAY;IACrBqB,gBAAgB,EAAEpB,gBAAgB;IAClCqB,eAAe,EAAEpB,UAAU;IAC3BqB,UAAU,EAAE5B,UAAU;IACtB6B,gBAAgB,EAAEtB,UAAU;IAC5BuB,gBAAgB,EAAE9B,UAAU;IAC5B+B,gBAAgB,EAAEvB,UAAU;IAC5BwB,WAAW,EAAE9B,UAAU;IACvB+B,SAAS,EAAE9B,QAAQ;IACnB+B,cAAc,EAAEnC,YAAY;IAC5BoC,qBAAqB,EAAEpC,YAAY;IACnCqC,kBAAkB,EAAE3B,SAAS;IAC7B4B,mBAAmB,EAAE1B,UAAU;IAC/B2B,qBAAqB,EAAE5B,YAAY;IACnC6B,qBAAqB,EAAE3B,YAAY;IACnC4B,SAAS,EAAExC,UAAU;IACrByC,eAAe,EAAElC,UAAU;IAC3BmC,eAAe,EAAE1C,UAAU;IAC3B2C,eAAe,EAAEnC,UAAU;IAC3BoC,gBAAgB,EAAE7C,YAAY;IAC9B8C,aAAa,EAAEpC,SAAS;IACxBqC,gBAAgB,EAAElC,YAAY;IAC9BmC,gBAAgB,EAAErC,YAAY;IAC9BsC,cAAc,EAAErC,UAAU;IAC1BsC,aAAa,EAAEjD,UAAU;IACzBa,SAAS;IACTqC,UAAU,EAAE;EACd,CAAC,CAAC;AACJ,CAAC;AACD,MAAMC,eAAe,GAAG;EACtBC,IAAI,EAAE,YAAY;EAClBC,MAAM,EAAEzD,WAAW;EACnBC;AACF,CAAC;AACD,eAAesD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}