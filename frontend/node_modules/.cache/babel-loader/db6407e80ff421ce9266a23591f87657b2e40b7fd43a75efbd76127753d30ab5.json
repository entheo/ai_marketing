{"ast":null,"code":"// src/router/index.js\nimport { createRouter, createWebHistory } from 'vue-router';\nimport { useAuthStore } from '@/store';\n\n// 引入你的Vue组件\nimport HomePage from '../components/HomePage.vue';\nimport DashboardPage from '../components/DashboardPage.vue';\nimport LoginPage from '../components/LoginPage.vue';\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: HomePage\n}, {\n  path: '/dashboard',\n  name: 'Dashboard',\n  component: DashboardPage,\n  // 这个meta字段可以用来检查用户是否登录\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/login',\n  name: 'Login',\n  component: LoginPage\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// 应用启动时从localStorage恢复状态\nconst restoreAuthState = () => {\n  const authStore = useAuthStore();\n  console.log(localStarage);\n  const token = localStorage.getItem('username'); // 假设存储的令牌键名为'authToken'\n  if (token) {\n    authStore.setToken(token);\n    authStore.setLoggedIn(true);\n  }\n};\nrouter.beforeEach((to, from, next) => {\n  const authStore = useAuthStore();\n  restoreAuthState();\n  if (to.meta.requiresAuth && !authStore.isLoggedIn) {\n    next({\n      name: 'Home'\n    });\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","useAuthStore","HomePage","DashboardPage","LoginPage","routes","path","name","component","meta","requiresAuth","router","history","restoreAuthState","authStore","console","log","localStarage","token","localStorage","getItem","setToken","setLoggedIn","beforeEach","to","from","next","isLoggedIn"],"sources":["/Users/wangjohnson/ai_marketing/frontend/src/router/index.js"],"sourcesContent":["// src/router/index.js\nimport { createRouter, createWebHistory } from 'vue-router';\nimport { useAuthStore } from '@/store';\n\n// 引入你的Vue组件\nimport HomePage from '../components/HomePage.vue';\nimport DashboardPage from '../components/DashboardPage.vue';\nimport LoginPage from '../components/LoginPage.vue';\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: HomePage,\n  },\n  {\n      path: '/dashboard',\n      name: 'Dashboard',\n      component: DashboardPage,\n    // 这个meta字段可以用来检查用户是否登录\n       meta: { requiresAuth: true }\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: LoginPage,\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\n// 应用启动时从localStorage恢复状态\nconst restoreAuthState = () => {\n  const authStore = useAuthStore();\n  console.log(localStarage);\n  const token = localStorage.getItem('username'); // 假设存储的令牌键名为'authToken'\n  if (token) {\n    authStore.setToken(token);\n    authStore.setLoggedIn(true);\n  }\n};\n\nrouter.beforeEach((to, from, next) => {\n  const authStore = useAuthStore();\n  restoreAuthState();\n  if (to.meta.requiresAuth && !authStore.isLoggedIn) {\n    next({ name: 'Home' });\n  } else {\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA;AACA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,SAASC,YAAY,QAAQ,SAAS;;AAEtC;AACA,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,SAAS,MAAM,6BAA6B;AAEnD,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEN;AACb,CAAC,EACD;EACII,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEL,aAAa;EAC1B;EACGM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAChC,CAAC,EACD;EACEJ,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEJ;AACb,CAAC,CACF;AAED,MAAMO,MAAM,GAAGZ,YAAY,CAAC;EAC1Ba,OAAO,EAAEZ,gBAAgB,CAAC,CAAC;EAC3BK;AACF,CAAC,CAAC;;AAEF;AACA,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;EAC7B,MAAMC,SAAS,GAAGb,YAAY,CAAC,CAAC;EAChCc,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;EAChD,IAAIF,KAAK,EAAE;IACTJ,SAAS,CAACO,QAAQ,CAACH,KAAK,CAAC;IACzBJ,SAAS,CAACQ,WAAW,CAAC,IAAI,CAAC;EAC7B;AACF,CAAC;AAEDX,MAAM,CAACY,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMZ,SAAS,GAAGb,YAAY,CAAC,CAAC;EAChCY,gBAAgB,CAAC,CAAC;EAClB,IAAIW,EAAE,CAACf,IAAI,CAACC,YAAY,IAAI,CAACI,SAAS,CAACa,UAAU,EAAE;IACjDD,IAAI,CAAC;MAAEnB,IAAI,EAAE;IAAO,CAAC,CAAC;EACxB,CAAC,MAAM;IACLmB,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAef,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}