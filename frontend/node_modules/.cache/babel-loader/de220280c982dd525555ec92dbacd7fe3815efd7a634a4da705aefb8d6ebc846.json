{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nexport function flatten(treeNodes, expandedKeys) {\n  const expandedKeySet = expandedKeys ? new Set(expandedKeys) : undefined;\n  const flattenedNodes = [];\n  function traverse(treeNodes) {\n    treeNodes.forEach(treeNode => {\n      flattenedNodes.push(treeNode);\n      if (treeNode.isLeaf || !treeNode.children || treeNode.ignored) return;\n      if (treeNode.isGroup) {\n        // group node shouldn't be expanded\n        traverse(treeNode.children);\n      } else if (\n      // normal non-leaf node\n      expandedKeySet === undefined || expandedKeySet.has(treeNode.key)) {\n        traverse(treeNode.children);\n      }\n    });\n  }\n  traverse(treeNodes);\n  return flattenedNodes;\n}","map":{"version":3,"names":["flatten","treeNodes","expandedKeys","expandedKeySet","Set","undefined","flattenedNodes","traverse","forEach","treeNode","push","isLeaf","children","ignored","isGroup","has","key"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/treemate/es/flatten.js"],"sourcesContent":["export function flatten(treeNodes, expandedKeys) {\n    const expandedKeySet = expandedKeys ? new Set(expandedKeys) : undefined;\n    const flattenedNodes = [];\n    function traverse(treeNodes) {\n        treeNodes.forEach((treeNode) => {\n            flattenedNodes.push(treeNode);\n            if (treeNode.isLeaf || !treeNode.children || treeNode.ignored)\n                return;\n            if (treeNode.isGroup) {\n                // group node shouldn't be expanded\n                traverse(treeNode.children);\n            }\n            else if (\n            // normal non-leaf node\n            expandedKeySet === undefined ||\n                expandedKeySet.has(treeNode.key)) {\n                traverse(treeNode.children);\n            }\n        });\n    }\n    traverse(treeNodes);\n    return flattenedNodes;\n}\n"],"mappings":";;;;;;;;AAAA,OAAO,SAASA,OAAOA,CAACC,SAAS,EAAEC,YAAY,EAAE;EAC7C,MAAMC,cAAc,GAAGD,YAAY,GAAG,IAAIE,GAAG,CAACF,YAAY,CAAC,GAAGG,SAAS;EACvE,MAAMC,cAAc,GAAG,EAAE;EACzB,SAASC,QAAQA,CAACN,SAAS,EAAE;IACzBA,SAAS,CAACO,OAAO,CAAEC,QAAQ,IAAK;MAC5BH,cAAc,CAACI,IAAI,CAACD,QAAQ,CAAC;MAC7B,IAAIA,QAAQ,CAACE,MAAM,IAAI,CAACF,QAAQ,CAACG,QAAQ,IAAIH,QAAQ,CAACI,OAAO,EACzD;MACJ,IAAIJ,QAAQ,CAACK,OAAO,EAAE;QAClB;QACAP,QAAQ,CAACE,QAAQ,CAACG,QAAQ,CAAC;MAC/B,CAAC,MACI;MACL;MACAT,cAAc,KAAKE,SAAS,IACxBF,cAAc,CAACY,GAAG,CAACN,QAAQ,CAACO,GAAG,CAAC,EAAE;QAClCT,QAAQ,CAACE,QAAQ,CAACG,QAAQ,CAAC;MAC/B;IACJ,CAAC,CAAC;EACN;EACAL,QAAQ,CAACN,SAAS,CAAC;EACnB,OAAOK,cAAc;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}