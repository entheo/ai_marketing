{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { ref, computed, toRef } from 'vue';\nimport { useMergedState } from 'vooks';\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useTransferData(props) {\n  const uncontrolledValueRef = ref(props.defaultValue);\n  const mergedValueRef = useMergedState(toRef(props, 'value'), uncontrolledValueRef);\n  const optionsMapRef = computed(() => {\n    const map = new Map();\n    (props.options || []).forEach(opt => map.set(opt.value, opt));\n    return map;\n  });\n  const targetValueSetRef = computed(() => new Set(mergedValueRef.value || []));\n  const targetOptionsRef = computed(() => {\n    const optionMap = optionsMapRef.value;\n    const targetOptions = [];\n    (mergedValueRef.value || []).forEach(v => {\n      const option = optionMap.get(v);\n      if (option) {\n        targetOptions.push(option);\n      }\n    });\n    return targetOptions;\n  });\n  const srcPatternRef = ref('');\n  const tgtPatternRef = ref('');\n  const mergedSrcFilterableRef = computed(() => {\n    return props.sourceFilterable || !!props.filterable;\n  });\n  const filteredSrcOptionsRef = computed(() => {\n    const {\n      showSelected,\n      options,\n      filter\n    } = props;\n    if (!mergedSrcFilterableRef.value) {\n      if (showSelected) {\n        return options;\n      } else {\n        return options.filter(option => !targetValueSetRef.value.has(option.value));\n      }\n    }\n    return options.filter(option => {\n      return filter(srcPatternRef.value, option, 'source') && (showSelected || !targetValueSetRef.value.has(option.value));\n    });\n  });\n  const filteredTgtOptionsRef = computed(() => {\n    if (!props.targetFilterable) return targetOptionsRef.value;\n    const {\n      filter\n    } = props;\n    return targetOptionsRef.value.filter(opt => filter(tgtPatternRef.value, opt, 'target'));\n  });\n  const mergedValueSetRef = computed(() => {\n    const {\n      value\n    } = mergedValueRef;\n    if (value === null) return new Set();\n    return new Set(value);\n  });\n  const valueSetForCheckAllRef = computed(() => {\n    const values = new Set(mergedValueSetRef.value);\n    filteredSrcOptionsRef.value.forEach(option => {\n      if (!option.disabled && !values.has(option.value)) {\n        values.add(option.value);\n      }\n    });\n    return values;\n  });\n  const valueSetForUncheckAllRef = computed(() => {\n    const values = new Set(mergedValueSetRef.value);\n    filteredSrcOptionsRef.value.forEach(option => {\n      if (!option.disabled && values.has(option.value)) {\n        values.delete(option.value);\n      }\n    });\n    return values;\n  });\n  const valueSetForClearRef = computed(() => {\n    const values = new Set(mergedValueSetRef.value);\n    filteredTgtOptionsRef.value.forEach(option => {\n      if (!option.disabled) {\n        values.delete(option.value);\n      }\n    });\n    return values;\n  });\n  const canNotSelectAnythingRef = computed(() => {\n    return filteredSrcOptionsRef.value.every(option => option.disabled);\n  });\n  const allCheckedRef = computed(() => {\n    if (!filteredSrcOptionsRef.value.length) {\n      return false;\n    }\n    const mergedValueSet = mergedValueSetRef.value;\n    return filteredSrcOptionsRef.value.every(option => option.disabled || mergedValueSet.has(option.value));\n  });\n  const canBeClearedRef = computed(() => {\n    return filteredTgtOptionsRef.value.some(option => !option.disabled);\n  });\n  function handleSrcFilterUpdateValue(value) {\n    srcPatternRef.value = value !== null && value !== void 0 ? value : '';\n  }\n  function handleTgtFilterUpdateValue(value) {\n    tgtPatternRef.value = value !== null && value !== void 0 ? value : '';\n  }\n  return {\n    uncontrolledValueRef,\n    mergedValueRef,\n    targetValueSetRef,\n    valueSetForCheckAllRef,\n    valueSetForUncheckAllRef,\n    valueSetForClearRef,\n    filteredTgtOptionsRef,\n    filteredSrcOptionsRef,\n    targetOptionsRef,\n    canNotSelectAnythingRef,\n    canBeClearedRef,\n    allCheckedRef,\n    srcPatternRef,\n    tgtPatternRef,\n    mergedSrcFilterableRef,\n    handleSrcFilterUpdateValue,\n    handleTgtFilterUpdateValue\n  };\n}","map":{"version":3,"names":["ref","computed","toRef","useMergedState","useTransferData","props","uncontrolledValueRef","defaultValue","mergedValueRef","optionsMapRef","map","Map","options","forEach","opt","set","value","targetValueSetRef","Set","targetOptionsRef","optionMap","targetOptions","v","option","get","push","srcPatternRef","tgtPatternRef","mergedSrcFilterableRef","sourceFilterable","filterable","filteredSrcOptionsRef","showSelected","filter","has","filteredTgtOptionsRef","targetFilterable","mergedValueSetRef","valueSetForCheckAllRef","values","disabled","add","valueSetForUncheckAllRef","delete","valueSetForClearRef","canNotSelectAnythingRef","every","allCheckedRef","length","mergedValueSet","canBeClearedRef","some","handleSrcFilterUpdateValue","handleTgtFilterUpdateValue"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/transfer/src/use-transfer-data.mjs"],"sourcesContent":["import { ref, computed, toRef } from 'vue';\nimport { useMergedState } from 'vooks';\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useTransferData(props) {\n  const uncontrolledValueRef = ref(props.defaultValue);\n  const mergedValueRef = useMergedState(toRef(props, 'value'), uncontrolledValueRef);\n  const optionsMapRef = computed(() => {\n    const map = new Map();\n    (props.options || []).forEach(opt => map.set(opt.value, opt));\n    return map;\n  });\n  const targetValueSetRef = computed(() => new Set(mergedValueRef.value || []));\n  const targetOptionsRef = computed(() => {\n    const optionMap = optionsMapRef.value;\n    const targetOptions = [];\n    (mergedValueRef.value || []).forEach(v => {\n      const option = optionMap.get(v);\n      if (option) {\n        targetOptions.push(option);\n      }\n    });\n    return targetOptions;\n  });\n  const srcPatternRef = ref('');\n  const tgtPatternRef = ref('');\n  const mergedSrcFilterableRef = computed(() => {\n    return props.sourceFilterable || !!props.filterable;\n  });\n  const filteredSrcOptionsRef = computed(() => {\n    const {\n      showSelected,\n      options,\n      filter\n    } = props;\n    if (!mergedSrcFilterableRef.value) {\n      if (showSelected) {\n        return options;\n      } else {\n        return options.filter(option => !targetValueSetRef.value.has(option.value));\n      }\n    }\n    return options.filter(option => {\n      return filter(srcPatternRef.value, option, 'source') && (showSelected || !targetValueSetRef.value.has(option.value));\n    });\n  });\n  const filteredTgtOptionsRef = computed(() => {\n    if (!props.targetFilterable) return targetOptionsRef.value;\n    const {\n      filter\n    } = props;\n    return targetOptionsRef.value.filter(opt => filter(tgtPatternRef.value, opt, 'target'));\n  });\n  const mergedValueSetRef = computed(() => {\n    const {\n      value\n    } = mergedValueRef;\n    if (value === null) return new Set();\n    return new Set(value);\n  });\n  const valueSetForCheckAllRef = computed(() => {\n    const values = new Set(mergedValueSetRef.value);\n    filteredSrcOptionsRef.value.forEach(option => {\n      if (!option.disabled && !values.has(option.value)) {\n        values.add(option.value);\n      }\n    });\n    return values;\n  });\n  const valueSetForUncheckAllRef = computed(() => {\n    const values = new Set(mergedValueSetRef.value);\n    filteredSrcOptionsRef.value.forEach(option => {\n      if (!option.disabled && values.has(option.value)) {\n        values.delete(option.value);\n      }\n    });\n    return values;\n  });\n  const valueSetForClearRef = computed(() => {\n    const values = new Set(mergedValueSetRef.value);\n    filteredTgtOptionsRef.value.forEach(option => {\n      if (!option.disabled) {\n        values.delete(option.value);\n      }\n    });\n    return values;\n  });\n  const canNotSelectAnythingRef = computed(() => {\n    return filteredSrcOptionsRef.value.every(option => option.disabled);\n  });\n  const allCheckedRef = computed(() => {\n    if (!filteredSrcOptionsRef.value.length) {\n      return false;\n    }\n    const mergedValueSet = mergedValueSetRef.value;\n    return filteredSrcOptionsRef.value.every(option => option.disabled || mergedValueSet.has(option.value));\n  });\n  const canBeClearedRef = computed(() => {\n    return filteredTgtOptionsRef.value.some(option => !option.disabled);\n  });\n  function handleSrcFilterUpdateValue(value) {\n    srcPatternRef.value = value !== null && value !== void 0 ? value : '';\n  }\n  function handleTgtFilterUpdateValue(value) {\n    tgtPatternRef.value = value !== null && value !== void 0 ? value : '';\n  }\n  return {\n    uncontrolledValueRef,\n    mergedValueRef,\n    targetValueSetRef,\n    valueSetForCheckAllRef,\n    valueSetForUncheckAllRef,\n    valueSetForClearRef,\n    filteredTgtOptionsRef,\n    filteredSrcOptionsRef,\n    targetOptionsRef,\n    canNotSelectAnythingRef,\n    canBeClearedRef,\n    allCheckedRef,\n    srcPatternRef,\n    tgtPatternRef,\n    mergedSrcFilterableRef,\n    handleSrcFilterUpdateValue,\n    handleTgtFilterUpdateValue\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}