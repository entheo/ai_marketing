{"ast":null,"code":"import { inject, ref, toRef, watchEffect } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from \"../../_mixins/index.mjs\";\nimport { call, createInjectionKey, warnOnce } from \"../../_utils/index.mjs\";\nexport const radioBaseProps = {\n  name: String,\n  value: {\n    type: [String, Number, Boolean],\n    default: 'on'\n  },\n  checked: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultChecked: Boolean,\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  label: String,\n  size: String,\n  onUpdateChecked: [Function, Array],\n  'onUpdate:checked': [Function, Array],\n  // deprecated\n  checkedValue: {\n    type: Boolean,\n    default: undefined\n  }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\nfunction setup(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    watchEffect(() => {\n      if (props.checkedValue !== undefined) {\n        warnOnce('radio', '`checked-value` is deprecated, please use `checked` instead.');\n      }\n    });\n  }\n  const formItem = useFormItem(props, {\n    mergedSize(NFormItem) {\n      const {\n        size\n      } = props;\n      if (size !== undefined) return size;\n      if (NRadioGroup) {\n        const {\n          mergedSizeRef: {\n            value: mergedSize\n          }\n        } = NRadioGroup;\n        if (mergedSize !== undefined) {\n          return mergedSize;\n        }\n      }\n      if (NFormItem) {\n        return NFormItem.mergedSize.value;\n      }\n      return 'medium';\n    },\n    mergedDisabled(NFormItem) {\n      if (props.disabled) return true;\n      if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value) return true;\n      if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value) return true;\n      return false;\n    }\n  });\n  const {\n    mergedSizeRef,\n    mergedDisabledRef\n  } = formItem;\n  const inputRef = ref(null);\n  const labelRef = ref(null);\n  const NRadioGroup = inject(radioGroupInjectionKey, null);\n  const uncontrolledCheckedRef = ref(props.defaultChecked);\n  const controlledCheckedRef = toRef(props, 'checked');\n  const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n  const renderSafeCheckedRef = useMemo(() => {\n    if (NRadioGroup) return NRadioGroup.valueRef.value === props.value;\n    return mergedCheckedRef.value;\n  });\n  const mergedNameRef = useMemo(() => {\n    const {\n      name\n    } = props;\n    if (name !== undefined) return name;\n    if (NRadioGroup) return NRadioGroup.nameRef.value;\n  });\n  const focusRef = ref(false);\n  function doUpdateChecked() {\n    if (NRadioGroup) {\n      const {\n        doUpdateValue\n      } = NRadioGroup;\n      const {\n        value\n      } = props;\n      call(doUpdateValue, value);\n    } else {\n      const {\n        onUpdateChecked,\n        'onUpdate:checked': _onUpdateChecked\n      } = props;\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      if (onUpdateChecked) call(onUpdateChecked, true);\n      if (_onUpdateChecked) call(_onUpdateChecked, true);\n      nTriggerFormInput();\n      nTriggerFormChange();\n      uncontrolledCheckedRef.value = true;\n    }\n  }\n  function toggle() {\n    if (mergedDisabledRef.value) return;\n    if (!renderSafeCheckedRef.value) {\n      doUpdateChecked();\n    }\n  }\n  function handleRadioInputChange() {\n    toggle();\n    // Restore element check prop's value to current state, since if doesn't\n    // reflect current VNode. If not, bug will happens in component with element\n    // that has internal state such as <input />.\n    if (inputRef.value) {\n      inputRef.value.checked = renderSafeCheckedRef.value;\n    }\n  }\n  function handleRadioInputBlur() {\n    focusRef.value = false;\n  }\n  function handleRadioInputFocus() {\n    focusRef.value = true;\n  }\n  return {\n    mergedClsPrefix: NRadioGroup ? NRadioGroup.mergedClsPrefixRef : useConfig(props).mergedClsPrefixRef,\n    inputRef,\n    labelRef,\n    mergedName: mergedNameRef,\n    mergedDisabled: mergedDisabledRef,\n    renderSafeChecked: renderSafeCheckedRef,\n    focus: focusRef,\n    mergedSize: mergedSizeRef,\n    handleRadioInputChange,\n    handleRadioInputBlur,\n    handleRadioInputFocus\n  };\n}\nexport { setup };","map":{"version":3,"names":["inject","ref","toRef","watchEffect","useMemo","useMergedState","useConfig","useFormItem","call","createInjectionKey","warnOnce","radioBaseProps","name","String","value","type","Number","Boolean","default","checked","undefined","defaultChecked","disabled","label","size","onUpdateChecked","Function","Array","checkedValue","radioGroupInjectionKey","setup","props","process","env","NODE_ENV","formItem","mergedSize","NFormItem","NRadioGroup","mergedSizeRef","mergedDisabled","disabledRef","mergedDisabledRef","inputRef","labelRef","uncontrolledCheckedRef","controlledCheckedRef","mergedCheckedRef","renderSafeCheckedRef","valueRef","mergedNameRef","nameRef","focusRef","doUpdateChecked","doUpdateValue","_onUpdateChecked","nTriggerFormInput","nTriggerFormChange","toggle","handleRadioInputChange","handleRadioInputBlur","handleRadioInputFocus","mergedClsPrefix","mergedClsPrefixRef","mergedName","renderSafeChecked","focus"],"sources":["/Users/wangjohnson/ai_marketing/frontend/node_modules/naive-ui/es/radio/src/use-radio.mjs"],"sourcesContent":["import { inject, ref, toRef, watchEffect } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from \"../../_mixins/index.mjs\";\nimport { call, createInjectionKey, warnOnce } from \"../../_utils/index.mjs\";\nexport const radioBaseProps = {\n  name: String,\n  value: {\n    type: [String, Number, Boolean],\n    default: 'on'\n  },\n  checked: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultChecked: Boolean,\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  label: String,\n  size: String,\n  onUpdateChecked: [Function, Array],\n  'onUpdate:checked': [Function, Array],\n  // deprecated\n  checkedValue: {\n    type: Boolean,\n    default: undefined\n  }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\nfunction setup(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    watchEffect(() => {\n      if (props.checkedValue !== undefined) {\n        warnOnce('radio', '`checked-value` is deprecated, please use `checked` instead.');\n      }\n    });\n  }\n  const formItem = useFormItem(props, {\n    mergedSize(NFormItem) {\n      const {\n        size\n      } = props;\n      if (size !== undefined) return size;\n      if (NRadioGroup) {\n        const {\n          mergedSizeRef: {\n            value: mergedSize\n          }\n        } = NRadioGroup;\n        if (mergedSize !== undefined) {\n          return mergedSize;\n        }\n      }\n      if (NFormItem) {\n        return NFormItem.mergedSize.value;\n      }\n      return 'medium';\n    },\n    mergedDisabled(NFormItem) {\n      if (props.disabled) return true;\n      if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value) return true;\n      if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value) return true;\n      return false;\n    }\n  });\n  const {\n    mergedSizeRef,\n    mergedDisabledRef\n  } = formItem;\n  const inputRef = ref(null);\n  const labelRef = ref(null);\n  const NRadioGroup = inject(radioGroupInjectionKey, null);\n  const uncontrolledCheckedRef = ref(props.defaultChecked);\n  const controlledCheckedRef = toRef(props, 'checked');\n  const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n  const renderSafeCheckedRef = useMemo(() => {\n    if (NRadioGroup) return NRadioGroup.valueRef.value === props.value;\n    return mergedCheckedRef.value;\n  });\n  const mergedNameRef = useMemo(() => {\n    const {\n      name\n    } = props;\n    if (name !== undefined) return name;\n    if (NRadioGroup) return NRadioGroup.nameRef.value;\n  });\n  const focusRef = ref(false);\n  function doUpdateChecked() {\n    if (NRadioGroup) {\n      const {\n        doUpdateValue\n      } = NRadioGroup;\n      const {\n        value\n      } = props;\n      call(doUpdateValue, value);\n    } else {\n      const {\n        onUpdateChecked,\n        'onUpdate:checked': _onUpdateChecked\n      } = props;\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      if (onUpdateChecked) call(onUpdateChecked, true);\n      if (_onUpdateChecked) call(_onUpdateChecked, true);\n      nTriggerFormInput();\n      nTriggerFormChange();\n      uncontrolledCheckedRef.value = true;\n    }\n  }\n  function toggle() {\n    if (mergedDisabledRef.value) return;\n    if (!renderSafeCheckedRef.value) {\n      doUpdateChecked();\n    }\n  }\n  function handleRadioInputChange() {\n    toggle();\n    // Restore element check prop's value to current state, since if doesn't\n    // reflect current VNode. If not, bug will happens in component with element\n    // that has internal state such as <input />.\n    if (inputRef.value) {\n      inputRef.value.checked = renderSafeCheckedRef.value;\n    }\n  }\n  function handleRadioInputBlur() {\n    focusRef.value = false;\n  }\n  function handleRadioInputFocus() {\n    focusRef.value = true;\n  }\n  return {\n    mergedClsPrefix: NRadioGroup ? NRadioGroup.mergedClsPrefixRef : useConfig(props).mergedClsPrefixRef,\n    inputRef,\n    labelRef,\n    mergedName: mergedNameRef,\n    mergedDisabled: mergedDisabledRef,\n    renderSafeChecked: renderSafeCheckedRef,\n    focus: focusRef,\n    mergedSize: mergedSizeRef,\n    handleRadioInputChange,\n    handleRadioInputBlur,\n    handleRadioInputFocus\n  };\n}\nexport { setup };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}